1610341184
3 3
11 libpandabsp 4 7Oyg 11 libpandabsp 
557
510 3 get 0 4 1067 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

511 15 get_basetexture 0 4 1067 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

512 12 get_lightmap 0 4 1067 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

513 19 get_bumped_lightmap 0 4 1067 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

514 13 get_spheremap 0 4 1067 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

515 11 get_cubemap 0 4 1067 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

516 13 get_normalmap 0 4 1067 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

517 13 get_heightmap 0 4 1067 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

518 12 get_glossmap 0 4 1067 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

519 11 get_glowmap 0 4 1067 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

520 13 TextureStages 0 4 1067 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

521 14 ~TextureStages 0 4 1067 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

522 11 BSPMaterial 0 4 1068 24 BSPMaterial::BSPMaterial 0 2 14 15 0
139
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "UnlitNoMat");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

523 10 operator = 0 4 1068 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

524 12 set_keyvalue 0 4 1068 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

525 12 get_keyvalue 0 4 1068 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

526 17 get_num_keyvalues 0 4 1068 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

527 7 get_key 0 4 1068 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

528 9 get_value 0 4 1068 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

529 16 get_keyvalue_int 0 4 1068 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

530 18 get_keyvalue_float 0 4 1068 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

531 10 set_shader 0 4 1068 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

532 10 get_shader 0 4 1068 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

533 8 get_file 0 4 1068 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

534 12 has_keyvalue 0 4 1068 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

535 15 has_env_cubemap 0 4 1068 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

536 16 has_transparency 0 4 1068 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

537 16 get_surface_prop 0 4 1068 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

538 12 get_contents 0 4 1068 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

539 14 is_lightmapped 0 4 1068 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

540 9 is_skybox 0 4 1068 22 BSPMaterial::is_skybox 0 1 33 0
47
inline bool BSPMaterial::is_skybox(void) const;

541 11 has_bumpmap 0 4 1068 24 BSPMaterial::has_bumpmap 0 1 34 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

542 13 get_from_file 0 4 1068 26 BSPMaterial::get_from_file 0 1 35 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

543 14 get_class_type 0 4 1068 27 BSPMaterial::get_class_type 0 1 36 0
52
static TypeHandle BSPMaterial::get_class_type(void);

544 12 ~BSPMaterial 0 4 1068 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

545 4 make 0 4 1070 23 BSPMaterialAttrib::make 0 1 37 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

546 20 make_override_shader 0 4 1070 39 BSPMaterialAttrib::make_override_shader 0 1 38 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

547 12 make_default 0 4 1070 31 BSPMaterialAttrib::make_default 0 1 39 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

548 19 get_override_shader 0 4 1070 38 BSPMaterialAttrib::get_override_shader 0 1 40 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

549 19 has_override_shader 0 4 1070 38 BSPMaterialAttrib::has_override_shader 0 1 41 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

550 12 get_material 0 4 1070 31 BSPMaterialAttrib::get_material 0 1 42 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

551 14 get_class_slot 0 4 1070 33 BSPMaterialAttrib::get_class_slot 0 1 43 0
51
static int BSPMaterialAttrib::get_class_slot(void);

552 14 get_class_type 0 4 1070 33 BSPMaterialAttrib::get_class_type 0 1 44 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

553 18 ~BSPMaterialAttrib 0 4 1070 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

554 9 get_width 0 4 1073 21 PackResult::get_width 0 1 46 0
45
inline int PackResult::get_width(void) const;

555 10 get_height 0 4 1073 22 PackResult::get_height 0 1 47 0
46
inline int PackResult::get_height(void) const;

556 15 get_unused_area 0 4 1073 27 PackResult::get_unused_area 0 1 48 0
51
inline int PackResult::get_unused_area(void) const;

557 10 PackResult 0 4 1073 22 PackResult::PackResult 0 1 45 0
60
inline PackResult::PackResult(PackResult const &) = default;

558 11 ~PackResult 0 4 1073 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

559 5 get_x 0 4 1074 22 TextureLocation::get_x 0 1 50 0
46
inline int TextureLocation::get_x(void) const;

560 5 get_y 0 4 1074 22 TextureLocation::get_y 0 1 51 0
46
inline int TextureLocation::get_y(void) const;

561 9 get_width 0 4 1074 26 TextureLocation::get_width 0 1 52 0
50
inline int TextureLocation::get_width(void) const;

562 10 get_height 0 4 1074 27 TextureLocation::get_height 0 1 53 0
51
inline int TextureLocation::get_height(void) const;

563 11 get_rotated 0 4 1074 28 TextureLocation::get_rotated 0 1 54 0
53
inline bool TextureLocation::get_rotated(void) const;

564 15 TextureLocation 0 4 1074 32 TextureLocation::TextureLocation 0 1 49 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

565 16 ~TextureLocation 0 4 1074 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

566 15 getTextureCount 0 6 1075 30 TexturePacker::getTextureCount 0 1 55 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

567 15 setTextureCount 0 6 1075 30 TexturePacker::setTextureCount 0 1 56 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

568 10 addTexture 0 6 1075 25 TexturePacker::addTexture 0 1 57 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

569 15 wouldTextureFit 0 6 1075 30 TexturePacker::wouldTextureFit 0 1 58 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

570 13 addNewTexture 0 6 1075 28 TexturePacker::addNewTexture 0 1 59 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

571 12 packTextures 0 6 1075 27 TexturePacker::packTextures 0 1 60 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

572 18 getTextureLocation 0 6 1075 33 TexturePacker::getTextureLocation 0 1 61 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

573 19 createTexturePacker 0 4 1075 34 TexturePacker::createTexturePacker 0 1 62 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

574 20 releaseTexturePacker 0 4 1075 35 TexturePacker::releaseTexturePacker 0 1 63 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

575 14 ~TexturePacker 0 4 1075 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

576 10 initialize 0 4 1076 20 RayTrace::initialize 0 1 66 0
39
static void RayTrace::initialize(void);

577 8 destruct 0 4 1076 18 RayTrace::destruct 0 1 67 0
37
static void RayTrace::destruct(void);

578 8 RayTrace 0 4 1076 18 RayTrace::RayTrace 0 2 64 65 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

579 9 ~RayTrace 0 4 1076 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

580 17 RayTraceHitResult 0 4 1077 36 RayTraceHitResult::RayTraceHitResult 0 2 68 69 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

581 7 has_hit 0 4 1077 26 RayTraceHitResult::has_hit 0 1 70 0
51
inline bool RayTraceHitResult::has_hit(void) const;

582 14 get_hit_normal 0 4 1077 33 RayTraceHitResult::get_hit_normal 0 1 71 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

583 6 get_uv 0 4 1077 25 RayTraceHitResult::get_uv 0 1 72 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

584 11 get_prim_id 0 4 1077 30 RayTraceHitResult::get_prim_id 0 1 73 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

585 11 get_geom_id 0 4 1077 30 RayTraceHitResult::get_geom_id 0 1 74 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

586 16 get_hit_fraction 0 4 1077 35 RayTraceHitResult::get_hit_fraction 0 1 75 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

587 18 ~RayTraceHitResult 0 4 1077 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

588 13 RayTraceScene 0 4 1078 28 RayTraceScene::RayTraceScene 0 2 76 77 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

589 12 add_geometry 0 4 1078 27 RayTraceScene::add_geometry 0 1 78 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

590 15 remove_geometry 0 4 1078 30 RayTraceScene::remove_geometry 0 1 79 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

591 10 remove_all 0 4 1078 25 RayTraceScene::remove_all 0 1 80 0
37
void RayTraceScene::remove_all(void);

592 10 trace_line 0 4 1078 25 RayTraceScene::trace_line 0 1 81 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

593 9 trace_ray 0 4 1078 24 RayTraceScene::trace_ray 0 1 82 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

594 17 set_build_quality 0 4 1078 32 RayTraceScene::set_build_quality 0 1 83 0
51
void RayTraceScene::set_build_quality(int quality);

595 6 update 0 4 1078 21 RayTraceScene::update 0 1 84 0
33
void RayTraceScene::update(void);

596 12 get_geometry 0 4 1078 27 RayTraceScene::get_geometry 0 1 85 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

597 14 get_class_type 0 4 1081 32 RayTraceGeometry::get_class_type 0 1 86 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

598 8 set_mask 0 4 1081 26 RayTraceGeometry::set_mask 0 2 87 88 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

599 8 get_mask 0 4 1081 26 RayTraceGeometry::get_mask 0 1 89 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

600 11 get_geom_id 0 4 1081 29 RayTraceGeometry::get_geom_id 0 1 90 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

601 17 set_build_quality 0 4 1081 35 RayTraceGeometry::set_build_quality 0 1 91 0
54
void RayTraceGeometry::set_build_quality(int quality);

602 5 build 0 6 1081 23 RayTraceGeometry::build 0 1 92 0
47
virtual void RayTraceGeometry::build(void) = 0;

603 14 get_class_type 0 4 1083 36 RayTraceTriangleMesh::get_class_type 0 1 94 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

604 20 RayTraceTriangleMesh 0 4 1083 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 93 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

605 12 add_triangle 0 4 1083 34 RayTraceTriangleMesh::add_triangle 0 1 95 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

606 23 add_triangles_from_geom 0 4 1083 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 96 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

607 21 ~RayTraceTriangleMesh 0 4 1083 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

608 4 make 0 4 1084 19 BSPFaceAttrib::make 0 1 97 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

609 12 make_default 0 4 1084 27 BSPFaceAttrib::make_default 0 1 98 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

610 15 make_ignore_pvs 0 4 1084 30 BSPFaceAttrib::make_ignore_pvs 0 1 99 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

611 12 get_material 0 4 1084 27 BSPFaceAttrib::get_material 0 1 100 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

612 13 get_face_type 0 4 1084 28 BSPFaceAttrib::get_face_type 0 1 101 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

613 14 get_ignore_pvs 0 4 1084 29 BSPFaceAttrib::get_ignore_pvs 0 1 102 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

614 14 get_class_slot 0 4 1084 29 BSPFaceAttrib::get_class_slot 0 1 103 0
47
static int BSPFaceAttrib::get_class_slot(void);

615 14 get_class_type 0 4 1084 29 BSPFaceAttrib::get_class_type 0 1 104 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

616 14 ~BSPFaceAttrib 0 4 1084 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

617 14 remove_physics 0 4 1086 25 BSPLoader::remove_physics 0 1 105 0
53
void BSPLoader::remove_physics(NodePath const &root);

618 17 set_physics_world 0 4 1086 28 BSPLoader::set_physics_world 0 1 106 0
54
void BSPLoader::set_physics_world(BulletWorld *world);

619 17 get_physics_world 0 4 1086 28 BSPLoader::get_physics_world 0 1 107 0
61
inline BulletWorld *BSPLoader::get_physics_world(void) const;

620 24 has_brush_collision_node 0 4 1086 35 BSPLoader::has_brush_collision_node 0 1 108 0
83
inline bool BSPLoader::has_brush_collision_node(BulletRigidBodyNode *rbnode) const;

621 28 has_brush_collision_triangle 0 4 1086 39 BSPLoader::has_brush_collision_triangle 0 1 109 0
99
inline bool BSPLoader::has_brush_collision_triangle(BulletRigidBodyNode *rbnode, int triangle_idx);

622 27 get_brush_triangle_material 0 4 1086 38 BSPLoader::get_brush_triangle_material 0 1 110 0
105
inline std::string BSPLoader::get_brush_triangle_material(BulletRigidBodyNode *rbnode, int triangle_idx);

623 24 get_brush_triangle_model 0 4 1086 35 BSPLoader::get_brush_triangle_model 0 1 111 0
94
inline int BSPLoader::get_brush_triangle_model(BulletRigidBodyNode *rbnode, int triangle_idx);

624 29 get_brush_triangle_model_fast 0 4 1086 40 BSPLoader::get_brush_triangle_model_fast 0 1 112 0
92
int BSPLoader::get_brush_triangle_model_fast(BulletRigidBodyNode *rbnode, int triangle_idx);

625 16 get_model_origin 0 4 1086 27 BSPLoader::get_model_origin 0 1 113 0
57
inline LPoint3 BSPLoader::get_model_origin(int modelnum);

626 4 read 0 6 1086 15 BSPLoader::read 0 1 114 0
79
virtual bool BSPLoader::read(Filename const &file, bool is_transition = false);

627 16 do_optimizations 0 4 1086 27 BSPLoader::do_optimizations 0 1 115 0
39
void BSPLoader::do_optimizations(void);

628 9 set_gamma 0 4 1086 20 BSPLoader::set_gamma 0 1 116 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

629 9 get_gamma 0 4 1086 20 BSPLoader::get_gamma 0 1 117 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

630 7 set_win 0 4 1086 18 BSPLoader::set_win 0 1 118 0
45
void BSPLoader::set_win(GraphicsWindow *win);

631 10 set_camera 0 4 1086 21 BSPLoader::set_camera 0 1 119 0
51
void BSPLoader::set_camera(NodePath const &camera);

632 10 set_render 0 4 1086 21 BSPLoader::set_render 0 1 120 0
51
void BSPLoader::set_render(NodePath const &render);

633 20 set_shader_generator 0 4 1086 31 BSPLoader::set_shader_generator 0 1 121 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

634 19 set_want_visibility 0 4 1086 30 BSPLoader::set_want_visibility 0 1 122 0
47
void BSPLoader::set_want_visibility(bool flag);

635 18 set_want_lightmaps 0 4 1086 29 BSPLoader::set_want_lightmaps 0 1 123 0
46
void BSPLoader::set_want_lightmaps(bool flag);

636 16 set_physics_type 0 4 1086 27 BSPLoader::set_physics_type 0 1 124 0
43
void BSPLoader::set_physics_type(int type);

637 19 set_visualize_leafs 0 4 1086 30 BSPLoader::set_visualize_leafs 0 1 125 0
47
void BSPLoader::set_visualize_leafs(bool flag);

638 18 set_materials_file 0 4 1086 29 BSPLoader::set_materials_file 0 1 126 0
57
void BSPLoader::set_materials_file(Filename const &file);

639 13 set_wireframe 0 4 1086 24 BSPLoader::set_wireframe 0 1 127 0
41
void BSPLoader::set_wireframe(bool flag);

640 13 get_wireframe 0 4 1086 24 BSPLoader::get_wireframe 0 1 128 0
49
inline bool BSPLoader::get_wireframe(void) const;

641 10 get_camera 0 4 1086 21 BSPLoader::get_camera 0 1 129 0
50
inline NodePath BSPLoader::get_camera(void) const;

642 11 trace_decal 0 4 1086 22 BSPLoader::trace_decal 0 1 130 0
195
inline void BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end, LColorf const &decal_color = LColorf(1));

643 27 get_closest_cubemap_texture 0 4 1086 38 BSPLoader::get_closest_cubemap_texture 0 1 131 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

644 14 build_cubemaps 0 4 1086 25 BSPLoader::build_cubemaps 0 1 132 0
37
void BSPLoader::build_cubemaps(void);

645 16 set_want_shadows 0 4 1086 27 BSPLoader::set_want_shadows 0 1 133 0
44
void BSPLoader::set_want_shadows(bool flag);

646 14 set_shadow_dir 0 4 1086 25 BSPLoader::set_shadow_dir 0 1 134 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

647 16 extract_modelnum 0 4 1086 27 BSPLoader::extract_modelnum 0 1 135 0
44
int BSPLoader::extract_modelnum(int entnum);

648 16 get_model_bounds 0 4 1086 27 BSPLoader::get_model_bounds 0 1 136 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

649 6 set_ai 0 4 1086 17 BSPLoader::set_ai 0 1 137 0
32
void BSPLoader::set_ai(bool ai);

650 5 is_ai 0 4 1086 16 BSPLoader::is_ai 0 1 138 0
41
inline bool BSPLoader::is_ai(void) const;

651 10 trace_line 0 4 1086 21 BSPLoader::trace_line 0 1 139 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

652 9 clip_line 0 4 1086 20 BSPLoader::clip_line 0 1 140 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

653 9 get_model 0 4 1086 20 BSPLoader::get_model 0 1 141 0
50
NodePath BSPLoader::get_model(int modelnum) const;

654 9 find_leaf 0 4 1086 20 BSPLoader::find_leaf 0 2 142 143 0
116
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos, int headnode = 0);

655 9 find_node 0 4 1086 20 BSPLoader::find_node 0 1 144 0
45
int BSPLoader::find_node(LPoint3 const &pos);

656 18 is_cluster_visible 0 4 1086 29 BSPLoader::is_cluster_visible 0 1 145 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

657 15 pvs_bounds_test 0 4 1086 26 BSPLoader::pvs_bounds_test 0 1 146 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

658 15 make_net_bounds 0 4 1086 26 BSPLoader::make_net_bounds 0 1 147 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

659 16 has_active_level 0 4 1086 27 BSPLoader::has_active_level 0 1 148 0
52
inline bool BSPLoader::has_active_level(void) const;

660 14 has_visibility 0 4 1086 25 BSPLoader::has_visibility 0 1 149 0
50
inline bool BSPLoader::has_visibility(void) const;

661 7 cleanup 0 4 1086 18 BSPLoader::cleanup 0 1 150 0
52
void BSPLoader::cleanup(bool is_transition = false);

662 10 get_result 0 4 1086 21 BSPLoader::get_result 0 1 151 0
50
inline NodePath BSPLoader::get_result(void) const;

663 16 set_current_leaf 0 4 1086 27 BSPLoader::set_current_leaf 0 1 152 0
50
inline void BSPLoader::set_current_leaf(int leaf);

664 16 get_current_leaf 0 4 1086 27 BSPLoader::get_current_leaf 0 1 153 0
51
inline int BSPLoader::get_current_leaf(void) const;

665 16 get_num_visleafs 0 4 1086 27 BSPLoader::get_num_visleafs 0 1 154 0
51
inline int BSPLoader::get_num_visleafs(void) const;

666 15 get_leaf_center 0 4 1086 26 BSPLoader::get_leaf_center 0 1 155 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

667 15 get_lightcoords 0 4 1086 26 BSPLoader::get_lightcoords 0 1 156 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

668 14 set_global_ptr 0 4 1086 25 BSPLoader::set_global_ptr 0 1 157 0
54
static void BSPLoader::set_global_ptr(BSPLoader *ptr);

669 14 get_global_ptr 0 4 1086 25 BSPLoader::get_global_ptr 0 1 158 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

670 10 ~BSPLoader 0 4 1086 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

671 14 get_num_points 0 4 1088 28 BoundingKDOP::get_num_points 0 1 159 0
60
inline std::size_t BoundingKDOP::get_num_points(void) const;

672 9 get_point 0 4 1088 23 BoundingKDOP::get_point 0 1 160 0
52
inline LPoint3 BoundingKDOP::get_point(int n) const;

673 14 get_num_planes 0 4 1088 28 BoundingKDOP::get_num_planes 0 1 161 0
60
inline std::size_t BoundingKDOP::get_num_planes(void) const;

674 9 get_plane 0 4 1088 23 BoundingKDOP::get_plane 0 1 162 0
51
inline LPlane BoundingKDOP::get_plane(int n) const;

675 14 get_class_type 0 4 1088 28 BoundingKDOP::get_class_type 0 1 163 0
53
static TypeHandle BoundingKDOP::get_class_type(void);

676 13 ~BoundingKDOP 0 4 1088 27 BoundingKDOP::~BoundingKDOP 0 0 0
34
BoundingKDOP::~BoundingKDOP(void);

677 14 get_class_type 0 4 1090 27 CBaseEntity::get_class_type 0 1 166 0
52
static TypeHandle CBaseEntity::get_class_type(void);

678 11 CBaseEntity 0 4 1090 24 CBaseEntity::CBaseEntity 0 2 164 165 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

679 10 get_loader 0 4 1090 23 CBaseEntity::get_loader 0 1 167 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

680 16 get_entity_value 0 4 1090 29 CBaseEntity::get_entity_value 0 1 168 0
79
inline std::string CBaseEntity::get_entity_value(std::string const &key) const;

681 23 get_entity_value_vector 0 4 1090 36 CBaseEntity::get_entity_value_vector 0 1 169 0
76
LVector3 CBaseEntity::get_entity_value_vector(std::string const &key) const;

682 22 get_entity_value_color 0 4 1090 35 CBaseEntity::get_entity_value_color 0 1 170 0
92
LColor CBaseEntity::get_entity_value_color(std::string const &key, bool scale = true) const;

683 13 get_classname 0 4 1090 26 CBaseEntity::get_classname 0 1 171 0
58
inline std::string CBaseEntity::get_classname(void) const;

684 14 get_targetname 0 4 1090 27 CBaseEntity::get_targetname 0 1 172 0
59
inline std::string CBaseEntity::get_targetname(void) const;

685 14 get_bsp_entnum 0 4 1090 27 CBaseEntity::get_bsp_entnum 0 1 173 0
51
inline int CBaseEntity::get_bsp_entnum(void) const;

686 12 ~CBaseEntity 0 4 1090 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

687 14 get_class_type 0 4 1091 28 CPointEntity::get_class_type 0 1 176 0
53
static TypeHandle CPointEntity::get_class_type(void);

688 12 CPointEntity 0 4 1091 26 CPointEntity::CPointEntity 0 2 174 175 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

689 10 get_origin 0 4 1091 24 CPointEntity::get_origin 0 1 177 0
45
LPoint3 CPointEntity::get_origin(void) const;

690 10 get_angles 0 4 1091 24 CPointEntity::get_angles 0 1 178 0
46
LVector3 CPointEntity::get_angles(void) const;

691 13 ~CPointEntity 0 4 1091 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

692 14 get_class_type 0 4 1092 29 CBoundsEntity::get_class_type 0 1 181 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

693 13 CBoundsEntity 0 4 1092 28 CBoundsEntity::CBoundsEntity 0 2 179 180 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

694 10 get_bounds 0 4 1092 25 CBoundsEntity::get_bounds 0 1 182 0
52
BoundingKDOP *CBoundsEntity::get_bounds(void) const;

695 9 is_inside 0 4 1092 24 CBoundsEntity::is_inside 0 1 183 0
56
bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

696 13 fillin_bounds 0 4 1092 28 CBoundsEntity::fillin_bounds 0 1 184 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

697 14 ~CBoundsEntity 0 4 1092 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

698 14 get_class_type 0 4 1093 28 CBrushEntity::get_class_type 0 1 187 0
53
static TypeHandle CBrushEntity::get_class_type(void);

699 12 CBrushEntity 0 4 1093 26 CBrushEntity::CBrushEntity 0 2 185 186 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

700 12 get_model_np 0 4 1093 26 CBrushEntity::get_model_np 0 1 188 0
48
NodePath CBrushEntity::get_model_np(void) const;

701 16 get_model_bounds 0 4 1093 30 CBrushEntity::get_model_bounds 0 1 189 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

702 13 ~CBrushEntity 0 4 1093 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

703 18 ShaderPermutations 0 4 1094 38 ShaderPermutations::ShaderPermutations 0 1 190 0
52
inline ShaderPermutations::ShaderPermutations(void);

704 15 add_permutation 0 4 1094 35 ShaderPermutations::add_permutation 0 1 191 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

705 8 complete 0 4 1094 28 ShaderPermutations::complete 0 1 192 0
47
inline void ShaderPermutations::complete(void);

706 9 add_input 0 4 1094 29 ShaderPermutations::add_input 0 1 193 0
66
inline void ShaderPermutations::add_input(ShaderInput const &inp);

707 8 add_flag 0 4 1094 28 ShaderPermutations::add_flag 0 1 194 0
51
inline void ShaderPermutations::add_flag(int flag);

708 8 get_hash 0 4 1094 28 ShaderPermutations::get_hash 0 1 195 0
60
inline std::size_t ShaderPermutations::get_hash(void) const;

709 19 ~ShaderPermutations 0 4 1094 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

710 24 upcast_to_ReferenceCount 0 12 1095 36 ShaderSpec::upcast_to_ReferenceCount 0 1 198 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

711 22 downcast_to_ShaderSpec 0 12 1079 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

712 17 upcast_to_Namable 0 12 1095 29 ShaderSpec::upcast_to_Namable 0 1 199 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

713 22 downcast_to_ShaderSpec 0 12 1096 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

714 17 read_shader_files 0 4 1095 29 ShaderSpec::read_shader_files 0 1 196 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

715 14 get_class_type 0 4 1095 26 ShaderSpec::get_class_type 0 1 197 0
51
static TypeHandle ShaderSpec::get_class_type(void);

716 11 ~ShaderSpec 0 4 1095 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

717 22 get_reflection_texture 0 4 1097 41 PlanarReflections::get_reflection_texture 0 1 201 0
63
Texture *PlanarReflections::get_reflection_texture(void) const;

718 17 PlanarReflections 0 4 1097 36 PlanarReflections::PlanarReflections 0 1 200 0
81
inline PlanarReflections::PlanarReflections(PlanarReflections const &) = default;

719 18 ~PlanarReflections 0 4 1097 37 PlanarReflections::~PlanarReflections 0 0 0
44
PlanarReflections::~PlanarReflections(void);

720 18 BSPShaderGenerator 0 4 1101 38 BSPShaderGenerator::BSPShaderGenerator 0 2 202 203 0
224
BSPShaderGenerator::BSPShaderGenerator(GraphicsOutput *output, GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

721 13 set_sun_light 0 4 1101 33 BSPShaderGenerator::set_sun_light 0 1 204 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

722 10 add_shader 0 4 1101 30 BSPShaderGenerator::add_shader 0 1 205 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

723 14 get_sun_vector 0 4 1101 34 BSPShaderGenerator::get_sun_vector 0 1 206 0
63
inline LVector3 BSPShaderGenerator::get_sun_vector(void) const;

724 19 has_shadow_sunlight 0 4 1101 39 BSPShaderGenerator::has_shadow_sunlight 0 1 207 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

725 22 get_pssm_array_texture 0 4 1101 42 BSPShaderGenerator::get_pssm_array_texture 0 1 208 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

726 12 get_pssm_rig 0 4 1101 32 BSPShaderGenerator::get_pssm_rig 0 1 209 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

727 10 get_camera 0 4 1101 30 BSPShaderGenerator::get_camera 0 1 210 0
59
inline NodePath BSPShaderGenerator::get_camera(void) const;

728 10 get_render 0 4 1101 30 BSPShaderGenerator::get_render 0 1 211 0
59
inline NodePath BSPShaderGenerator::get_render(void) const;

729 18 set_shader_quality 0 4 1101 38 BSPShaderGenerator::set_shader_quality 0 1 212 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

730 18 get_shader_quality 0 4 1101 38 BSPShaderGenerator::get_shader_quality 0 1 213 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

731 7 set_fog 0 4 1101 27 BSPShaderGenerator::set_fog 0 1 214 0
50
inline void BSPShaderGenerator::set_fog(Fog *fog);

732 9 clear_fog 0 4 1101 29 BSPShaderGenerator::clear_fog 0 1 215 0
48
inline void BSPShaderGenerator::clear_fog(void);

733 7 get_fog 0 4 1101 27 BSPShaderGenerator::get_fog 0 1 216 0
52
inline Fog *BSPShaderGenerator::get_fog(void) const;

734 12 get_fog_data 0 4 1101 32 BSPShaderGenerator::get_fog_data 0 1 217 0
67
inline PTA_LVecBase4f BSPShaderGenerator::get_fog_data(void) const;

735 22 set_exposure_adustment 0 4 1101 42 BSPShaderGenerator::set_exposure_adustment 0 1 218 0
71
inline void BSPShaderGenerator::set_exposure_adustment(float exposure);

736 23 get_exposure_adjustment 0 4 1101 43 BSPShaderGenerator::get_exposure_adjustment 0 1 219 0
73
inline PTA_float BSPShaderGenerator::get_exposure_adjustment(void) const;

737 7 get_gsg 0 4 1101 27 BSPShaderGenerator::get_gsg 0 1 220 0
70
inline GraphicsStateGuardian *BSPShaderGenerator::get_gsg(void) const;

738 10 get_output 0 4 1101 30 BSPShaderGenerator::get_output 0 1 221 0
66
inline GraphicsOutput *BSPShaderGenerator::get_output(void) const;

739 22 get_planar_reflections 0 4 1101 42 BSPShaderGenerator::get_planar_reflections 0 1 222 0
81
inline PlanarReflections *BSPShaderGenerator::get_planar_reflections(void) const;

740 20 set_identity_cubemap 0 4 1101 40 BSPShaderGenerator::set_identity_cubemap 0 1 223 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

741 20 get_identity_cubemap 0 4 1101 40 BSPShaderGenerator::get_identity_cubemap 0 1 224 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

742 11 make_shader 0 4 1101 31 BSPShaderGenerator::make_shader 0 1 225 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const *perms);

743 6 update 0 4 1101 26 BSPShaderGenerator::update 0 1 226 0
38
void BSPShaderGenerator::update(void);

744 14 get_class_type 0 4 1101 34 BSPShaderGenerator::get_class_type 0 1 227 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

745 19 ~BSPShaderGenerator 0 4 1101 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

746 14 get_class_type 0 4 1103 32 BSPCullTraverser::get_class_type 0 1 230 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

747 16 BSPCullTraverser 0 4 1103 34 BSPCullTraverser::BSPCullTraverser 0 2 228 229 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

748 15 has_camera_bits 0 4 1103 33 BSPCullTraverser::has_camera_bits 0 1 231 0
71
inline bool BSPCullTraverser::has_camera_bits(unsigned int bits) const;

749 14 needs_lighting 0 4 1103 32 BSPCullTraverser::needs_lighting 0 1 232 0
57
inline bool BSPCullTraverser::needs_lighting(void) const;

750 13 needs_culling 0 4 1103 31 BSPCullTraverser::needs_culling 0 1 233 0
56
inline bool BSPCullTraverser::needs_culling(void) const;

751 23 get_required_leaf_flags 0 4 1103 41 BSPCullTraverser::get_required_leaf_flags 0 1 234 106
/**
	 * Returns the flags that must be set on a leaf for it to be
	 * rendered by the current camera.
	 */
74
inline unsigned int BSPCullTraverser::get_required_leaf_flags(void) const;

752 17 ~BSPCullTraverser 0 4 1103 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

753 14 get_class_type 0 4 1105 25 BSPRender::get_class_type 0 1 237 0
50
static TypeHandle BSPRender::get_class_type(void);

754 9 BSPRender 0 4 1105 20 BSPRender::BSPRender 0 2 235 236 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

755 10 ~BSPRender 0 4 1105 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

756 14 get_class_type 0 4 1106 23 BSPRoot::get_class_type 0 1 240 0
48
static TypeHandle BSPRoot::get_class_type(void);

757 7 BSPRoot 0 4 1106 16 BSPRoot::BSPRoot 0 2 238 239 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

758 8 ~BSPRoot 0 4 1106 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

759 14 get_class_type 0 4 1107 23 BSPProp::get_class_type 0 1 243 0
48
static TypeHandle BSPProp::get_class_type(void);

760 7 BSPProp 0 4 1107 16 BSPProp::BSPProp 0 2 241 242 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

761 8 ~BSPProp 0 4 1107 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

762 14 get_class_type 0 4 1109 24 BSPModel::get_class_type 0 1 246 0
49
static TypeHandle BSPModel::get_class_type(void);

763 8 BSPModel 0 4 1109 18 BSPModel::BSPModel 0 2 244 245 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

764 9 ~BSPModel 0 4 1109 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

765 20 VertexLitGenericSpec 0 4 1111 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 247 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

766 21 ~VertexLitGenericSpec 0 4 1111 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

767 22 LightmappedGenericSpec 0 4 1112 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 248 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

768 23 ~LightmappedGenericSpec 0 4 1112 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

769 16 UnlitGenericSpec 0 4 1113 34 UnlitGenericSpec::UnlitGenericSpec 0 1 249 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

770 17 ~UnlitGenericSpec 0 4 1113 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

771 14 UnlitNoMatSpec 0 4 1114 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 250 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

772 15 ~UnlitNoMatSpec 0 4 1114 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

773 13 CSMRenderSpec 0 4 1115 28 CSMRenderSpec::CSMRenderSpec 0 1 251 0
35
CSMRenderSpec::CSMRenderSpec(void);

774 14 ~CSMRenderSpec 0 4 1115 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

775 10 SkyBoxSpec 0 4 1116 22 SkyBoxSpec::SkyBoxSpec 0 1 252 0
29
SkyBoxSpec::SkyBoxSpec(void);

776 11 ~SkyBoxSpec 0 4 1116 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

777 4 make 0 4 1117 24 AmbientBoostEffect::make 0 1 253 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

778 14 get_class_type 0 4 1117 34 AmbientBoostEffect::get_class_type 0 1 254 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

779 19 ~AmbientBoostEffect 0 4 1117 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

780 14 Audio3DManager 0 4 1119 30 Audio3DManager::Audio3DManager 0 2 255 256 0
204
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath());
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

781 19 set_distance_factor 0 4 1119 35 Audio3DManager::set_distance_factor 0 1 257 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

782 19 get_distance_factor 0 4 1119 35 Audio3DManager::get_distance_factor 0 1 258 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

783 18 set_doppler_factor 0 4 1119 34 Audio3DManager::set_doppler_factor 0 1 259 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

784 18 get_doppler_factor 0 4 1119 34 Audio3DManager::get_doppler_factor 0 1 260 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

785 19 set_drop_off_factor 0 4 1119 35 Audio3DManager::set_drop_off_factor 0 1 261 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

786 19 get_drop_off_factor 0 4 1119 35 Audio3DManager::get_drop_off_factor 0 1 262 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

787 22 set_sound_min_distance 0 4 1119 38 Audio3DManager::set_sound_min_distance 0 1 263 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

788 22 get_sound_min_distance 0 4 1119 38 Audio3DManager::get_sound_min_distance 0 1 264 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

789 22 set_sound_max_distance 0 4 1119 38 Audio3DManager::set_sound_max_distance 0 1 265 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

790 22 get_sound_max_distance 0 4 1119 38 Audio3DManager::get_sound_max_distance 0 1 266 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

791 15 attach_listener 0 4 1119 31 Audio3DManager::attach_listener 0 1 267 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

792 15 detach_listener 0 4 1119 31 Audio3DManager::detach_listener 0 1 268 0
50
inline void Audio3DManager::detach_listener(void);

793 8 load_sfx 0 4 1119 24 Audio3DManager::load_sfx 0 1 269 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

794 22 attach_sound_to_object 0 4 1119 38 Audio3DManager::attach_sound_to_object 0 1 270 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

795 12 detach_sound 0 4 1119 28 Audio3DManager::detach_sound 0 1 271 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

796 18 print_audio_digest 0 4 1119 34 Audio3DManager::print_audio_digest 0 1 272 0
46
void Audio3DManager::print_audio_digest(void);

797 6 update 0 4 1119 22 Audio3DManager::update 0 1 273 0
34
void Audio3DManager::update(void);

798 15 ~Audio3DManager 0 4 1119 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

799 19 set_pupil_direction 0 4 1120 27 CIOLib::set_pupil_direction 0 1 276 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

800 14 look_pupils_at 0 4 1120 22 CIOLib::look_pupils_at 0 1 277 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

801 6 CIOLib 0 4 1120 14 CIOLib::CIOLib 0 2 274 275 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

802 7 ~CIOLib 0 4 1120 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

803 17 DecalModulateSpec 0 4 1121 36 DecalModulateSpec::DecalModulateSpec 0 1 278 0
43
DecalModulateSpec::DecalModulateSpec(void);

804 18 ~DecalModulateSpec 0 4 1121 37 DecalModulateSpec::~DecalModulateSpec 0 0 0
44
DecalModulateSpec::~DecalModulateSpec(void);

805 14 get_class_type 0 4 1122 24 GlowNode::get_class_type 0 1 282 0
49
static TypeHandle GlowNode::get_class_type(void);

806 8 GlowNode 0 4 1122 18 GlowNode::GlowNode 0 3 279 280 281 0
219
GlowNode::GlowNode(std::string const &name, float query_size = ::r_glow_querysize);
GlowNode::GlowNode(GeomNode const &copy, float query_size = ::r_glow_querysize);
inline GlowNode::GlowNode(GlowNode const &) = default;

807 9 ~GlowNode 0 4 1122 19 GlowNode::~GlowNode 0 0 0
26
GlowNode::~GlowNode(void);

808 24 upcast_to_ReferenceCount 0 12 1124 43 PostProcessEffect::upcast_to_ReferenceCount 0 1 292 47
upcast from PostProcessEffect to ReferenceCount
66
ReferenceCount *PostProcessEffect::upcast_to_ReferenceCount(void);

809 29 downcast_to_PostProcessEffect 0 12 1079 45 ReferenceCount::downcast_to_PostProcessEffect 0 0 49
downcast from ReferenceCount to PostProcessEffect
71
PostProcessEffect *ReferenceCount::downcast_to_PostProcessEffect(void);

810 17 upcast_to_Namable 0 12 1124 36 PostProcessEffect::upcast_to_Namable 0 1 293 40
upcast from PostProcessEffect to Namable
52
Namable *PostProcessEffect::upcast_to_Namable(void);

811 29 downcast_to_PostProcessEffect 0 12 1096 38 Namable::downcast_to_PostProcessEffect 0 0 42
downcast from Namable to PostProcessEffect
64
PostProcessEffect *Namable::downcast_to_PostProcessEffect(void);

812 14 get_class_type 0 4 1124 33 PostProcessEffect::get_class_type 0 1 283 0
58
static TypeHandle PostProcessEffect::get_class_type(void);

813 17 get_final_texture 0 6 1124 36 PostProcessEffect::get_final_texture 0 1 284 0
64
virtual Texture *PostProcessEffect::get_final_texture(void) = 0;

814 8 add_pass 0 4 1124 27 PostProcessEffect::add_pass 0 1 285 0
56
void PostProcessEffect::add_pass(PostProcessPass *pass);

815 11 remove_pass 0 4 1124 30 PostProcessEffect::remove_pass 0 1 286 0
59
void PostProcessEffect::remove_pass(PostProcessPass *pass);

816 8 get_pass 0 4 1124 27 PostProcessEffect::get_pass 0 1 287 0
70
PostProcessPass *PostProcessEffect::get_pass(std::string const &name);

817 5 setup 0 6 1124 24 PostProcessEffect::setup 0 1 288 0
44
virtual void PostProcessEffect::setup(void);

818 6 update 0 6 1124 25 PostProcessEffect::update 0 1 289 0
45
virtual void PostProcessEffect::update(void);

819 12 window_event 0 4 1124 31 PostProcessEffect::window_event 0 1 290 0
58
void PostProcessEffect::window_event(GraphicsOutput *win);

820 8 shutdown 0 6 1124 27 PostProcessEffect::shutdown 0 1 291 0
47
virtual void PostProcessEffect::shutdown(void);

821 18 ~PostProcessEffect 0 4 1124 37 PostProcessEffect::~PostProcessEffect 0 0 0
44
PostProcessEffect::~PostProcessEffect(void);

822 24 upcast_to_ReferenceCount 0 12 1126 41 PostProcessPass::upcast_to_ReferenceCount 0 1 319 45
upcast from PostProcessPass to ReferenceCount
64
ReferenceCount *PostProcessPass::upcast_to_ReferenceCount(void);

823 27 downcast_to_PostProcessPass 0 12 1079 43 ReferenceCount::downcast_to_PostProcessPass 0 0 47
downcast from ReferenceCount to PostProcessPass
67
PostProcessPass *ReferenceCount::downcast_to_PostProcessPass(void);

824 17 upcast_to_Namable 0 12 1126 34 PostProcessPass::upcast_to_Namable 0 1 320 38
upcast from PostProcessPass to Namable
50
Namable *PostProcessPass::upcast_to_Namable(void);

825 27 downcast_to_PostProcessPass 0 12 1096 36 Namable::downcast_to_PostProcessPass 0 0 40
downcast from Namable to PostProcessPass
60
PostProcessPass *Namable::downcast_to_PostProcessPass(void);

826 14 get_class_type 0 4 1126 31 PostProcessPass::get_class_type 0 1 296 0
56
static TypeHandle PostProcessPass::get_class_type(void);

827 15 PostProcessPass 0 4 1126 32 PostProcessPass::PostProcessPass 0 2 294 295 0
379
PostProcessPass::PostProcessPass(PostProcess *pp, std::string const &name = "pass", int texture_output_bits = 0, FrameBufferProperties const &fbprops = PostProcessPass::get_default_fbprops(), bool force_size = false, LVector2i const &forced_size = LVector2i::zero(), bool div_size = false, int div = 1);
inline PostProcessPass::PostProcessPass(PostProcessPass const &) = default;

828 8 get_quad 0 4 1126 25 PostProcessPass::get_quad 0 1 297 0
54
inline NodePath PostProcessPass::get_quad(void) const;

829 26 get_back_buffer_dimensions 0 4 1126 43 PostProcessPass::get_back_buffer_dimensions 0 1 298 0
66
LVector2i PostProcessPass::get_back_buffer_dimensions(void) const;

830 10 get_camera 0 4 1126 27 PostProcessPass::get_camera 0 1 299 0
56
inline NodePath PostProcessPass::get_camera(void) const;

831 16 has_texture_bits 0 4 1126 33 PostProcessPass::has_texture_bits 0 1 300 0
62
inline bool PostProcessPass::has_texture_bits(int bits) const;

832 12 set_div_size 0 4 1126 29 PostProcessPass::set_div_size 0 1 301 0
66
inline void PostProcessPass::set_div_size(bool div_size, int div);

833 15 set_forced_size 0 4 1126 32 PostProcessPass::set_forced_size 0 1 302 0
92
inline void PostProcessPass::set_forced_size(bool force_size, LVector2i const &forced_size);

834 26 set_framebuffer_properties 0 4 1126 43 PostProcessPass::set_framebuffer_properties 0 1 303 0
94
inline void PostProcessPass::set_framebuffer_properties(FrameBufferProperties const &fbprops);

835 23 set_output_texture_bits 0 4 1126 40 PostProcessPass::set_output_texture_bits 0 1 304 0
63
inline void PostProcessPass::set_output_texture_bits(int bits);

836 18 get_corrected_size 0 4 1126 35 PostProcessPass::get_corrected_size 0 1 305 0
69
LVector2i PostProcessPass::get_corrected_size(LVector2i const &size);

837 11 get_texture 0 4 1126 28 PostProcessPass::get_texture 0 1 306 0
47
Texture *PostProcessPass::get_texture(int bit);

838 17 get_color_texture 0 4 1126 34 PostProcessPass::get_color_texture 0 1 307 0
57
inline Texture *PostProcessPass::get_color_texture(void);

839 17 get_depth_texture 0 4 1126 34 PostProcessPass::get_depth_texture 0 1 308 0
57
inline Texture *PostProcessPass::get_depth_texture(void);

840 12 setup_buffer 0 6 1126 29 PostProcessPass::setup_buffer 0 1 309 0
49
virtual bool PostProcessPass::setup_buffer(void);

841 14 setup_textures 0 6 1126 31 PostProcessPass::setup_textures 0 1 310 0
51
virtual void PostProcessPass::setup_textures(void);

842 10 setup_quad 0 6 1126 27 PostProcessPass::setup_quad 0 1 311 0
47
virtual void PostProcessPass::setup_quad(void);

843 12 setup_camera 0 6 1126 29 PostProcessPass::setup_camera 0 1 312 0
49
virtual void PostProcessPass::setup_camera(void);

844 12 setup_region 0 6 1126 29 PostProcessPass::setup_region 0 1 313 0
49
virtual void PostProcessPass::setup_region(void);

845 5 setup 0 6 1126 22 PostProcessPass::setup 0 1 314 0
42
virtual void PostProcessPass::setup(void);

846 6 update 0 6 1126 23 PostProcessPass::update 0 1 315 0
43
virtual void PostProcessPass::update(void);

847 12 window_event 0 6 1126 29 PostProcessPass::window_event 0 1 316 0
67
virtual void PostProcessPass::window_event(GraphicsOutput *output);

848 8 shutdown 0 6 1126 25 PostProcessPass::shutdown 0 1 317 0
45
virtual void PostProcessPass::shutdown(void);

849 19 get_default_fbprops 0 4 1126 36 PostProcessPass::get_default_fbprops 0 1 318 0
72
static FrameBufferProperties PostProcessPass::get_default_fbprops(void);

850 16 ~PostProcessPass 0 4 1126 33 PostProcessPass::~PostProcessPass 0 0 0
40
PostProcessPass::~PostProcessPass(void);

851 20 PostProcessScenePass 0 4 1127 42 PostProcessScenePass::PostProcessScenePass 0 2 321 322 0
220
PostProcessScenePass::PostProcessScenePass(PostProcess *pp, int output_texture_bits = ::bits_PASSTEXTURE_COLOR, int auxbits = 0);
inline PostProcessScenePass::PostProcessScenePass(PostProcessScenePass const &) = default;

852 18 setup_scene_camera 0 4 1127 40 PostProcessScenePass::setup_scene_camera 0 1 323 0
53
void PostProcessScenePass::setup_scene_camera(int i);

853 16 set_camera_state 0 4 1127 38 PostProcessScenePass::set_camera_state 0 1 324 0
70
void PostProcessScenePass::set_camera_state(RenderState const *state);

854 21 ~PostProcessScenePass 0 4 1127 43 PostProcessScenePass::~PostProcessScenePass 0 0 0
50
PostProcessScenePass::~PostProcessScenePass(void);

855 11 PostProcess 0 4 1128 24 PostProcess::PostProcess 0 2 325 326 0
95
PostProcess::PostProcess(void);
inline PostProcess::PostProcess(PostProcess const &) = default;

856 7 startup 0 4 1128 20 PostProcess::startup 0 1 327 0
50
void PostProcess::startup(GraphicsOutput *output);

857 10 add_camera 0 4 1128 23 PostProcess::add_camera 0 1 328 0
53
void PostProcess::add_camera(NodePath const &camera);

858 13 remove_camera 0 4 1128 26 PostProcess::remove_camera 0 1 329 0
56
void PostProcess::remove_camera(NodePath const &camera);

859 10 add_effect 0 4 1128 23 PostProcess::add_effect 0 1 330 0
63
inline void PostProcess::add_effect(PostProcessEffect *effect);

860 13 remove_effect 0 4 1128 26 PostProcess::remove_effect 0 1 331 0
66
inline void PostProcess::remove_effect(PostProcessEffect *effect);

861 10 get_effect 0 4 1128 23 PostProcess::get_effect 0 1 332 0
75
inline PostProcessEffect *PostProcess::get_effect(std::string const &name);

862 23 get_scene_color_texture 0 4 1128 36 PostProcess::get_scene_color_texture 0 1 333 0
65
inline Texture *PostProcess::get_scene_color_texture(void) const;

863 23 get_scene_depth_texture 0 4 1128 36 PostProcess::get_scene_depth_texture 0 1 334 0
65
inline Texture *PostProcess::get_scene_depth_texture(void) const;

864 14 get_scene_pass 0 4 1128 27 PostProcess::get_scene_pass 0 1 335 0
69
inline PostProcessScenePass *PostProcess::get_scene_pass(void) const;

865 10 get_output 0 4 1128 23 PostProcess::get_output 0 1 336 0
59
inline GraphicsOutput *PostProcess::get_output(void) const;

866 10 get_camera 0 4 1128 23 PostProcess::get_camera 0 1 337 0
53
inline NodePath PostProcess::get_camera(int n) const;

867 9 next_sort 0 4 1128 22 PostProcess::next_sort 0 1 338 0
40
inline int PostProcess::next_sort(void);

868 25 get_output_display_region 0 4 1128 38 PostProcess::get_output_display_region 0 1 339 0
73
inline DisplayRegion *PostProcess::get_output_display_region(void) const;

869 13 is_fullscreen 0 4 1128 26 PostProcess::is_fullscreen 0 1 340 0
51
inline bool PostProcess::is_fullscreen(void) const;

870 18 set_scene_aux_bits 0 4 1128 31 PostProcess::set_scene_aux_bits 0 1 341 0
47
void PostProcess::set_scene_aux_bits(int bits);

871 18 set_stacked_clears 0 4 1128 31 PostProcess::set_stacked_clears 0 1 342 0
68
void PostProcess::set_stacked_clears(int n, DrawableRegion *region);

872 17 set_window_clears 0 4 1128 30 PostProcess::set_window_clears 0 1 343 0
60
void PostProcess::set_window_clears(DrawableRegion *region);

873 10 set_clears 0 4 1128 23 PostProcess::set_clears 0 1 344 0
60
void PostProcess::set_clears(int n, DrawableRegion *region);

874 8 shutdown 0 4 1128 21 PostProcess::shutdown 0 1 345 0
33
void PostProcess::shutdown(void);

875 6 update 0 4 1128 19 PostProcess::update 0 1 346 0
31
void PostProcess::update(void);

876 12 window_event 0 4 1128 25 PostProcess::window_event 0 1 347 0
37
void PostProcess::window_event(void);

877 12 ~PostProcess 0 4 1128 25 PostProcess::~PostProcess 0 0 0
32
PostProcess::~PostProcess(void);

878 14 get_class_type 0 4 1129 23 HDRPass::get_class_type 0 1 350 0
48
static TypeHandle HDRPass::get_class_type(void);

879 7 HDRPass 0 4 1129 16 HDRPass::HDRPass 0 2 348 349 0
86
HDRPass::HDRPass(PostProcess *pp);
inline HDRPass::HDRPass(HDRPass const &) = default;

880 19 set_exposure_output 0 4 1129 28 HDRPass::set_exposure_output 0 1 351 0
59
inline void HDRPass::set_exposure_output(PTA_float output);

881 12 get_exposure 0 4 1129 21 HDRPass::get_exposure 0 1 352 56
/**
	 * Returns the calculated exposure adjustment.
	 */
47
inline float HDRPass::get_exposure(void) const;

882 8 ~HDRPass 0 4 1129 17 HDRPass::~HDRPass 0 0 0
24
HDRPass::~HDRPass(void);

883 9 HDREffect 0 4 1130 20 HDREffect::HDREffect 0 1 353 0
38
HDREffect::HDREffect(PostProcess *pp);

884 12 get_hdr_pass 0 4 1130 23 HDREffect::get_hdr_pass 0 1 354 0
52
inline HDRPass *HDREffect::get_hdr_pass(void) const;

885 10 ~HDREffect 0 4 1130 21 HDREffect::~HDREffect 0 0 0
28
HDREffect::~HDREffect(void);

886 14 get_class_type 0 4 1131 27 BloomEffect::get_class_type 0 1 356 0
52
static TypeHandle BloomEffect::get_class_type(void);

887 11 BloomEffect 0 4 1131 24 BloomEffect::BloomEffect 0 1 355 0
42
BloomEffect::BloomEffect(PostProcess *pp);

888 12 ~BloomEffect 0 4 1131 25 BloomEffect::~BloomEffect 0 0 0
32
BloomEffect::~BloomEffect(void);

889 14 get_class_type 0 4 1132 36 LightingOriginEffect::get_class_type 0 1 357 0
61
static TypeHandle LightingOriginEffect::get_class_type(void);

890 4 make 0 4 1132 26 LightingOriginEffect::make 0 1 358 0
89
static ConstPointerTo< RenderEffect > LightingOriginEffect::make(LVector3 const &origin);

891 19 get_lighting_origin 0 4 1132 41 LightingOriginEffect::get_lighting_origin 0 1 359 0
70
inline LVector3 LightingOriginEffect::get_lighting_origin(void) const;

892 21 ~LightingOriginEffect 0 4 1132 43 LightingOriginEffect::~LightingOriginEffect 0 0 0
50
LightingOriginEffect::~LightingOriginEffect(void);

893 14 get_class_type 0 4 1133 27 FXAA_Effect::get_class_type 0 1 361 0
52
static TypeHandle FXAA_Effect::get_class_type(void);

894 11 FXAA_Effect 0 4 1133 24 FXAA_Effect::FXAA_Effect 0 1 360 0
42
FXAA_Effect::FXAA_Effect(PostProcess *pp);

895 12 ~FXAA_Effect 0 4 1133 25 FXAA_Effect::~FXAA_Effect 0 0 0
32
FXAA_Effect::~FXAA_Effect(void);

896 14 get_class_slot 0 4 1134 27 BloomAttrib::get_class_slot 0 1 362 0
45
static int BloomAttrib::get_class_slot(void);

897 14 get_class_type 0 4 1134 27 BloomAttrib::get_class_type 0 1 363 0
52
static TypeHandle BloomAttrib::get_class_type(void);

898 4 make 0 4 1134 17 BloomAttrib::make 0 1 364 0
83
static ConstPointerTo< RenderAttrib > BloomAttrib::make(bool bloom_enabled = true);

899 16 is_bloom_enabled 0 4 1134 29 BloomAttrib::is_bloom_enabled 0 1 365 0
54
inline bool BloomAttrib::is_bloom_enabled(void) const;

900 12 ~BloomAttrib 0 4 1134 25 BloomAttrib::~BloomAttrib 0 0 0
32
BloomAttrib::~BloomAttrib(void);

901 26 PhysicsCharacterController 0 4 1136 54 PhysicsCharacterController::PhysicsCharacterController 0 2 366 367 0
425
PhysicsCharacterController::PhysicsCharacterController(BSPLoader *loader, BulletWorld *world, NodePath const &render, NodePath const &parent, float walk_height, float crouch_height, float step_height, float radius, float gravity, BitMask32 const &wall_mask, BitMask32 const &floor_mask, BitMask32 const &event_mask);
inline PhysicsCharacterController::PhysicsCharacterController(PhysicsCharacterController const &) = default;

902 13 set_max_slope 0 4 1136 41 PhysicsCharacterController::set_max_slope 0 1 368 0
78
void PhysicsCharacterController::set_max_slope(float degs, bool affect_speed);

903 16 set_collide_mask 0 4 1136 44 PhysicsCharacterController::set_collide_mask 0 1 369 0
73
void PhysicsCharacterController::set_collide_mask(BitMask32 const &mask);

904 24 set_event_enter_callback 0 4 1136 52 PhysicsCharacterController::set_event_enter_callback 0 1 370 0
85
inline void PhysicsCharacterController::set_event_enter_callback(PyObject *callback);

905 23 set_event_exit_callback 0 4 1136 51 PhysicsCharacterController::set_event_exit_callback 0 1 371 0
84
inline void PhysicsCharacterController::set_event_exit_callback(PyObject *callback);

906 23 set_active_jump_limiter 0 4 1136 51 PhysicsCharacterController::set_active_jump_limiter 0 1 372 0
78
inline void PhysicsCharacterController::set_active_jump_limiter(bool limiter);

907 20 set_default_material 0 4 1136 48 PhysicsCharacterController::set_default_material 0 1 373 0
85
inline void PhysicsCharacterController::set_default_material(std::string const &mat);

908 18 set_touching_water 0 4 1136 46 PhysicsCharacterController::set_touching_water 0 1 374 0
70
inline void PhysicsCharacterController::set_touching_water(bool flag);

909 20 get_current_material 0 4 1136 48 PhysicsCharacterController::get_current_material 0 1 375 0
80
inline std::string PhysicsCharacterController::get_current_material(void) const;

910 16 get_walk_capsule 0 4 1136 44 PhysicsCharacterController::get_walk_capsule 0 1 376 0
73
inline NodePath PhysicsCharacterController::get_walk_capsule(void) const;

911 18 get_crouch_capsule 0 4 1136 46 PhysicsCharacterController::get_crouch_capsule 0 1 377 0
75
inline NodePath PhysicsCharacterController::get_crouch_capsule(void) const;

912 16 get_event_sphere 0 4 1136 44 PhysicsCharacterController::get_event_sphere 0 1 378 0
73
inline NodePath PhysicsCharacterController::get_event_sphere(void) const;

913 11 get_capsule 0 4 1136 39 PhysicsCharacterController::get_capsule 0 1 379 0
68
inline NodePath PhysicsCharacterController::get_capsule(void) const;

914 19 get_movement_parent 0 4 1136 47 PhysicsCharacterController::get_movement_parent 0 1 380 0
76
inline NodePath PhysicsCharacterController::get_movement_parent(void) const;

915 11 set_gravity 0 4 1136 39 PhysicsCharacterController::set_gravity 0 1 381 0
64
inline void PhysicsCharacterController::set_gravity(float grav);

916 18 set_movement_state 0 4 1136 46 PhysicsCharacterController::set_movement_state 0 1 382 0
70
inline void PhysicsCharacterController::set_movement_state(int state);

917 18 get_movement_state 0 4 1136 46 PhysicsCharacterController::get_movement_state 0 1 383 0
70
inline int PhysicsCharacterController::get_movement_state(void) const;

918 21 set_stand_up_callback 0 4 1136 49 PhysicsCharacterController::set_stand_up_callback 0 1 384 0
82
inline void PhysicsCharacterController::set_stand_up_callback(PyObject *callback);

919 17 set_fall_callback 0 4 1136 45 PhysicsCharacterController::set_fall_callback 0 1 385 0
78
inline void PhysicsCharacterController::set_fall_callback(PyObject *callback);

920 12 start_crouch 0 4 1136 40 PhysicsCharacterController::start_crouch 0 1 386 0
52
void PhysicsCharacterController::start_crouch(void);

921 11 stop_crouch 0 4 1136 39 PhysicsCharacterController::stop_crouch 0 1 387 0
51
void PhysicsCharacterController::stop_crouch(void);

922 12 is_on_ground 0 4 1136 40 PhysicsCharacterController::is_on_ground 0 1 388 0
52
bool PhysicsCharacterController::is_on_ground(void);

923 10 start_jump 0 4 1136 38 PhysicsCharacterController::start_jump 0 1 389 0
68
void PhysicsCharacterController::start_jump(float max_height = 3.0);

924 20 set_angular_movement 0 4 1136 48 PhysicsCharacterController::set_angular_movement 0 1 390 0
67
void PhysicsCharacterController::set_angular_movement(float omega);

925 19 set_linear_movement 0 4 1136 47 PhysicsCharacterController::set_linear_movement 0 1 391 0
79
void PhysicsCharacterController::set_linear_movement(LVector3 const &movement);

926 15 place_on_ground 0 4 1136 43 PhysicsCharacterController::place_on_ground 0 1 392 0
55
void PhysicsCharacterController::place_on_ground(void);

927 6 update 0 4 1136 34 PhysicsCharacterController::update 0 1 393 0
57
void PhysicsCharacterController::update(float frametime);

928 15 remove_capsules 0 4 1136 43 PhysicsCharacterController::remove_capsules 0 1 394 0
55
void PhysicsCharacterController::remove_capsules(void);

929 27 ~PhysicsCharacterController 0 4 1136 55 PhysicsCharacterController::~PhysicsCharacterController 0 0 0
62
PhysicsCharacterController::~PhysicsCharacterController(void);

930 17 find_all_entities 0 4 1137 31 Py_BSPLoader::find_all_entities 0 1 395 0
72
PyObject *Py_BSPLoader::find_all_entities(std::string const &classname);

931 16 get_num_entities 0 4 1137 30 Py_BSPLoader::get_num_entities 0 1 396 2
//
47
int Py_BSPLoader::get_num_entities(void) const;

932 10 get_entity 0 4 1137 24 Py_BSPLoader::get_entity 0 1 397 2
//
48
PyObject *Py_BSPLoader::get_entity(int n) const;

933 12 get_c_entity 0 4 1137 26 Py_BSPLoader::get_c_entity 0 1 398 2
//
64
CBaseEntity *Py_BSPLoader::get_c_entity(int const entnum) const;

934 20 get_entity_keyvalues 0 4 1137 34 Py_BSPLoader::get_entity_keyvalues 0 1 399 2
//
74
void Py_BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

935 18 link_cent_to_pyent 0 4 1137 32 Py_BSPLoader::link_cent_to_pyent 0 1 400 2
//
66
void Py_BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

936 28 get_py_entity_by_target_name 0 4 1137 42 Py_BSPLoader::get_py_entity_by_target_name 0 1 401 2
//
90
PyObject *Py_BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

937 14 spawn_entities 0 4 1137 28 Py_BSPLoader::spawn_entities 0 1 402 0
40
void Py_BSPLoader::spawn_entities(void);

938 16 remove_py_entity 0 4 1137 30 Py_BSPLoader::remove_py_entity 0 1 403 0
51
void Py_BSPLoader::remove_py_entity(PyObject *ent);

939 13 ~Py_BSPLoader 0 4 1137 27 Py_BSPLoader::~Py_BSPLoader 0 0 0
34
Py_BSPLoader::~Py_BSPLoader(void);

940 15 Py_CL_BSPLoader 0 4 1138 32 Py_CL_BSPLoader::Py_CL_BSPLoader 0 1 404 0
39
Py_CL_BSPLoader::Py_CL_BSPLoader(void);

941 20 link_entity_to_class 0 4 1138 37 Py_CL_BSPLoader::link_entity_to_class 0 1 405 0
91
void Py_CL_BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

942 10 make_pyent 0 4 1138 27 Py_CL_BSPLoader::make_pyent 0 1 406 0
85
PyObject *Py_CL_BSPLoader::make_pyent(PyObject *pyent, std::string const &classname);

943 16 ~Py_CL_BSPLoader 0 4 1138 33 Py_CL_BSPLoader::~Py_CL_BSPLoader 0 0 0
40
Py_CL_BSPLoader::~Py_CL_BSPLoader(void);

944 15 Py_AI_BSPLoader 0 4 1139 32 Py_AI_BSPLoader::Py_AI_BSPLoader 0 1 407 0
39
Py_AI_BSPLoader::Py_AI_BSPLoader(void);

945 18 add_dynamic_entity 0 4 1139 35 Py_AI_BSPLoader::add_dynamic_entity 0 1 408 0
58
void Py_AI_BSPLoader::add_dynamic_entity(PyObject *pyent);

946 21 remove_dynamic_entity 0 4 1139 38 Py_AI_BSPLoader::remove_dynamic_entity 0 1 409 0
61
void Py_AI_BSPLoader::remove_dynamic_entity(PyObject *pyent);

947 21 mark_entity_preserved 0 4 1139 38 Py_AI_BSPLoader::mark_entity_preserved 0 1 410 0
74
void Py_AI_BSPLoader::mark_entity_preserved(int n, bool preserved = true);

948 28 set_server_entity_dispatcher 0 4 1139 45 Py_AI_BSPLoader::set_server_entity_dispatcher 0 1 411 0
73
void Py_AI_BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

949 27 link_server_entity_to_class 0 4 1139 44 Py_AI_BSPLoader::link_server_entity_to_class 0 1 412 0
95
void Py_AI_BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

950 23 set_transition_landmark 0 4 1139 40 Py_AI_BSPLoader::set_transition_landmark 0 1 413 0
126
inline void Py_AI_BSPLoader::set_transition_landmark(std::string const &name, LVector3 const &origin, LVector3 const &angles);

951 25 clear_transition_landmark 0 4 1139 42 Py_AI_BSPLoader::clear_transition_landmark 0 1 414 0
61
inline void Py_AI_BSPLoader::clear_transition_landmark(void);

952 16 ~Py_AI_BSPLoader 0 4 1139 33 Py_AI_BSPLoader::~Py_AI_BSPLoader 0 0 0
40
Py_AI_BSPLoader::~Py_AI_BSPLoader(void);

953 21 CInterpolationContext 0 4 1141 44 CInterpolationContext::CInterpolationContext 0 2 415 416 0
145
CInterpolationContext::CInterpolationContext(void);
inline CInterpolationContext::CInterpolationContext(CInterpolationContext const &) = default;

954 22 ~CInterpolationContext 0 4 1141 45 CInterpolationContext::~CInterpolationContext 0 0 0
52
CInterpolationContext::~CInterpolationContext(void);

955 19 EnableExtrapolation 0 4 1141 42 CInterpolationContext::EnableExtrapolation 0 1 417 0
67
static void CInterpolationContext::EnableExtrapolation(bool state);

956 15 IsThereAContext 0 4 1141 38 CInterpolationContext::IsThereAContext 0 1 418 0
57
static bool CInterpolationContext::IsThereAContext(void);

957 22 IsExtrapolationAllowed 0 4 1141 45 CInterpolationContext::IsExtrapolationAllowed 0 1 419 0
64
static bool CInterpolationContext::IsExtrapolationAllowed(void);

958 16 SetLastTimeStamp 0 4 1141 39 CInterpolationContext::SetLastTimeStamp 0 1 420 0
69
static void CInterpolationContext::SetLastTimeStamp(float timestamp);

959 16 GetLastTimeStamp 0 4 1141 39 CInterpolationContext::GetLastTimeStamp 0 1 421 0
59
static float CInterpolationContext::GetLastTimeStamp(void);

960 17 ~IInterpolatedVar 0 6 1142 35 IInterpolatedVar::~IInterpolatedVar 0 0 0
50
virtual IInterpolatedVar::~IInterpolatedVar(void);

961 22 SetInterpolationAmount 0 6 1142 40 IInterpolatedVar::SetInterpolationAmount 0 1 422 0
73
virtual void IInterpolatedVar::SetInterpolationAmount(float seconds) = 0;

962 22 NoteLastNetworkedValue 0 6 1142 40 IInterpolatedVar::NoteLastNetworkedValue 0 1 423 82
// Returns true if the new value is different from the prior most recent
// value.
64
virtual void IInterpolatedVar::NoteLastNetworkedValue(void) = 0;

963 11 NoteChanged 0 6 1142 29 IInterpolatedVar::NoteChanged 0 1 424 0
97
virtual bool IInterpolatedVar::NoteChanged(float changetime, bool bUpdateLastNetworkedValue) = 0;

964 5 Reset 0 6 1142 23 IInterpolatedVar::Reset 0 1 425 0
47
virtual void IInterpolatedVar::Reset(void) = 0;

965 11 Interpolate 0 6 1142 29 IInterpolatedVar::Interpolate 0 1 426 89
// Returns 1 if the value will always be the same if currentTime is always
// increasing.
65
virtual int IInterpolatedVar::Interpolate(float currentTime) = 0;

966 7 GetType 0 6 1142 25 IInterpolatedVar::GetType 0 1 427 0
54
virtual int IInterpolatedVar::GetType(void) const = 0;

967 22 RestoreToLastNetworked 0 6 1142 40 IInterpolatedVar::RestoreToLastNetworked 0 1 428 0
64
virtual void IInterpolatedVar::RestoreToLastNetworked(void) = 0;

968 4 Copy 0 6 1142 22 IInterpolatedVar::Copy 0 1 429 0
64
virtual void IInterpolatedVar::Copy(IInterpolatedVar *pSrc) = 0;

969 12 GetDebugName 0 6 1142 30 IInterpolatedVar::GetDebugName 0 1 430 0
61
virtual char const *IInterpolatedVar::GetDebugName(void) = 0;

970 12 SetDebugName 0 6 1142 30 IInterpolatedVar::SetDebugName 0 1 431 0
67
virtual void IInterpolatedVar::SetDebugName(char const *pName) = 0;

971 25 CInterpolatedVarArrayBase 0 4 1144 72 CInterpolatedVarArrayBase< LVector2f, false >::CInterpolatedVarArrayBase 0 1 433 0
115
CInterpolatedVarArrayBase< LVector2f, false >::CInterpolatedVarArrayBase(char const *pDebugName = "no debug name");

972 5 Setup 0 6 1144 52 CInterpolatedVarArrayBase< LVector2f, false >::Setup 0 1 434 0
95
virtual void CInterpolatedVarArrayBase< LVector2f, false >::Setup(LVector2f *pValue, int type);

973 11 NoteChanged 0 4 1144 58 CInterpolatedVarArrayBase< LVector2f, false >::NoteChanged 0 1 435 92
// Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount.
142
bool CInterpolatedVarArrayBase< LVector2f, false >::NoteChanged(float changetime, float interpolation_amount, bool bUpdateLastNetworkedValue);

974 11 Interpolate 0 4 1144 58 CInterpolatedVarArrayBase< LVector2f, false >::Interpolate 0 1 436 0
110
int CInterpolatedVarArrayBase< LVector2f, false >::Interpolate(float currentTime, float interpolation_amount);

975 16 DebugInterpolate 0 4 1144 63 CInterpolatedVarArrayBase< LVector2f, false >::DebugInterpolate 0 1 437 0
105
void CInterpolatedVarArrayBase< LVector2f, false >::DebugInterpolate(LVector2f *pOut, float currentTime);

976 13 GetDerivative 0 4 1144 60 CInterpolatedVarArrayBase< LVector2f, false >::GetDerivative 0 1 438 0
102
void CInterpolatedVarArrayBase< LVector2f, false >::GetDerivative(LVector2f *pOut, float currentTime);

977 28 GetDerivative_SmoothVelocity 0 4 1144 75 CInterpolatedVarArrayBase< LVector2f, false >::GetDerivative_SmoothVelocity 0 1 439 0
117
void CInterpolatedVarArrayBase< LVector2f, false >::GetDerivative_SmoothVelocity(LVector2f *pOut, float currentTime);

978 12 ClearHistory 0 4 1144 59 CInterpolatedVarArrayBase< LVector2f, false >::ClearHistory 0 1 440 0
71
void CInterpolatedVarArrayBase< LVector2f, false >::ClearHistory(void);

979 9 AddToHead 0 4 1144 56 CInterpolatedVarArrayBase< LVector2f, false >::AddToHead 0 1 441 0
123
void CInterpolatedVarArrayBase< LVector2f, false >::AddToHead(float changeTime, LVector2f const *values, bool bFlushNewer);

980 7 GetPrev 0 4 1144 54 CInterpolatedVarArrayBase< LVector2f, false >::GetPrev 0 1 442 0
99
LVector2f const &CInterpolatedVarArrayBase< LVector2f, false >::GetPrev(int iArrayIndex = 0) const;

981 10 GetCurrent 0 4 1144 57 CInterpolatedVarArrayBase< LVector2f, false >::GetCurrent 0 1 443 0
102
LVector2f const &CInterpolatedVarArrayBase< LVector2f, false >::GetCurrent(int iArrayIndex = 0) const;

982 11 GetInterval 0 4 1144 58 CInterpolatedVarArrayBase< LVector2f, false >::GetInterval 0 1 444 89
// Returns the time difference betweem the most recent sample and its previous
// sample.
77
float CInterpolatedVarArrayBase< LVector2f, false >::GetInterval(void) const;

983 12 IsValidIndex 0 4 1144 59 CInterpolatedVarArrayBase< LVector2f, false >::IsValidIndex 0 1 445 0
72
bool CInterpolatedVarArrayBase< LVector2f, false >::IsValidIndex(int i);

984 15 GetHistoryValue 0 4 1144 62 CInterpolatedVarArrayBase< LVector2f, false >::GetHistoryValue 0 0 0
125
LVector2f *CInterpolatedVarArrayBase< LVector2f, false >::GetHistoryValue(int index, float &changetime, int iArrayIndex = 0);

985 7 GetHead 0 4 1144 54 CInterpolatedVarArrayBase< LVector2f, false >::GetHead 0 1 446 0
65
int CInterpolatedVarArrayBase< LVector2f, false >::GetHead(void);

986 7 GetNext 0 4 1144 54 CInterpolatedVarArrayBase< LVector2f, false >::GetNext 0 1 447 0
66
int CInterpolatedVarArrayBase< LVector2f, false >::GetNext(int i);

987 23 SetHistoryValuesForItem 0 4 1144 70 CInterpolatedVarArrayBase< LVector2f, false >::SetHistoryValuesForItem 0 1 448 0
104
void CInterpolatedVarArrayBase< LVector2f, false >::SetHistoryValuesForItem(int item, LVector2f &value);

988 10 SetLooping 0 4 1144 57 CInterpolatedVarArrayBase< LVector2f, false >::SetLooping 0 1 449 0
98
void CInterpolatedVarArrayBase< LVector2f, false >::SetLooping(bool looping, int iArrayIndex = 0);

989 11 SetMaxCount 0 4 1144 58 CInterpolatedVarArrayBase< LVector2f, false >::SetMaxCount 0 1 450 0
76
void CInterpolatedVarArrayBase< LVector2f, false >::SetMaxCount(int newmax);

990 11 GetMaxCount 0 4 1144 58 CInterpolatedVarArrayBase< LVector2f, false >::GetMaxCount 0 1 451 0
75
int CInterpolatedVarArrayBase< LVector2f, false >::GetMaxCount(void) const;

991 14 GetOldestEntry 0 4 1144 61 CInterpolatedVarArrayBase< LVector2f, false >::GetOldestEntry 0 1 452 36
// Get the time of the oldest entry.
74
float CInterpolatedVarArrayBase< LVector2f, false >::GetOldestEntry(void);

992 20 GetInterpolationInfo 0 4 1144 67 CInterpolatedVarArrayBase< LVector2f, false >::GetInterpolationInfo 0 0 0
132
bool CInterpolatedVarArrayBase< LVector2f, false >::GetInterpolationInfo(float currentTime, int *pNewer, int *pOlder, int *pOldest);

993 16 CInterpolatedVar 0 4 1143 47 CInterpolatedVar< LVector2f >::CInterpolatedVar 0 1 432 0
76
CInterpolatedVar< LVector2f >::CInterpolatedVar(char const *pDebugName = 0);

994 17 ~CInterpolatedVar 0 4 1143 48 CInterpolatedVar< LVector2f >::~CInterpolatedVar 0 0 0
55
CInterpolatedVar< LVector2f >::~CInterpolatedVar(void);

995 25 CInterpolatedVarArrayBase 0 4 1147 72 CInterpolatedVarArrayBase< LVector3f, false >::CInterpolatedVarArrayBase 0 1 454 0
115
CInterpolatedVarArrayBase< LVector3f, false >::CInterpolatedVarArrayBase(char const *pDebugName = "no debug name");

996 5 Setup 0 6 1147 52 CInterpolatedVarArrayBase< LVector3f, false >::Setup 0 1 455 0
95
virtual void CInterpolatedVarArrayBase< LVector3f, false >::Setup(LVector3f *pValue, int type);

997 11 NoteChanged 0 4 1147 58 CInterpolatedVarArrayBase< LVector3f, false >::NoteChanged 0 1 456 92
// Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount.
142
bool CInterpolatedVarArrayBase< LVector3f, false >::NoteChanged(float changetime, float interpolation_amount, bool bUpdateLastNetworkedValue);

998 11 Interpolate 0 4 1147 58 CInterpolatedVarArrayBase< LVector3f, false >::Interpolate 0 1 457 0
110
int CInterpolatedVarArrayBase< LVector3f, false >::Interpolate(float currentTime, float interpolation_amount);

999 16 DebugInterpolate 0 4 1147 63 CInterpolatedVarArrayBase< LVector3f, false >::DebugInterpolate 0 1 458 0
105
void CInterpolatedVarArrayBase< LVector3f, false >::DebugInterpolate(LVector3f *pOut, float currentTime);

1000 13 GetDerivative 0 4 1147 60 CInterpolatedVarArrayBase< LVector3f, false >::GetDerivative 0 1 459 0
102
void CInterpolatedVarArrayBase< LVector3f, false >::GetDerivative(LVector3f *pOut, float currentTime);

1001 28 GetDerivative_SmoothVelocity 0 4 1147 75 CInterpolatedVarArrayBase< LVector3f, false >::GetDerivative_SmoothVelocity 0 1 460 0
117
void CInterpolatedVarArrayBase< LVector3f, false >::GetDerivative_SmoothVelocity(LVector3f *pOut, float currentTime);

1002 12 ClearHistory 0 4 1147 59 CInterpolatedVarArrayBase< LVector3f, false >::ClearHistory 0 1 461 0
71
void CInterpolatedVarArrayBase< LVector3f, false >::ClearHistory(void);

1003 9 AddToHead 0 4 1147 56 CInterpolatedVarArrayBase< LVector3f, false >::AddToHead 0 1 462 0
123
void CInterpolatedVarArrayBase< LVector3f, false >::AddToHead(float changeTime, LVector3f const *values, bool bFlushNewer);

1004 7 GetPrev 0 4 1147 54 CInterpolatedVarArrayBase< LVector3f, false >::GetPrev 0 1 463 0
99
LVector3f const &CInterpolatedVarArrayBase< LVector3f, false >::GetPrev(int iArrayIndex = 0) const;

1005 10 GetCurrent 0 4 1147 57 CInterpolatedVarArrayBase< LVector3f, false >::GetCurrent 0 1 464 0
102
LVector3f const &CInterpolatedVarArrayBase< LVector3f, false >::GetCurrent(int iArrayIndex = 0) const;

1006 11 GetInterval 0 4 1147 58 CInterpolatedVarArrayBase< LVector3f, false >::GetInterval 0 1 465 89
// Returns the time difference betweem the most recent sample and its previous
// sample.
77
float CInterpolatedVarArrayBase< LVector3f, false >::GetInterval(void) const;

1007 12 IsValidIndex 0 4 1147 59 CInterpolatedVarArrayBase< LVector3f, false >::IsValidIndex 0 1 466 0
72
bool CInterpolatedVarArrayBase< LVector3f, false >::IsValidIndex(int i);

1008 15 GetHistoryValue 0 4 1147 62 CInterpolatedVarArrayBase< LVector3f, false >::GetHistoryValue 0 0 0
125
LVector3f *CInterpolatedVarArrayBase< LVector3f, false >::GetHistoryValue(int index, float &changetime, int iArrayIndex = 0);

1009 7 GetHead 0 4 1147 54 CInterpolatedVarArrayBase< LVector3f, false >::GetHead 0 1 467 0
65
int CInterpolatedVarArrayBase< LVector3f, false >::GetHead(void);

1010 7 GetNext 0 4 1147 54 CInterpolatedVarArrayBase< LVector3f, false >::GetNext 0 1 468 0
66
int CInterpolatedVarArrayBase< LVector3f, false >::GetNext(int i);

1011 23 SetHistoryValuesForItem 0 4 1147 70 CInterpolatedVarArrayBase< LVector3f, false >::SetHistoryValuesForItem 0 1 469 0
104
void CInterpolatedVarArrayBase< LVector3f, false >::SetHistoryValuesForItem(int item, LVector3f &value);

1012 10 SetLooping 0 4 1147 57 CInterpolatedVarArrayBase< LVector3f, false >::SetLooping 0 1 470 0
98
void CInterpolatedVarArrayBase< LVector3f, false >::SetLooping(bool looping, int iArrayIndex = 0);

1013 11 SetMaxCount 0 4 1147 58 CInterpolatedVarArrayBase< LVector3f, false >::SetMaxCount 0 1 471 0
76
void CInterpolatedVarArrayBase< LVector3f, false >::SetMaxCount(int newmax);

1014 11 GetMaxCount 0 4 1147 58 CInterpolatedVarArrayBase< LVector3f, false >::GetMaxCount 0 1 472 0
75
int CInterpolatedVarArrayBase< LVector3f, false >::GetMaxCount(void) const;

1015 14 GetOldestEntry 0 4 1147 61 CInterpolatedVarArrayBase< LVector3f, false >::GetOldestEntry 0 1 473 36
// Get the time of the oldest entry.
74
float CInterpolatedVarArrayBase< LVector3f, false >::GetOldestEntry(void);

1016 20 GetInterpolationInfo 0 4 1147 67 CInterpolatedVarArrayBase< LVector3f, false >::GetInterpolationInfo 0 0 0
132
bool CInterpolatedVarArrayBase< LVector3f, false >::GetInterpolationInfo(float currentTime, int *pNewer, int *pOlder, int *pOldest);

1017 16 CInterpolatedVar 0 4 1146 47 CInterpolatedVar< LVector3f >::CInterpolatedVar 0 1 453 0
76
CInterpolatedVar< LVector3f >::CInterpolatedVar(char const *pDebugName = 0);

1018 17 ~CInterpolatedVar 0 4 1146 48 CInterpolatedVar< LVector3f >::~CInterpolatedVar 0 0 0
55
CInterpolatedVar< LVector3f >::~CInterpolatedVar(void);

1019 25 CInterpolatedVarArrayBase 0 4 1150 72 CInterpolatedVarArrayBase< LVector4f, false >::CInterpolatedVarArrayBase 0 1 475 0
115
CInterpolatedVarArrayBase< LVector4f, false >::CInterpolatedVarArrayBase(char const *pDebugName = "no debug name");

1020 5 Setup 0 6 1150 52 CInterpolatedVarArrayBase< LVector4f, false >::Setup 0 1 476 0
95
virtual void CInterpolatedVarArrayBase< LVector4f, false >::Setup(LVector4f *pValue, int type);

1021 11 NoteChanged 0 4 1150 58 CInterpolatedVarArrayBase< LVector4f, false >::NoteChanged 0 1 477 92
// Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount.
142
bool CInterpolatedVarArrayBase< LVector4f, false >::NoteChanged(float changetime, float interpolation_amount, bool bUpdateLastNetworkedValue);

1022 11 Interpolate 0 4 1150 58 CInterpolatedVarArrayBase< LVector4f, false >::Interpolate 0 1 478 0
110
int CInterpolatedVarArrayBase< LVector4f, false >::Interpolate(float currentTime, float interpolation_amount);

1023 16 DebugInterpolate 0 4 1150 63 CInterpolatedVarArrayBase< LVector4f, false >::DebugInterpolate 0 1 479 0
105
void CInterpolatedVarArrayBase< LVector4f, false >::DebugInterpolate(LVector4f *pOut, float currentTime);

1024 13 GetDerivative 0 4 1150 60 CInterpolatedVarArrayBase< LVector4f, false >::GetDerivative 0 1 480 0
102
void CInterpolatedVarArrayBase< LVector4f, false >::GetDerivative(LVector4f *pOut, float currentTime);

1025 28 GetDerivative_SmoothVelocity 0 4 1150 75 CInterpolatedVarArrayBase< LVector4f, false >::GetDerivative_SmoothVelocity 0 1 481 0
117
void CInterpolatedVarArrayBase< LVector4f, false >::GetDerivative_SmoothVelocity(LVector4f *pOut, float currentTime);

1026 12 ClearHistory 0 4 1150 59 CInterpolatedVarArrayBase< LVector4f, false >::ClearHistory 0 1 482 0
71
void CInterpolatedVarArrayBase< LVector4f, false >::ClearHistory(void);

1027 9 AddToHead 0 4 1150 56 CInterpolatedVarArrayBase< LVector4f, false >::AddToHead 0 1 483 0
123
void CInterpolatedVarArrayBase< LVector4f, false >::AddToHead(float changeTime, LVector4f const *values, bool bFlushNewer);

1028 7 GetPrev 0 4 1150 54 CInterpolatedVarArrayBase< LVector4f, false >::GetPrev 0 1 484 0
99
LVector4f const &CInterpolatedVarArrayBase< LVector4f, false >::GetPrev(int iArrayIndex = 0) const;

1029 10 GetCurrent 0 4 1150 57 CInterpolatedVarArrayBase< LVector4f, false >::GetCurrent 0 1 485 0
102
LVector4f const &CInterpolatedVarArrayBase< LVector4f, false >::GetCurrent(int iArrayIndex = 0) const;

1030 11 GetInterval 0 4 1150 58 CInterpolatedVarArrayBase< LVector4f, false >::GetInterval 0 1 486 89
// Returns the time difference betweem the most recent sample and its previous
// sample.
77
float CInterpolatedVarArrayBase< LVector4f, false >::GetInterval(void) const;

1031 12 IsValidIndex 0 4 1150 59 CInterpolatedVarArrayBase< LVector4f, false >::IsValidIndex 0 1 487 0
72
bool CInterpolatedVarArrayBase< LVector4f, false >::IsValidIndex(int i);

1032 15 GetHistoryValue 0 4 1150 62 CInterpolatedVarArrayBase< LVector4f, false >::GetHistoryValue 0 0 0
125
LVector4f *CInterpolatedVarArrayBase< LVector4f, false >::GetHistoryValue(int index, float &changetime, int iArrayIndex = 0);

1033 7 GetHead 0 4 1150 54 CInterpolatedVarArrayBase< LVector4f, false >::GetHead 0 1 488 0
65
int CInterpolatedVarArrayBase< LVector4f, false >::GetHead(void);

1034 7 GetNext 0 4 1150 54 CInterpolatedVarArrayBase< LVector4f, false >::GetNext 0 1 489 0
66
int CInterpolatedVarArrayBase< LVector4f, false >::GetNext(int i);

1035 23 SetHistoryValuesForItem 0 4 1150 70 CInterpolatedVarArrayBase< LVector4f, false >::SetHistoryValuesForItem 0 1 490 0
104
void CInterpolatedVarArrayBase< LVector4f, false >::SetHistoryValuesForItem(int item, LVector4f &value);

1036 10 SetLooping 0 4 1150 57 CInterpolatedVarArrayBase< LVector4f, false >::SetLooping 0 1 491 0
98
void CInterpolatedVarArrayBase< LVector4f, false >::SetLooping(bool looping, int iArrayIndex = 0);

1037 11 SetMaxCount 0 4 1150 58 CInterpolatedVarArrayBase< LVector4f, false >::SetMaxCount 0 1 492 0
76
void CInterpolatedVarArrayBase< LVector4f, false >::SetMaxCount(int newmax);

1038 11 GetMaxCount 0 4 1150 58 CInterpolatedVarArrayBase< LVector4f, false >::GetMaxCount 0 1 493 0
75
int CInterpolatedVarArrayBase< LVector4f, false >::GetMaxCount(void) const;

1039 14 GetOldestEntry 0 4 1150 61 CInterpolatedVarArrayBase< LVector4f, false >::GetOldestEntry 0 1 494 36
// Get the time of the oldest entry.
74
float CInterpolatedVarArrayBase< LVector4f, false >::GetOldestEntry(void);

1040 20 GetInterpolationInfo 0 4 1150 67 CInterpolatedVarArrayBase< LVector4f, false >::GetInterpolationInfo 0 0 0
132
bool CInterpolatedVarArrayBase< LVector4f, false >::GetInterpolationInfo(float currentTime, int *pNewer, int *pOlder, int *pOldest);

1041 16 CInterpolatedVar 0 4 1149 47 CInterpolatedVar< LVector4f >::CInterpolatedVar 0 1 474 0
76
CInterpolatedVar< LVector4f >::CInterpolatedVar(char const *pDebugName = 0);

1042 17 ~CInterpolatedVar 0 4 1149 48 CInterpolatedVar< LVector4f >::~CInterpolatedVar 0 0 0
55
CInterpolatedVar< LVector4f >::~CInterpolatedVar(void);

1043 25 CInterpolatedVarArrayBase 0 4 1153 68 CInterpolatedVarArrayBase< float, false >::CInterpolatedVarArrayBase 0 1 496 0
111
CInterpolatedVarArrayBase< float, false >::CInterpolatedVarArrayBase(char const *pDebugName = "no debug name");

1044 5 Setup 0 6 1153 48 CInterpolatedVarArrayBase< float, false >::Setup 0 0 0
87
virtual void CInterpolatedVarArrayBase< float, false >::Setup(float *pValue, int type);

1045 11 NoteChanged 0 4 1153 54 CInterpolatedVarArrayBase< float, false >::NoteChanged 0 1 497 92
// Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount.
138
bool CInterpolatedVarArrayBase< float, false >::NoteChanged(float changetime, float interpolation_amount, bool bUpdateLastNetworkedValue);

1046 11 Interpolate 0 4 1153 54 CInterpolatedVarArrayBase< float, false >::Interpolate 0 1 498 0
106
int CInterpolatedVarArrayBase< float, false >::Interpolate(float currentTime, float interpolation_amount);

1047 16 DebugInterpolate 0 4 1153 59 CInterpolatedVarArrayBase< float, false >::DebugInterpolate 0 0 0
97
void CInterpolatedVarArrayBase< float, false >::DebugInterpolate(float *pOut, float currentTime);

1048 13 GetDerivative 0 4 1153 56 CInterpolatedVarArrayBase< float, false >::GetDerivative 0 0 0
94
void CInterpolatedVarArrayBase< float, false >::GetDerivative(float *pOut, float currentTime);

1049 28 GetDerivative_SmoothVelocity 0 4 1153 71 CInterpolatedVarArrayBase< float, false >::GetDerivative_SmoothVelocity 0 0 0
109
void CInterpolatedVarArrayBase< float, false >::GetDerivative_SmoothVelocity(float *pOut, float currentTime);

1050 12 ClearHistory 0 4 1153 55 CInterpolatedVarArrayBase< float, false >::ClearHistory 0 1 499 0
67
void CInterpolatedVarArrayBase< float, false >::ClearHistory(void);

1051 9 AddToHead 0 4 1153 52 CInterpolatedVarArrayBase< float, false >::AddToHead 0 0 0
115
void CInterpolatedVarArrayBase< float, false >::AddToHead(float changeTime, float const *values, bool bFlushNewer);

1052 7 GetPrev 0 4 1153 50 CInterpolatedVarArrayBase< float, false >::GetPrev 0 1 500 0
91
float const &CInterpolatedVarArrayBase< float, false >::GetPrev(int iArrayIndex = 0) const;

1053 10 GetCurrent 0 4 1153 53 CInterpolatedVarArrayBase< float, false >::GetCurrent 0 1 501 0
94
float const &CInterpolatedVarArrayBase< float, false >::GetCurrent(int iArrayIndex = 0) const;

1054 11 GetInterval 0 4 1153 54 CInterpolatedVarArrayBase< float, false >::GetInterval 0 1 502 89
// Returns the time difference betweem the most recent sample and its previous
// sample.
73
float CInterpolatedVarArrayBase< float, false >::GetInterval(void) const;

1055 12 IsValidIndex 0 4 1153 55 CInterpolatedVarArrayBase< float, false >::IsValidIndex 0 1 503 0
68
bool CInterpolatedVarArrayBase< float, false >::IsValidIndex(int i);

1056 15 GetHistoryValue 0 4 1153 58 CInterpolatedVarArrayBase< float, false >::GetHistoryValue 0 0 0
117
float *CInterpolatedVarArrayBase< float, false >::GetHistoryValue(int index, float &changetime, int iArrayIndex = 0);

1057 7 GetHead 0 4 1153 50 CInterpolatedVarArrayBase< float, false >::GetHead 0 1 504 0
61
int CInterpolatedVarArrayBase< float, false >::GetHead(void);

1058 7 GetNext 0 4 1153 50 CInterpolatedVarArrayBase< float, false >::GetNext 0 1 505 0
62
int CInterpolatedVarArrayBase< float, false >::GetNext(int i);

1059 23 SetHistoryValuesForItem 0 4 1153 66 CInterpolatedVarArrayBase< float, false >::SetHistoryValuesForItem 0 0 0
96
void CInterpolatedVarArrayBase< float, false >::SetHistoryValuesForItem(int item, float &value);

1060 10 SetLooping 0 4 1153 53 CInterpolatedVarArrayBase< float, false >::SetLooping 0 1 506 0
94
void CInterpolatedVarArrayBase< float, false >::SetLooping(bool looping, int iArrayIndex = 0);

1061 11 SetMaxCount 0 4 1153 54 CInterpolatedVarArrayBase< float, false >::SetMaxCount 0 1 507 0
72
void CInterpolatedVarArrayBase< float, false >::SetMaxCount(int newmax);

1062 11 GetMaxCount 0 4 1153 54 CInterpolatedVarArrayBase< float, false >::GetMaxCount 0 1 508 0
71
int CInterpolatedVarArrayBase< float, false >::GetMaxCount(void) const;

1063 14 GetOldestEntry 0 4 1153 57 CInterpolatedVarArrayBase< float, false >::GetOldestEntry 0 1 509 36
// Get the time of the oldest entry.
70
float CInterpolatedVarArrayBase< float, false >::GetOldestEntry(void);

1064 20 GetInterpolationInfo 0 4 1153 63 CInterpolatedVarArrayBase< float, false >::GetInterpolationInfo 0 0 0
128
bool CInterpolatedVarArrayBase< float, false >::GetInterpolationInfo(float currentTime, int *pNewer, int *pOlder, int *pOldest);

1065 16 CInterpolatedVar 0 4 1152 43 CInterpolatedVar< float >::CInterpolatedVar 0 1 495 0
72
CInterpolatedVar< float >::CInterpolatedVar(char const *pDebugName = 0);

1066 17 ~CInterpolatedVar 0 4 1152 44 CInterpolatedVar< float >::~CInterpolatedVar 0 0 0
51
CInterpolatedVar< float >::~CInterpolatedVar(void);

509
1 0 0 7 12 1155 521 0 0 0 
2 0 0 7 12 1155 521 0 0 1 6 param0 0 1156  
3 0 0 7 2 1160 0 0 0 1 4 name 1 1159  
4 0 0 7 2 1160 0 0 0 2 4 name 1 1159  7 uv_name 1 1159  
5 0 0 7 3 1160 0 0 0 0 
6 0 0 7 4 1160 0 0 0 0 
7 0 0 7 5 1160 0 0 0 0 
8 0 0 7 6 1160 0 0 0 0 
9 0 0 7 7 1160 0 0 0 0 
10 0 0 7 8 1160 0 0 0 0 
11 0 0 7 9 1160 0 0 0 0 
12 0 0 7 10 1160 0 0 0 0 
13 0 0 7 11 1160 0 0 0 0 
14 0 0 7 16 1163 544 0 0 1 4 copy 1 1161  
15 0 0 7 16 1163 544 0 0 1 4 name 1 1159  
16 0 0 7 17 1163 544 0 0 2 4 this 3 1163  4 copy 1 1161  
17 0 0 4 18 1164 0 0 0 3 4 this 3 1163  3 key 1 1159  5 value 1 1159  
18 0 0 6 19 1159 0 0 0 2 4 this 3 1161  3 key 1 1159  
19 0 0 6 20 1165 0 0 0 1 4 this 3 1161  
20 0 0 6 21 1159 0 0 0 2 4 this 3 1161  1 i 1 1165  
21 0 0 6 22 1159 0 0 0 2 4 this 3 1161  1 i 1 1165  
22 0 0 6 23 1072 0 0 0 2 4 this 3 1161  3 key 1 1159  
23 0 0 6 24 1167 0 0 0 2 4 this 3 1161  3 key 1 1159  
24 0 0 4 25 1164 0 0 0 2 4 this 3 1163  11 shader_name 1 1159  
25 0 0 6 26 1159 0 0 0 1 4 this 3 1161  
26 0 0 7 27 1169 0 0 0 1 4 this 3 1161  
27 0 0 6 28 1170 0 0 0 2 4 this 3 1161  3 key 1 1159  
28 0 0 6 29 1170 0 0 0 1 4 this 3 1161  
29 0 0 6 30 1170 0 0 0 1 4 this 3 1161  
30 0 0 6 31 1159 0 0 0 1 4 this 3 1161  
31 0 0 6 32 1159 0 0 0 1 4 this 3 1161  
32 0 0 6 33 1170 0 0 0 1 4 this 3 1161  
33 0 0 6 34 1170 0 0 0 1 4 this 3 1161  
34 0 0 6 35 1170 0 0 0 1 4 this 3 1161  
35 0 0 7 36 1161 0 0 0 1 4 file 1 1171  
36 0 0 7 37 1174 0 0 0 0 
37 0 0 7 41 1176 0 0 0 1 3 mat 1 1161  
38 0 0 7 42 1176 0 0 0 1 3 mat 1 1161  
39 0 0 7 43 1176 0 0 0 0 
40 0 0 6 44 1159 0 0 0 1 4 this 3 1177  
41 0 0 6 45 1170 0 0 0 1 4 this 3 1177  
42 0 0 7 46 1161 0 0 0 1 4 this 3 1177  
43 0 0 6 47 1072 0 0 0 0 
44 0 0 7 50 1174 0 0 0 0 
45 0 0 7 56 1181 558 0 0 1 6 param0 0 1179  
46 0 0 6 53 1072 0 0 0 1 4 this 3 1179  
47 0 0 6 54 1072 0 0 0 1 4 this 3 1179  
48 0 0 6 55 1072 0 0 0 1 4 this 3 1179  
49 0 0 7 64 1184 565 0 0 1 6 param0 0 1182  
50 0 0 6 59 1072 0 0 0 1 4 this 3 1182  
51 0 0 6 60 1072 0 0 0 1 4 this 3 1182  
52 0 0 6 61 1072 0 0 0 1 4 this 3 1182  
53 0 0 6 62 1072 0 0 0 1 4 this 3 1182  
54 0 0 6 63 1170 0 0 0 1 4 this 3 1182  
55 0 0 6 67 1072 0 0 0 1 4 this 3 1185  
56 0 0 4 68 1164 0 0 35 // number of textures to consider.. 2 4 this 3 1185  6 tcount 1 1072  
57 0 0 4 69 1164 0 0 21 // add textures 0 - n 3 4 this 3 1185  3 wid 1 1072  3 hit 1 1072  
58 0 0 6 70 1170 0 0 0 7 4 this 3 1185  3 wid 1 1072  3 hit 1 1072  15 forcePowerOfTwo 1 1170  14 onePixelBorder 1 1170  7 max_wid 1 1072  7 max_hit 1 1072  
59 0 0 4 71 1164 0 0 0 3 4 this 3 1185  3 wid 1 1072  3 hit 1 1072  
60 0 0 7 72 1181 558 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 1185  15 forcePowerOfTwo 1 1170  14 onePixelBorder 1 1170  
61 0 0 7 73 1184 565 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 1185  5 index 1 1072  
62 0 0 6 74 1185 0 0 0 0 
63 0 0 4 75 1164 0 0 0 1 2 tp 1 1185  
64 0 0 7 80 1186 579 0 0 0 
65 0 0 7 80 1186 579 0 0 1 6 param0 0 1187  
66 0 0 4 78 1164 0 0 0 0 
67 0 0 4 79 1164 0 0 0 0 
68 0 0 7 83 1189 587 0 0 0 
69 0 0 7 83 1189 587 0 0 1 6 param0 0 1190  
70 0 0 6 84 1170 0 0 0 1 4 this 3 1190  
71 0 0 7 85 1194 0 0 0 1 4 this 3 1190  
72 0 0 7 86 1197 0 0 0 1 4 this 3 1190  
73 0 0 6 87 1198 0 0 0 1 4 this 3 1190  
74 0 0 6 88 1198 0 0 0 1 4 this 3 1190  
75 0 0 6 89 1167 0 0 0 1 4 this 3 1190  
76 0 0 7 93 1199 0 0 0 0 
77 0 0 7 93 1199 0 0 0 1 6 param0 0 1200  
78 0 0 4 94 1164 0 0 0 2 4 this 3 1199  4 geom 1 1202  
79 0 0 4 95 1164 0 0 0 2 4 this 3 1199  4 geom 1 1202  
80 0 0 4 96 1164 0 0 0 1 4 this 3 1199  
81 0 0 7 98 1189 587 0 0 4 4 this 3 1199  5 start 1 1203  3 end 1 1203  4 mask 1 1207  
82 0 0 7 99 1189 587 0 0 5 4 this 3 1199  6 origin 1 1203  9 direction 1 1211  8 distance 1 1167  4 mask 1 1207  
83 0 0 4 100 1164 0 0 0 2 4 this 3 1199  7 quality 1 1072  
84 0 0 4 101 1164 0 0 0 1 4 this 3 1199  
85 0 0 7 102 1202 0 0 0 2 4 this 3 1199  7 geom_id 1 1198  
86 0 0 7 105 1174 0 0 0 0 
87 0 0 4 106 1164 0 0 0 2 4 this 3 1202  4 mask 1 1207  
88 0 0 4 106 1164 0 0 0 2 4 this 3 1202  4 mask 1 1198  
89 0 0 7 107 1215 0 0 0 1 4 this 3 1213  
90 0 0 6 108 1198 0 0 0 1 4 this 3 1213  
91 0 0 4 109 1164 0 0 0 2 4 this 3 1202  7 quality 1 1072  
92 0 0 4 110 1164 0 0 0 1 4 this 3 1202  
93 0 0 7 113 1216 607 0 0 1 4 name 1 1159  
94 0 0 7 112 1174 0 0 0 0 
95 0 0 4 114 1164 0 0 0 4 4 this 3 1216  2 p1 1 1203  2 p2 1 1203  2 p3 1 1203  
96 0 0 4 115 1164 0 0 0 3 4 this 3 1216  4 geom 1 1217  2 ts 1 1220  
97 0 0 7 119 1176 0 0 0 2 13 face_material 1 1159  9 face_type 1 1072  
98 0 0 7 120 1176 0 0 0 0 
99 0 0 7 121 1176 0 0 0 0 
100 0 0 6 122 1159 0 0 0 1 4 this 3 1223  
101 0 0 6 123 1072 0 0 0 1 4 this 3 1223  
102 0 0 6 124 1170 0 0 0 1 4 this 3 1223  
103 0 0 6 125 1072 0 0 0 0 
104 0 0 7 127 1174 0 0 0 0 
105 0 0 4 130 1164 0 0 0 2 4 this 3 1225  4 root 1 1226  
106 0 0 4 131 1164 0 0 0 2 4 this 3 1225  5 world 1 1229  
107 0 0 7 132 1229 0 0 0 1 4 this 3 1231  
108 0 0 6 133 1170 0 0 0 2 4 this 3 1231  6 rbnode 1 1233  
109 0 0 6 134 1170 0 0 0 3 4 this 3 1225  6 rbnode 1 1233  12 triangle_idx 1 1072  
110 0 0 6 135 1159 0 0 0 3 4 this 3 1225  6 rbnode 1 1233  12 triangle_idx 1 1072  
111 0 0 6 136 1072 0 0 0 3 4 this 3 1225  6 rbnode 1 1233  12 triangle_idx 1 1072  
112 0 0 6 137 1072 0 0 0 3 4 this 3 1225  6 rbnode 1 1233  12 triangle_idx 1 1072  
113 0 0 7 138 1235 0 0 0 2 4 this 3 1225  8 modelnum 1 1072  
114 0 0 6 139 1170 0 0 0 3 4 this 3 1225  4 file 1 1171  13 is_transition 1 1170  
115 0 0 4 140 1164 0 0 0 1 4 this 3 1225  
116 0 0 4 141 1164 0 0 0 3 4 this 3 1225  5 gamma 1 1236  10 overbright 1 1072  
117 0 0 6 142 1236 0 0 0 1 4 this 3 1231  
118 0 0 4 143 1164 0 0 0 2 4 this 3 1225  3 win 1 1237  
119 0 0 4 144 1164 0 0 0 2 4 this 3 1225  6 camera 1 1226  
120 0 0 4 145 1164 0 0 0 2 4 this 3 1225  6 render 1 1226  
121 0 0 4 146 1164 0 0 0 2 4 this 3 1225  5 shgen 1 1239  
122 0 0 4 147 1164 0 0 0 2 4 this 3 1225  4 flag 1 1170  
123 0 0 4 148 1164 0 0 0 2 4 this 3 1225  4 flag 1 1170  
124 0 0 4 149 1164 0 0 0 2 4 this 3 1225  4 type 1 1072  
125 0 0 4 150 1164 0 0 0 2 4 this 3 1225  4 flag 1 1170  
126 0 0 4 151 1164 0 0 0 2 4 this 3 1225  4 file 1 1171  
127 0 0 4 152 1164 0 0 0 2 4 this 3 1225  4 flag 1 1170  
128 0 0 6 153 1170 0 0 0 1 4 this 3 1231  
129 0 0 7 154 1240 0 0 0 1 4 this 3 1231  
130 0 0 4 155 1164 0 0 0 7 4 this 3 1225  14 decal_material 1 1159  11 decal_scale 1 1241  6 rotate 1 1167  5 start 1 1203  3 end 1 1203  11 decal_color 1 1245  
131 0 0 7 156 1250 0 0 0 2 4 this 3 1225  3 pos 1 1203  
132 0 0 4 157 1164 0 0 0 1 4 this 3 1225  
133 0 0 4 158 1164 0 0 0 2 4 this 3 1225  4 flag 1 1170  
134 0 0 4 159 1164 0 0 0 2 4 this 3 1225  3 dir 1 1211  
135 0 0 6 160 1072 0 0 0 2 4 this 3 1225  6 entnum 1 1072  
136 0 0 4 161 1164 0 0 0 4 4 this 3 1225  8 modelnum 1 1072  4 mins 1 1235  4 maxs 1 1235  
137 0 0 4 162 1164 0 0 0 2 4 this 3 1225  2 ai 1 1170  
138 0 0 6 163 1170 0 0 0 1 4 this 3 1231  
139 0 0 6 164 1170 0 0 0 3 4 this 3 1225  5 start 1 1203  3 end 1 1203  
140 0 0 7 165 1235 0 0 0 3 4 this 3 1225  5 start 1 1203  3 end 1 1203  
141 0 0 7 166 1240 0 0 0 2 4 this 3 1231  8 modelnum 1 1072  
142 0 0 6 167 1072 0 0 0 3 4 this 3 1225  3 pos 1 1203  8 headnode 1 1072  
143 0 0 6 167 1072 0 0 0 2 4 this 3 1225  2 np 1 1226  
144 0 0 6 168 1072 0 0 0 2 4 this 3 1225  3 pos 1 1203  
145 0 0 6 169 1170 0 0 0 3 4 this 3 1231  12 curr_cluster 1 1072  7 cluster 1 1072  
146 0 0 6 170 1170 0 0 0 3 4 this 3 1225  6 bounds 1 1251  19 required_leaf_flags 1 1198  
147 0 0 7 171 1251 0 0 0 3 4 this 3 1225  13 net_transform 1 1220  8 original 1 1251  
148 0 0 6 172 1170 0 0 0 1 4 this 3 1231  
149 0 0 6 173 1170 0 0 0 1 4 this 3 1231  
150 0 0 4 174 1164 0 0 0 2 4 this 3 1225  13 is_transition 1 1170  
151 0 0 7 175 1240 0 0 0 1 4 this 3 1231  
152 0 0 4 176 1164 0 0 0 2 4 this 3 1225  4 leaf 1 1072  
153 0 0 6 177 1072 0 0 0 1 4 this 3 1231  
154 0 0 6 178 1072 0 0 0 1 4 this 3 1231  
155 0 0 7 179 1235 0 0 0 2 4 this 3 1231  4 leaf 1 1072  
156 0 0 7 180 1256 0 0 0 3 4 this 3 1225  7 facenum 1 1072  5 point 1 1211  
157 0 0 4 181 1164 0 0 0 1 3 ptr 1 1225  
158 0 0 6 182 1225 0 0 0 0 
159 0 0 6 187 1165 0 0 0 1 4 this 3 1257  
160 0 0 7 188 1235 0 0 0 2 4 this 3 1257  1 n 1 1072  
161 0 0 6 189 1165 0 0 0 1 4 this 3 1257  
162 0 0 7 190 1261 0 0 0 2 4 this 3 1257  1 n 1 1072  
163 0 0 7 191 1174 0 0 0 0 
164 0 0 7 195 1262 686 0 0 0 
165 0 0 7 195 1262 686 0 0 1 6 param0 0 1263  
166 0 0 7 194 1174 0 0 0 0 
167 0 0 6 196 1225 0 0 0 1 4 this 3 1263  
168 0 0 6 197 1159 0 0 0 2 4 this 3 1263  3 key 1 1159  
169 0 0 7 198 1194 0 0 0 2 4 this 3 1263  3 key 1 1159  
170 0 0 7 199 1266 0 0 0 3 4 this 3 1263  3 key 1 1159  5 scale 1 1170  
171 0 0 6 200 1159 0 0 0 1 4 this 3 1263  
172 0 0 6 201 1159 0 0 0 1 4 this 3 1263  
173 0 0 6 202 1072 0 0 0 1 4 this 3 1263  
174 0 0 7 206 1267 691 0 0 0 
175 0 0 7 206 1267 691 0 0 1 6 param0 0 1268  
176 0 0 7 205 1174 0 0 0 0 
177 0 0 7 207 1235 0 0 0 1 4 this 3 1268  
178 0 0 7 208 1194 0 0 0 1 4 this 3 1268  
179 0 0 7 212 1270 697 0 0 0 
180 0 0 7 212 1270 697 0 0 1 6 param0 0 1271  
181 0 0 7 211 1174 0 0 0 0 
182 0 0 7 213 1273 676 0 0 1 4 this 3 1271  
183 0 0 6 214 1170 0 0 0 2 4 this 3 1271  3 pos 1 1203  
184 0 0 4 215 1164 0 0 0 3 4 this 3 1270  4 mins 1 1235  4 maxs 1 1235  
185 0 0 7 219 1274 702 0 0 0 
186 0 0 7 219 1274 702 0 0 1 6 param0 0 1275  
187 0 0 7 218 1174 0 0 0 0 
188 0 0 7 220 1240 0 0 0 1 4 this 3 1275  
189 0 0 4 221 1164 0 0 0 3 4 this 3 1274  4 mins 1 1235  4 maxs 1 1235  
190 0 0 7 224 1277 709 0 0 0 
191 0 0 4 225 1164 0 0 0 3 4 this 3 1277  3 key 1 1159  5 value 1 1159  
192 0 0 4 226 1164 0 0 0 1 4 this 3 1277  
193 0 0 4 227 1164 0 0 0 2 4 this 3 1277  3 inp 1 1278  
194 0 0 4 228 1164 0 0 0 2 4 this 3 1277  4 flag 1 1072  
195 0 0 6 229 1165 0 0 0 1 4 this 3 1281  
196 0 0 4 237 1164 0 0 0 4 4 this 3 1283  9 vert_file 1 1171  10 pixel_file 1 1171  9 geom_file 1 1171  
197 0 0 7 238 1174 0 0 0 0 
198 0 0 7 232 1284 0 0 0 1 4 this 3 1283  
199 0 0 6 235 1285 0 0 0 1 4 this 3 1283  
200 0 0 7 242 1288 719 0 0 1 6 param0 0 1286  
201 0 0 7 241 1250 0 0 0 1 4 this 3 1286  
202 0 0 7 249 1239 745 0 0 1 6 param0 0 1289  
203 0 0 7 249 1239 745 0 0 4 6 output 1 1291  3 gsg 1 1293  6 camera 1 1226  6 render 1 1226  
204 0 0 4 250 1164 0 0 0 2 4 this 3 1239  2 np 1 1226  
205 0 0 4 251 1164 0 0 0 2 4 this 3 1239  4 spec 1 1283  
206 0 0 7 252 1194 0 0 0 1 4 this 3 1289  
207 0 0 6 253 1170 0 0 0 1 4 this 3 1289  
208 0 0 7 254 1250 0 0 0 1 4 this 3 1289  
209 0 0 6 255 1295 0 0 0 1 4 this 3 1289  
210 0 0 7 256 1240 0 0 0 1 4 this 3 1289  
211 0 0 7 257 1240 0 0 0 1 4 this 3 1289  
212 0 0 4 258 1164 0 0 0 2 4 this 3 1239  7 quality 1 1072  
213 0 0 6 259 1072 0 0 0 1 4 this 3 1289  
214 0 0 4 260 1164 0 0 0 2 4 this 3 1239  3 fog 1 1297  
215 0 0 4 261 1164 0 0 0 1 4 this 3 1239  
216 0 0 7 262 1297 0 0 0 1 4 this 3 1289  
217 0 0 7 263 1301 0 0 0 1 4 this 3 1289  
218 0 0 4 264 1164 0 0 0 2 4 this 3 1239  8 exposure 1 1167  
219 0 0 7 265 1304 0 0 0 1 4 this 3 1289  
220 0 0 7 266 1293 0 0 0 1 4 this 3 1289  
221 0 0 7 267 1291 0 0 0 1 4 this 3 1289  
222 0 0 7 268 1288 719 0 0 1 4 this 3 1289  
223 0 0 4 269 1164 0 0 0 1 3 tex 1 1250  
224 0 0 7 270 1250 0 0 0 0 
225 0 0 7 271 1309 0 0 0 2 4 spec 1 1307  5 perms 1 1281  
226 0 0 4 272 1164 0 0 0 1 4 this 3 1239  
227 0 0 7 273 1174 0 0 0 0 
228 0 0 7 278 1312 752 0 0 1 6 param0 0 1310  
229 0 0 7 278 1312 752 0 0 2 4 trav 1 1313  6 loader 1 1225  
230 0 0 7 277 1174 0 0 0 0 
231 0 0 6 279 1170 0 0 0 2 4 this 3 1310  4 bits 1 1198  
232 0 0 6 280 1170 0 0 0 1 4 this 3 1310  
233 0 0 6 281 1170 0 0 0 1 4 this 3 1310  
234 0 0 6 282 1198 0 0 106 /**
	 * Returns the flags that must be set on a leaf for it to be
	 * rendered by the current camera.
	 */ 1 4 this 3 1310  
235 0 0 7 286 1316 755 0 0 1 6 param0 0 1314  
236 0 0 7 286 1316 755 0 0 2 4 name 1 1159  6 loader 1 1225  
237 0 0 7 285 1174 0 0 0 0 
238 0 0 7 290 1319 758 0 0 1 6 param0 0 1317  
239 0 0 7 290 1319 758 0 0 1 4 name 1 1159  
240 0 0 7 289 1174 0 0 0 0 
241 0 0 7 295 1322 761 0 0 1 6 param0 0 1320  
242 0 0 7 295 1322 761 0 0 1 4 name 1 1159  
243 0 0 7 294 1174 0 0 0 0 
244 0 0 7 300 1325 764 0 0 1 6 param0 0 1323  
245 0 0 7 300 1325 764 0 0 1 4 name 1 1159  
246 0 0 7 299 1174 0 0 0 0 
247 0 0 7 303 1326 766 0 0 0 
248 0 0 7 306 1327 768 0 0 0 
249 0 0 7 309 1328 770 0 0 0 
250 0 0 7 312 1329 772 0 0 0 
251 0 0 7 315 1330 774 0 0 0 
252 0 0 7 318 1331 776 0 0 0 
253 0 0 7 322 1333 0 0 0 0 
254 0 0 7 323 1174 0 0 0 0 
255 0 0 7 326 1336 798 0 0 1 6 param0 0 1334  
256 0 0 7 326 1336 798 0 0 3 3 mgr 1 1337  15 listener_target 1 1226  4 root 1 1226  
257 0 0 4 327 1164 0 0 0 2 4 this 3 1336  6 factor 1 1236  
258 0 0 6 328 1236 0 0 0 1 4 this 3 1334  
259 0 0 4 329 1164 0 0 0 2 4 this 3 1336  6 factor 1 1236  
260 0 0 6 330 1236 0 0 0 1 4 this 3 1334  
261 0 0 4 331 1164 0 0 0 2 4 this 3 1336  6 factor 1 1236  
262 0 0 6 332 1236 0 0 0 1 4 this 3 1334  
263 0 0 4 333 1164 0 0 0 3 4 this 3 1336  5 sound 1 1339  4 dist 1 1236  
264 0 0 6 334 1236 0 0 0 2 4 this 3 1334  5 sound 1 1339  
265 0 0 4 335 1164 0 0 0 3 4 this 3 1336  5 sound 1 1339  4 dist 1 1236  
266 0 0 6 336 1236 0 0 0 2 4 this 3 1334  5 sound 1 1339  
267 0 0 4 337 1164 0 0 0 2 4 this 3 1336  8 listener 1 1226  
268 0 0 4 338 1164 0 0 0 1 4 this 3 1336  
269 0 0 7 339 1339 0 0 0 2 4 this 3 1336  4 path 1 1159  
270 0 0 4 340 1164 0 0 0 3 4 this 3 1336  5 sound 1 1339  6 object 1 1226  
271 0 0 4 341 1164 0 0 0 2 4 this 3 1336  5 sound 1 1339  
272 0 0 4 342 1164 0 0 0 1 4 this 3 1336  
273 0 0 4 343 1164 0 0 0 1 4 this 3 1336  
274 0 0 7 348 1341 802 0 0 0 
275 0 0 7 348 1341 802 0 0 1 6 param0 0 1342  
276 0 0 4 346 1164 0 0 0 4 1 x 1 1167  1 y 1 1167  4 left 1 1194  5 right 1 1194  
277 0 0 7 347 1197 0 0 0 3 4 node 1 1226  5 point 1 1211  4 eyes 1 1226  
278 0 0 7 351 1344 804 0 0 0 
279 0 0 7 356 1347 807 0 0 2 4 copy 1 1345  10 query_size 1 1167  
280 0 0 7 356 1347 807 0 0 1 6 param0 0 1348  
281 0 0 7 356 1347 807 0 0 2 4 name 1 1159  10 query_size 1 1167  
282 0 0 7 355 1174 0 0 0 0 
283 0 0 7 363 1174 0 0 0 0 
284 0 0 7 364 1250 0 0 0 1 4 this 3 1350  
285 0 0 4 365 1164 0 0 0 2 4 this 3 1350  4 pass 1 1351  
286 0 0 4 366 1164 0 0 0 2 4 this 3 1350  4 pass 1 1351  
287 0 0 7 367 1351 850 0 0 2 4 this 3 1350  4 name 1 1159  
288 0 0 4 368 1164 0 0 0 1 4 this 3 1350  
289 0 0 4 369 1164 0 0 0 1 4 this 3 1350  
290 0 0 4 370 1164 0 0 0 2 4 this 3 1350  3 win 1 1291  
291 0 0 4 371 1164 0 0 0 1 4 this 3 1350  
292 0 0 7 359 1284 0 0 0 1 4 this 3 1350  
293 0 0 6 361 1285 0 0 0 1 4 this 3 1350  
294 0 0 7 380 1351 850 0 0 8 2 pp 1 1352  4 name 1 1159  19 texture_output_bits 1 1072  7 fbprops 1 1353  10 force_size 1 1170  11 forced_size 1 1356  8 div_size 1 1170  3 div 1 1072  
295 0 0 7 380 1351 850 0 0 1 6 param0 0 1359  
296 0 0 7 379 1174 0 0 0 0 
297 0 0 7 381 1240 0 0 0 1 4 this 3 1359  
298 0 0 7 382 1361 0 0 0 1 4 this 3 1359  
299 0 0 7 383 1240 0 0 0 1 4 this 3 1359  
300 0 0 6 384 1170 0 0 0 2 4 this 3 1359  4 bits 1 1072  
301 0 0 4 385 1164 0 0 0 3 4 this 3 1351  8 div_size 1 1170  3 div 1 1072  
302 0 0 4 386 1164 0 0 0 3 4 this 3 1351  10 force_size 1 1170  11 forced_size 1 1356  
303 0 0 4 387 1164 0 0 0 2 4 this 3 1351  7 fbprops 1 1353  
304 0 0 4 388 1164 0 0 0 2 4 this 3 1351  4 bits 1 1072  
305 0 0 7 389 1361 0 0 0 2 4 this 3 1351  4 size 1 1356  
306 0 0 7 390 1250 0 0 0 2 4 this 3 1351  3 bit 1 1072  
307 0 0 7 391 1250 0 0 0 1 4 this 3 1351  
308 0 0 7 392 1250 0 0 0 1 4 this 3 1351  
309 0 0 6 393 1170 0 0 0 1 4 this 3 1351  
310 0 0 4 394 1164 0 0 0 1 4 this 3 1351  
311 0 0 4 395 1164 0 0 0 1 4 this 3 1351  
312 0 0 4 396 1164 0 0 0 1 4 this 3 1351  
313 0 0 4 397 1164 0 0 0 1 4 this 3 1351  
314 0 0 4 398 1164 0 0 0 1 4 this 3 1351  
315 0 0 4 399 1164 0 0 0 1 4 this 3 1351  
316 0 0 4 400 1164 0 0 0 2 4 this 3 1351  6 output 1 1291  
317 0 0 4 401 1164 0 0 0 1 4 this 3 1351  
318 0 0 7 402 1362 0 0 0 0 
319 0 0 7 375 1284 0 0 0 1 4 this 3 1351  
320 0 0 6 377 1285 0 0 0 1 4 this 3 1351  
321 0 0 7 405 1363 854 0 0 3 2 pp 1 1352  19 output_texture_bits 1 1072  7 auxbits 1 1072  
322 0 0 7 405 1363 854 0 0 1 6 param0 0 1364  
323 0 0 4 406 1164 0 0 0 2 4 this 3 1363  1 i 1 1072  
324 0 0 4 407 1164 0 0 0 2 4 this 3 1363  5 state 1 1366  
325 0 0 7 410 1352 877 0 0 0 
326 0 0 7 410 1352 877 0 0 1 6 param0 0 1369  
327 0 0 4 411 1164 0 0 0 2 4 this 3 1352  6 output 1 1291  
328 0 0 4 412 1164 0 0 0 2 4 this 3 1352  6 camera 1 1226  
329 0 0 4 413 1164 0 0 0 2 4 this 3 1352  6 camera 1 1226  
330 0 0 4 414 1164 0 0 0 2 4 this 3 1352  6 effect 1 1350  
331 0 0 4 415 1164 0 0 0 2 4 this 3 1352  6 effect 1 1350  
332 0 0 7 416 1350 821 0 0 2 4 this 3 1352  4 name 1 1159  
333 0 0 7 417 1250 0 0 0 1 4 this 3 1369  
334 0 0 7 418 1250 0 0 0 1 4 this 3 1369  
335 0 0 7 419 1363 854 0 0 1 4 this 3 1369  
336 0 0 7 420 1291 0 0 0 1 4 this 3 1369  
337 0 0 7 421 1240 0 0 0 2 4 this 3 1369  1 n 1 1072  
338 0 0 6 422 1072 0 0 0 1 4 this 3 1352  
339 0 0 7 423 1372 0 0 0 1 4 this 3 1369  
340 0 0 6 424 1170 0 0 0 1 4 this 3 1369  
341 0 0 4 425 1164 0 0 0 2 4 this 3 1352  4 bits 1 1072  
342 0 0 4 426 1164 0 0 0 3 4 this 3 1352  1 n 1 1072  6 region 1 1373  
343 0 0 4 427 1164 0 0 0 2 4 this 3 1352  6 region 1 1373  
344 0 0 4 428 1164 0 0 0 3 4 this 3 1352  1 n 1 1072  6 region 1 1373  
345 0 0 4 429 1164 0 0 0 1 4 this 3 1352  
346 0 0 4 430 1164 0 0 0 1 4 this 3 1352  
347 0 0 4 431 1164 0 0 0 1 4 this 3 1352  
348 0 0 7 435 1377 882 0 0 1 6 param0 0 1375  
349 0 0 7 435 1377 882 0 0 1 2 pp 1 1352  
350 0 0 7 434 1174 0 0 0 0 
351 0 0 4 436 1164 0 0 0 2 4 this 3 1377  6 output 1 1304  
352 0 0 6 437 1167 0 0 56 /**
	 * Returns the calculated exposure adjustment.
	 */ 1 4 this 3 1375  
353 0 0 7 440 1378 885 0 0 1 2 pp 1 1352  
354 0 0 7 441 1377 882 0 0 1 4 this 3 1379  
355 0 0 7 445 1381 888 0 0 1 2 pp 1 1352  
356 0 0 7 444 1174 0 0 0 0 
357 0 0 7 448 1174 0 0 0 0 
358 0 0 7 449 1333 0 0 0 1 6 origin 1 1211  
359 0 0 7 450 1194 0 0 0 1 4 this 3 1382  
360 0 0 7 454 1384 895 0 0 1 2 pp 1 1352  
361 0 0 7 453 1174 0 0 0 0 
362 0 0 6 457 1072 0 0 0 0 
363 0 0 7 459 1174 0 0 0 0 
364 0 0 7 460 1176 0 0 0 1 13 bloom_enabled 1 1170  
365 0 0 6 461 1170 0 0 0 1 4 this 3 1385  
366 0 0 7 465 1387 929 0 0 12 6 loader 1 1225  5 world 1 1229  6 render 1 1226  6 parent 1 1226  11 walk_height 1 1167  13 crouch_height 1 1167  11 step_height 1 1167  6 radius 1 1167  7 gravity 1 1167  9 wall_mask 1 1207  10 floor_mask 1 1207  10 event_mask 1 1207  
367 0 0 7 465 1387 929 0 0 1 6 param0 0 1388  
368 0 0 4 466 1164 0 0 0 3 4 this 3 1387  4 degs 1 1167  12 affect_speed 1 1170  
369 0 0 4 467 1164 0 0 0 2 4 this 3 1387  4 mask 1 1207  
370 0 0 4 468 1164 0 0 0 2 4 this 3 1387  8 callback 1 1390  
371 0 0 4 469 1164 0 0 0 2 4 this 3 1387  8 callback 1 1390  
372 0 0 4 470 1164 0 0 0 2 4 this 3 1387  7 limiter 1 1170  
373 0 0 4 471 1164 0 0 0 2 4 this 3 1387  3 mat 1 1159  
374 0 0 4 472 1164 0 0 0 2 4 this 3 1387  4 flag 1 1170  
375 0 0 6 473 1159 0 0 0 1 4 this 3 1388  
376 0 0 7 474 1240 0 0 0 1 4 this 3 1388  
377 0 0 7 475 1240 0 0 0 1 4 this 3 1388  
378 0 0 7 476 1240 0 0 0 1 4 this 3 1388  
379 0 0 7 477 1240 0 0 0 1 4 this 3 1388  
380 0 0 7 478 1240 0 0 0 1 4 this 3 1388  
381 0 0 4 479 1164 0 0 0 2 4 this 3 1387  4 grav 1 1167  
382 0 0 4 480 1164 0 0 0 2 4 this 3 1387  5 state 1 1072  
383 0 0 6 481 1072 0 0 0 1 4 this 3 1388  
384 0 0 4 482 1164 0 0 0 2 4 this 3 1387  8 callback 1 1390  
385 0 0 4 483 1164 0 0 0 2 4 this 3 1387  8 callback 1 1390  
386 0 0 4 484 1164 0 0 0 1 4 this 3 1387  
387 0 0 4 485 1164 0 0 0 1 4 this 3 1387  
388 0 0 6 486 1170 0 0 0 1 4 this 3 1387  
389 0 0 4 487 1164 0 0 0 2 4 this 3 1387  10 max_height 1 1167  
390 0 0 4 488 1164 0 0 0 2 4 this 3 1387  5 omega 1 1167  
391 0 0 4 489 1164 0 0 0 2 4 this 3 1387  8 movement 1 1211  
392 0 0 4 490 1164 0 0 0 1 4 this 3 1387  
393 0 0 4 491 1164 0 0 0 2 4 this 3 1387  9 frametime 1 1167  
394 0 0 4 492 1164 0 0 0 1 4 this 3 1387  
395 0 0 6 495 1390 0 0 0 2 4 this 3 1393  9 classname 1 1159  
396 0 0 6 496 1072 0 0 2 // 1 4 this 3 1394  
397 0 0 6 497 1390 0 0 2 // 2 4 this 3 1394  1 n 1 1072  
398 0 0 7 498 1262 686 0 2 // 2 4 this 3 1394  6 entnum 1 1396  
399 0 0 4 499 1164 0 0 2 // 3 4 this 3 1393  4 list 1 1390  6 entnum 1 1396  
400 0 0 4 500 1164 0 0 2 // 3 4 this 3 1393  5 entum 1 1072  5 pyent 1 1390  
401 0 0 6 501 1390 0 0 2 // 2 4 this 3 1394  10 targetname 1 1159  
402 0 0 4 502 1164 0 0 0 1 4 this 3 1393  
403 0 0 4 503 1164 0 0 0 2 4 this 3 1393  3 ent 1 1390  
404 0 0 7 506 1397 943 0 0 0 
405 0 0 4 507 1164 0 0 0 3 4 this 3 1397  7 entname 1 1159  4 type 1 1398  
406 0 0 6 508 1390 0 0 0 3 4 this 3 1397  5 pyent 1 1390  9 classname 1 1159  
407 0 0 7 511 1401 952 0 0 0 
408 0 0 4 512 1164 0 0 0 2 4 this 3 1401  5 pyent 1 1390  
409 0 0 4 513 1164 0 0 0 2 4 this 3 1401  5 pyent 1 1390  
410 0 0 4 514 1164 0 0 0 3 4 this 3 1401  1 n 1 1072  9 preserved 1 1170  
411 0 0 4 515 1164 0 0 0 2 4 this 3 1401  10 dispatcher 1 1390  
412 0 0 4 516 1164 0 0 0 3 4 this 3 1401  4 name 1 1159  4 type 1 1398  
413 0 0 4 517 1164 0 0 0 4 4 this 3 1401  4 name 1 1159  6 origin 1 1211  6 angles 1 1211  
414 0 0 4 518 1164 0 0 0 1 4 this 3 1401  
415 0 0 7 522 1402 954 0 0 0 
416 0 0 7 522 1402 954 0 0 1 6 param0 0 1403  
417 0 0 4 524 1164 0 0 0 1 5 state 1 1170  
418 0 0 6 525 1170 0 0 0 0 
419 0 0 6 526 1170 0 0 0 0 
420 0 0 4 527 1164 0 0 0 1 9 timestamp 1 1167  
421 0 0 6 528 1167 0 0 0 0 
422 0 0 4 531 1164 0 0 0 2 4 this 3 1405  7 seconds 1 1167  
423 0 0 4 532 1164 0 0 82 // Returns true if the new value is different from the prior most recent
// value. 1 4 this 3 1405  
424 0 0 6 533 1170 0 0 0 3 4 this 3 1405  10 changetime 1 1167  25 bUpdateLastNetworkedValue 1 1170  
425 0 0 4 534 1164 0 0 0 1 4 this 3 1405  
426 0 0 6 535 1072 0 0 89 // Returns 1 if the value will always be the same if currentTime is always
// increasing. 2 4 this 3 1405  11 currentTime 1 1167  
427 0 0 6 536 1072 0 0 0 1 4 this 3 1406  
428 0 0 4 537 1164 0 0 0 1 4 this 3 1405  
429 0 0 4 538 1164 0 0 0 2 4 this 3 1405  4 pSrc 1 1405  
430 0 0 6 539 1159 0 0 0 1 4 this 3 1405  
431 0 0 4 540 1164 0 0 0 2 4 this 3 1405  5 pName 1 1159  
432 0 0 7 565 1408 994 0 0 1 10 pDebugName 1 1159  
433 0 0 7 543 1409 960 0 0 1 10 pDebugName 1 1159  
434 0 0 4 544 1164 0 0 0 3 4 this 3 1409  6 pValue 1 1410  4 type 1 1072  
435 0 0 6 545 1170 0 0 92 // Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount. 4 4 this 3 1409  10 changetime 1 1167  20 interpolation_amount 1 1167  25 bUpdateLastNetworkedValue 1 1170  
436 0 0 6 546 1072 0 0 0 3 4 this 3 1409  11 currentTime 1 1167  20 interpolation_amount 1 1167  
437 0 0 4 547 1164 0 0 0 3 4 this 3 1409  4 pOut 1 1410  11 currentTime 1 1167  
438 0 0 4 548 1164 0 0 0 3 4 this 3 1409  4 pOut 1 1410  11 currentTime 1 1167  
439 0 0 4 549 1164 0 0 0 3 4 this 3 1409  4 pOut 1 1410  11 currentTime 1 1167  
440 0 0 4 550 1164 0 0 0 1 4 this 3 1409  
441 0 0 4 551 1164 0 0 0 4 4 this 3 1409  10 changeTime 1 1167  6 values 1 1411  11 bFlushNewer 1 1170  
442 0 0 6 552 1411 0 0 0 2 4 this 3 1413  11 iArrayIndex 1 1072  
443 0 0 6 553 1411 0 0 0 2 4 this 3 1413  11 iArrayIndex 1 1072  
444 0 0 6 554 1167 0 0 89 // Returns the time difference betweem the most recent sample and its previous
// sample. 1 4 this 3 1413  
445 0 0 6 555 1170 0 0 0 2 4 this 3 1409  1 i 1 1072  
446 0 0 6 557 1072 0 0 0 1 4 this 3 1409  
447 0 0 6 558 1072 0 0 0 2 4 this 3 1409  1 i 1 1072  
448 0 0 4 559 1164 0 0 0 3 4 this 3 1409  4 item 1 1072  5 value 1 1410  
449 0 0 4 560 1164 0 0 0 3 4 this 3 1409  7 looping 1 1170  11 iArrayIndex 1 1072  
450 0 0 4 561 1164 0 0 0 2 4 this 3 1409  6 newmax 1 1072  
451 0 0 6 562 1072 0 0 0 1 4 this 3 1413  
452 0 0 6 563 1167 0 0 36 // Get the time of the oldest entry. 1 4 this 3 1409  
453 0 0 7 592 1415 1018 0 0 1 10 pDebugName 1 1159  
454 0 0 7 570 1416 960 0 0 1 10 pDebugName 1 1159  
455 0 0 4 571 1164 0 0 0 3 4 this 3 1416  6 pValue 1 1417  4 type 1 1072  
456 0 0 6 572 1170 0 0 92 // Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount. 4 4 this 3 1416  10 changetime 1 1167  20 interpolation_amount 1 1167  25 bUpdateLastNetworkedValue 1 1170  
457 0 0 6 573 1072 0 0 0 3 4 this 3 1416  11 currentTime 1 1167  20 interpolation_amount 1 1167  
458 0 0 4 574 1164 0 0 0 3 4 this 3 1416  4 pOut 1 1417  11 currentTime 1 1167  
459 0 0 4 575 1164 0 0 0 3 4 this 3 1416  4 pOut 1 1417  11 currentTime 1 1167  
460 0 0 4 576 1164 0 0 0 3 4 this 3 1416  4 pOut 1 1417  11 currentTime 1 1167  
461 0 0 4 577 1164 0 0 0 1 4 this 3 1416  
462 0 0 4 578 1164 0 0 0 4 4 this 3 1416  10 changeTime 1 1167  6 values 1 1418  11 bFlushNewer 1 1170  
463 0 0 6 579 1418 0 0 0 2 4 this 3 1420  11 iArrayIndex 1 1072  
464 0 0 6 580 1418 0 0 0 2 4 this 3 1420  11 iArrayIndex 1 1072  
465 0 0 6 581 1167 0 0 89 // Returns the time difference betweem the most recent sample and its previous
// sample. 1 4 this 3 1420  
466 0 0 6 582 1170 0 0 0 2 4 this 3 1416  1 i 1 1072  
467 0 0 6 584 1072 0 0 0 1 4 this 3 1416  
468 0 0 6 585 1072 0 0 0 2 4 this 3 1416  1 i 1 1072  
469 0 0 4 586 1164 0 0 0 3 4 this 3 1416  4 item 1 1072  5 value 1 1417  
470 0 0 4 587 1164 0 0 0 3 4 this 3 1416  7 looping 1 1170  11 iArrayIndex 1 1072  
471 0 0 4 588 1164 0 0 0 2 4 this 3 1416  6 newmax 1 1072  
472 0 0 6 589 1072 0 0 0 1 4 this 3 1420  
473 0 0 6 590 1167 0 0 36 // Get the time of the oldest entry. 1 4 this 3 1416  
474 0 0 7 619 1422 1042 0 0 1 10 pDebugName 1 1159  
475 0 0 7 597 1423 960 0 0 1 10 pDebugName 1 1159  
476 0 0 4 598 1164 0 0 0 3 4 this 3 1423  6 pValue 1 1424  4 type 1 1072  
477 0 0 6 599 1170 0 0 92 // Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount. 4 4 this 3 1423  10 changetime 1 1167  20 interpolation_amount 1 1167  25 bUpdateLastNetworkedValue 1 1170  
478 0 0 6 600 1072 0 0 0 3 4 this 3 1423  11 currentTime 1 1167  20 interpolation_amount 1 1167  
479 0 0 4 601 1164 0 0 0 3 4 this 3 1423  4 pOut 1 1424  11 currentTime 1 1167  
480 0 0 4 602 1164 0 0 0 3 4 this 3 1423  4 pOut 1 1424  11 currentTime 1 1167  
481 0 0 4 603 1164 0 0 0 3 4 this 3 1423  4 pOut 1 1424  11 currentTime 1 1167  
482 0 0 4 604 1164 0 0 0 1 4 this 3 1423  
483 0 0 4 605 1164 0 0 0 4 4 this 3 1423  10 changeTime 1 1167  6 values 1 1426  11 bFlushNewer 1 1170  
484 0 0 6 606 1426 0 0 0 2 4 this 3 1428  11 iArrayIndex 1 1072  
485 0 0 6 607 1426 0 0 0 2 4 this 3 1428  11 iArrayIndex 1 1072  
486 0 0 6 608 1167 0 0 89 // Returns the time difference betweem the most recent sample and its previous
// sample. 1 4 this 3 1428  
487 0 0 6 609 1170 0 0 0 2 4 this 3 1423  1 i 1 1072  
488 0 0 6 611 1072 0 0 0 1 4 this 3 1423  
489 0 0 6 612 1072 0 0 0 2 4 this 3 1423  1 i 1 1072  
490 0 0 4 613 1164 0 0 0 3 4 this 3 1423  4 item 1 1072  5 value 1 1424  
491 0 0 4 614 1164 0 0 0 3 4 this 3 1423  7 looping 1 1170  11 iArrayIndex 1 1072  
492 0 0 4 615 1164 0 0 0 2 4 this 3 1423  6 newmax 1 1072  
493 0 0 6 616 1072 0 0 0 1 4 this 3 1428  
494 0 0 6 617 1167 0 0 36 // Get the time of the oldest entry. 1 4 this 3 1423  
495 0 0 7 646 1430 1066 0 0 1 10 pDebugName 1 1159  
496 0 0 7 624 1431 960 0 0 1 10 pDebugName 1 1159  
497 0 0 6 626 1170 0 0 92 // Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount. 4 4 this 3 1431  10 changetime 1 1167  20 interpolation_amount 1 1167  25 bUpdateLastNetworkedValue 1 1170  
498 0 0 6 627 1072 0 0 0 3 4 this 3 1431  11 currentTime 1 1167  20 interpolation_amount 1 1167  
499 0 0 4 631 1164 0 0 0 1 4 this 3 1431  
500 0 0 6 633 1167 0 0 0 2 4 this 3 1432  11 iArrayIndex 1 1072  
501 0 0 6 634 1167 0 0 0 2 4 this 3 1432  11 iArrayIndex 1 1072  
502 0 0 6 635 1167 0 0 89 // Returns the time difference betweem the most recent sample and its previous
// sample. 1 4 this 3 1432  
503 0 0 6 636 1170 0 0 0 2 4 this 3 1431  1 i 1 1072  
504 0 0 6 638 1072 0 0 0 1 4 this 3 1431  
505 0 0 6 639 1072 0 0 0 2 4 this 3 1431  1 i 1 1072  
506 0 0 4 641 1164 0 0 0 3 4 this 3 1431  7 looping 1 1170  11 iArrayIndex 1 1072  
507 0 0 4 642 1164 0 0 0 2 4 this 3 1431  6 newmax 1 1072  
508 0 0 6 643 1072 0 0 0 1 4 this 3 1432  
509 0 0 6 644 1167 0 0 36 // Get the time of the oldest entry. 1 4 this 3 1431  
367
1067 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 520 521 0 10 510 511 512 513 514 515 516 517 518 519 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

1068 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 522 544 0 21 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 0 0 1 0 1069 0 0 0 0 0

1069 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1070 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 553 1 1434 8 545 546 547 548 549 550 551 552 0 0 1 0 1071 0 0 0 0 0

1071 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

1072 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1073 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 557 558 0 3 554 555 556 0 0 0 0 0 0

1074 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 564 565 0 5 559 560 561 562 563 0 0 0 0 0 0

1075 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 575 0 9 566 567 568 569 570 571 572 573 574 0 0 0 0 0 0

1076 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 578 579 0 2 576 577 0 0 0 0 0 0

1077 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 580 587 0 6 581 582 583 584 585 586 0 0 0 0 0 0

1078 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 588 0 0 8 589 590 591 592 593 594 595 596 0 0 1 0 1079 0 0 0 1 1080 0

1079 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

1080 0 0 794624 15 RayTraceScene:: 0 1078 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

1081 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 597 598 599 600 601 602 0 0 1 0 1082 0 0 0 0 0

1082 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

1083 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 604 607 0 3 603 605 606 0 0 1 0 1081 0 0 0 0 0

1084 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 616 1 1435 8 608 609 610 611 612 613 614 615 0 0 1 0 1071 0 0 0 1 1085 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

1085 0 0 794624 15 BSPFaceAttrib:: 0 1084 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

1086 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 0 670 0 53 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 0 0 0 0 1 1087 58
/**
 * Loads and handles the operations of PBSP files.
 */

1087 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 1086 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

1088 12 BoundingKDOP 0 141313 12 BoundingKDOP 12 BoundingKDOP 0 0 0 0 676 0 5 671 672 673 674 675 0 0 1 0 1089 0 0 0 0 243
/**
 * This defines a bounding convex volume.  It may represent any enclosing convex volume,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

1089 20 FiniteBoundingVolume 0 2048 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

1090 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 678 686 0 8 677 679 680 681 682 683 684 685 0 0 1 0 1069 0 0 0 0 0

1091 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 688 691 0 3 687 689 690 0 0 1 0 1090 0 0 0 0 0

1092 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 693 697 0 4 692 694 695 696 0 0 1 0 1090 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

1093 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 699 702 0 3 698 700 701 0 0 1 0 1090 0 0 0 0 0

1094 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 703 709 0 5 704 705 706 707 708 0 0 1 0 1079 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

1095 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 716 0 2 714 715 0 0 2 3 1079 710 711 3 1096 712 713 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

1096 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

1097 17 PlanarReflections 0 141313 17 PlanarReflections 17 PlanarReflections 0 0 0 1 718 719 0 1 717 0 0 1 0 1079 0 0 0 0 0

1098 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

1099 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

1100 7 AuxBits 0 532481 7 AuxBits 7 AuxBits 0 0 0 0 0 0 0 0 0 0 2 14 AUXBITS_NORMAL 14 AUXBITS_NORMAL 0
1 12 AUXBITS_ARME 12 AUXBITS_ARME 0
2 0 0

1101 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 720 745 0 24 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 0 0 1 0 1102 0 0 0 0 0

1102 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

1103 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 747 752 0 5 746 748 749 750 751 0 0 1 0 1104 0 0 0 0 0

1104 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

1105 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 754 755 0 1 753 0 0 1 0 1082 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

1106 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 757 758 0 1 756 0 0 1 0 1082 0 0 0 0 0

1107 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 760 761 0 1 759 0 0 1 0 1108 0 0 0 0 0

1108 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

1109 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 763 764 0 1 762 0 0 1 0 1110 0 0 0 0 0

1110 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

1111 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 765 766 0 0 0 0 1 0 1095 0 0 0 0 0

1112 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 767 768 0 0 0 0 1 0 1095 0 0 0 0 0

1113 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 769 770 0 0 0 0 1 0 1095 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

1114 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 771 772 0 0 0 0 1 0 1095 0 0 0 0 0

1115 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 773 774 0 0 0 0 1 0 1095 0 0 0 0 0

1116 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 775 776 0 0 0 0 1 0 1095 0 0 0 0 0

1117 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 779 0 2 777 778 0 0 1 0 1118 0 0 0 0 0

1118 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

1119 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 780 798 0 17 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 0 0 1 0 1079 0 0 0 0 0

1120 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 801 802 0 2 799 800 0 0 0 0 0 0

1121 17 DecalModulateSpec 0 141313 17 DecalModulateSpec 17 DecalModulateSpec 0 0 0 1 803 804 0 0 0 0 1 0 1113 0 0 0 0 90
/**
 * This is just an alias of UnlitGeneric that enables color blending on the decal.
 */

1122 8 GlowNode 0 141313 8 GlowNode 8 GlowNode 0 0 0 1 806 807 0 1 805 0 0 1 0 1123 0 0 0 0 207
/**
 * This is a specialization on GeomNode that uses a pixel occlusion query
 * to determine if the Geoms on the node should be rendered.
 *
 * This is useful for things like light glows or lens flares.
 */

1123 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

1124 17 PostProcessEffect 0 141313 17 PostProcessEffect 17 PostProcessEffect 0 0 0 0 821 0 9 812 813 814 815 816 817 818 819 820 0 0 2 3 1079 808 809 3 1096 810 811 0 0 0

1125 15 PassTextureBits 0 532481 15 PassTextureBits 15 PassTextureBits 0 0 0 0 0 0 0 0 0 0 6 22 bits_PASSTEXTURE_COLOR 22 bits_PASSTEXTURE_COLOR 0
1 22 bits_PASSTEXTURE_DEPTH 22 bits_PASSTEXTURE_DEPTH 0
2 21 bits_PASSTEXTURE_AUX0 21 bits_PASSTEXTURE_AUX0 0
4 21 bits_PASSTEXTURE_AUX1 21 bits_PASSTEXTURE_AUX1 0
8 21 bits_PASSTEXTURE_AUX2 21 bits_PASSTEXTURE_AUX2 0
16 21 bits_PASSTEXTURE_AUX3 21 bits_PASSTEXTURE_AUX3 0
32 0 0

1126 15 PostProcessPass 0 141313 15 PostProcessPass 15 PostProcessPass 0 0 0 1 827 850 0 23 826 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 0 0 2 3 1079 822 823 3 1096 824 825 0 0 0

1127 20 PostProcessScenePass 0 141313 20 PostProcessScenePass 20 PostProcessScenePass 0 0 0 1 851 854 0 2 852 853 0 0 1 0 1126 0 0 0 0 0

1128 11 PostProcess 0 141313 11 PostProcess 11 PostProcess 0 0 0 1 855 877 0 21 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 0 0 1 0 1079 0 0 0 0 0

1129 7 HDRPass 0 141313 7 HDRPass 7 HDRPass 0 0 0 1 879 882 0 3 878 880 881 0 0 1 0 1126 0 0 0 0 0

1130 9 HDREffect 0 141313 9 HDREffect 9 HDREffect 0 0 0 1 883 885 0 1 884 0 0 1 0 1124 0 0 0 0 0

1131 11 BloomEffect 0 141313 11 BloomEffect 11 BloomEffect 0 0 0 1 887 888 0 1 886 0 0 1 0 1124 0 0 0 0 0

1132 20 LightingOriginEffect 0 141313 20 LightingOriginEffect 20 LightingOriginEffect 0 0 0 0 892 0 3 889 890 891 0 0 1 0 1118 0 0 0 0 0

1133 11 FXAA_Effect 0 141313 11 FXAA_Effect 11 FXAA_Effect 0 0 0 1 894 895 0 1 893 0 0 1 0 1124 0 0 0 0 0

1134 11 BloomAttrib 0 141313 11 BloomAttrib 11 BloomAttrib 0 0 0 0 900 1 1436 4 896 897 898 899 0 0 1 0 1071 0 0 0 0 0

1135 13 MovementState 0 532481 13 MovementState 13 MovementState 0 0 0 0 0 0 0 0 0 0 4 20 MOVEMENTSTATE_GROUND 20 MOVEMENTSTATE_GROUND 0
0 21 MOVEMENTSTATE_JUMPING 21 MOVEMENTSTATE_JUMPING 0
1 21 MOVEMENTSTATE_FALLING 21 MOVEMENTSTATE_FALLING 0
2 22 MOVEMENTSTATE_SWIMMING 22 MOVEMENTSTATE_SWIMMING 0
3 0 0

1136 26 PhysicsCharacterController 0 141313 26 PhysicsCharacterController 26 PhysicsCharacterController 0 0 0 1 901 929 0 27 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 0 0 1 0 1079 0 0 0 0 0

1137 12 Py_BSPLoader 0 141313 12 Py_BSPLoader 12 Py_BSPLoader 0 0 0 0 939 0 9 930 931 932 933 934 935 936 937 938 0 0 1 0 1086 0 0 0 0 0

1138 15 Py_CL_BSPLoader 0 141313 15 Py_CL_BSPLoader 15 Py_CL_BSPLoader 0 0 0 1 940 943 0 2 941 942 0 0 1 0 1137 0 0 0 0 0

1139 15 Py_AI_BSPLoader 0 141313 15 Py_AI_BSPLoader 15 Py_AI_BSPLoader 0 0 0 1 944 952 0 7 945 946 947 948 949 950 951 0 0 1 0 1137 0 0 0 0 0

1140 16 InterpLatchFlags 0 532481 16 InterpLatchFlags 16 InterpLatchFlags 0 0 0 0 0 0 0 0 0 0 6 19 LATCH_ANIMATION_VAR 19 LATCH_ANIMATION_VAR 0
1 20 LATCH_SIMULATION_VAR 20 LATCH_SIMULATION_VAR 0
2 18 EXCLUDE_AUTO_LATCH 18 EXCLUDE_AUTO_LATCH 0
4 24 EXCLUDE_AUTO_INTERPOLATE 24 EXCLUDE_AUTO_INTERPOLATE 0
8 23 INTERPOLATE_LINEAR_ONLY 23 INTERPOLATE_LINEAR_ONLY 33
// don't do hermite interpolation
16 38 INTERPOLATE_OMIT_UPDATE_LAST_NETWORKED 38 INTERPOLATE_OMIT_UPDATE_LAST_NETWORKED 0
32 0 0

1141 21 CInterpolationContext 0 26625 21 CInterpolationContext 21 CInterpolationContext 0 0 0 1 953 954 0 5 955 956 957 958 959 0 0 0 0 0 119
// Before calling Interpolate(), you can use this use this to setup the context
// if you want to enable extrapolation.

1142 16 IInterpolatedVar 0 26625 16 IInterpolatedVar 16 IInterpolatedVar 0 0 0 0 960 0 10 961 962 963 964 965 966 967 968 969 970 0 0 0 0 0 0

1143 29 CInterpolatedVar< LVector2f > 0 141313 29 CInterpolatedVar< LVector2f > 29 CInterpolatedVar< LVector2f > 0 0 0 1 993 994 0 0 0 0 1 0 1144 0 0 0 0 0

1144 45 CInterpolatedVarArrayBase< LVector2f, false > 0 75777 45 CInterpolatedVarArrayBase< LVector2f, false > 45 CInterpolatedVarArrayBase< LVector2f, false > 0 0 0 1 971 960 0 21 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 0 0 1 0 1142 0 0 0 0 0

1145 17 CInterpolatedVec2 0 2105345 17 CInterpolatedVec2 17 CInterpolatedVec2 0 0 1143 0 0 0 0 0 0 0 0 0 0

1146 29 CInterpolatedVar< LVector3f > 0 141313 29 CInterpolatedVar< LVector3f > 29 CInterpolatedVar< LVector3f > 0 0 0 1 1017 1018 0 0 0 0 1 0 1147 0 0 0 0 0

1147 45 CInterpolatedVarArrayBase< LVector3f, false > 0 75777 45 CInterpolatedVarArrayBase< LVector3f, false > 45 CInterpolatedVarArrayBase< LVector3f, false > 0 0 0 1 995 960 0 21 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 0 0 1 0 1142 0 0 0 0 0

1148 17 CInterpolatedVec3 0 2105345 17 CInterpolatedVec3 17 CInterpolatedVec3 0 0 1146 0 0 0 0 0 0 0 0 0 0

1149 29 CInterpolatedVar< LVector4f > 0 141313 29 CInterpolatedVar< LVector4f > 29 CInterpolatedVar< LVector4f > 0 0 0 1 1041 1042 0 0 0 0 1 0 1150 0 0 0 0 0

1150 45 CInterpolatedVarArrayBase< LVector4f, false > 0 75777 45 CInterpolatedVarArrayBase< LVector4f, false > 45 CInterpolatedVarArrayBase< LVector4f, false > 0 0 0 1 1019 960 0 21 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 0 0 1 0 1142 0 0 0 0 0

1151 17 CInterpolatedVec4 0 2105345 17 CInterpolatedVec4 17 CInterpolatedVec4 0 0 1149 0 0 0 0 0 0 0 0 0 0

1152 25 CInterpolatedVar< float > 0 141313 25 CInterpolatedVar< float > 25 CInterpolatedVar< float > 0 0 0 1 1065 1066 0 0 0 0 1 0 1153 0 0 0 0 0

1153 41 CInterpolatedVarArrayBase< float, false > 0 75777 41 CInterpolatedVarArrayBase< float, false > 41 CInterpolatedVarArrayBase< float, false > 0 0 0 1 1043 960 0 21 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 0 0 1 0 1142 0 0 0 0 0

1154 18 CInterpolatedFloat 0 2105345 18 CInterpolatedFloat 18 CInterpolatedFloat 0 0 1152 0 0 0 0 0 0 0 0 0 0

1155 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 1067 0 0 0 0 0 0 0 0 0 0

1156 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 1157 0 0 0 0 0 0 0 0 0 0

1157 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 1067 0 0 0 0 0 0 0 0 0 0

1158 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

1159 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1160 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 1158 0 0 0 0 0 0 0 0 0 0

1161 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 1162 0 0 0 0 0 0 0 0 0 0

1162 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 1068 0 0 0 0 0 0 0 0 0 0

1163 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 1068 0 0 0 0 0 0 0 0 0 0

1164 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1165 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1166 0 0 0 0 0 0 0 0 0 0

1166 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1167 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1168 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

1169 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1168 0 0 0 0 0 0 0 0 0 0

1170 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1171 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1172 0 0 0 0 0 0 0 0 0 0

1172 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1168 0 0 0 0 0 0 0 0 0 0

1173 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1174 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1173 0 0 0 0 0 0 0 0 0 0

1175 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 1071 0 0 0 0 0 0 0 0 0 0

1176 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 1175 0 0 0 0 0 0 0 0 0 0

1177 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 1178 0 0 0 0 0 0 0 0 0 0

1178 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 1070 0 0 0 0 0 0 0 0 0 0

1179 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 1180 0 0 0 0 0 0 0 0 0 0

1180 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 1073 0 0 0 0 0 0 0 0 0 0

1181 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 1073 0 0 0 0 0 0 0 0 0 0

1182 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 1183 0 0 0 0 0 0 0 0 0 0

1183 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 1074 0 0 0 0 0 0 0 0 0 0

1184 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 1074 0 0 0 0 0 0 0 0 0 0

1185 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 1075 0 0 0 0 0 0 0 0 0 0

1186 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 1076 0 0 0 0 0 0 0 0 0 0

1187 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 1188 0 0 0 0 0 0 0 0 0 0

1188 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 1076 0 0 0 0 0 0 0 0 0 0

1189 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 1077 0 0 0 0 0 0 0 0 0 0

1190 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 1191 0 0 0 0 0 0 0 0 0 0

1191 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 1077 0 0 0 0 0 0 0 0 0 0

1192 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 1193 0 0 0 0 0 0 0 0 0 0

1193 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1194 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 1192 0 0 0 0 0 0 0 0 0 0

1195 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 1196 0 0 0 0 0 0 0 0 0 0

1196 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

1197 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 1195 0 0 0 0 0 0 0 0 0 0

1198 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1199 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 1078 0 0 0 0 0 0 0 0 0 0

1200 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 1201 0 0 0 0 0 0 0 0 0 0

1201 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 1078 0 0 0 0 0 0 0 0 0 0

1202 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 1081 0 0 0 0 0 0 0 0 0 0

1203 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1204 0 0 0 0 0 0 0 0 0 0

1204 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1205 0 0 0 0 0 0 0 0 0 0

1205 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1206 0 0 0 0 0 0 0 0 0 0

1206 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1207 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 1208 0 0 0 0 0 0 0 0 0 0

1208 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 1209 0 0 0 0 0 0 0 0 0 0

1209 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1210 0 0 0 0 0 0 0 0 0 0

1210 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1211 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 1212 0 0 0 0 0 0 0 0 0 0

1212 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 1192 0 0 0 0 0 0 0 0 0 0

1213 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 1214 0 0 0 0 0 0 0 0 0 0

1214 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 1081 0 0 0 0 0 0 0 0 0 0

1215 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 1209 0 0 0 0 0 0 0 0 0 0

1216 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 1083 0 0 0 0 0 0 0 0 0 0

1217 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 1218 0 0 0 0 0 0 0 0 0 0

1218 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 1219 0 0 0 0 0 0 0 0 0 0

1219 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

1220 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 1221 0 0 0 0 0 0 0 0 0 0

1221 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 1222 0 0 0 0 0 0 0 0 0 0

1222 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

1223 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 1224 0 0 0 0 0 0 0 0 0 0

1224 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 1084 0 0 0 0 0 0 0 0 0 0

1225 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 1086 0 0 0 0 0 0 0 0 0 0

1226 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1227 0 0 0 0 0 0 0 0 0 0

1227 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 1228 0 0 0 0 0 0 0 0 0 0

1228 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

1229 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 1230 0 0 0 0 0 0 0 0 0 0

1230 11 BulletWorld 0 2048 11 BulletWorld 11 BulletWorld 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1231 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 1232 0 0 0 0 0 0 0 0 0 0

1232 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 1086 0 0 0 0 0 0 0 0 0 0

1233 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 1234 0 0 0 0 0 0 0 0 0 0

1234 19 BulletRigidBodyNode 0 2048 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1235 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1205 0 0 0 0 0 0 0 0 0 0

1236 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1167 0 0 0 0 0 0 0 0 0 0

1237 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 1238 0 0 0 0 0 0 0 0 0 0

1238 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

1239 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 1101 0 0 0 0 0 0 0 0 0 0

1240 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 1228 0 0 0 0 0 0 0 0 0 0

1241 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 1242 0 0 0 0 0 0 0 0 0 0

1242 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 1243 0 0 0 0 0 0 0 0 0 0

1243 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 1244 0 0 0 0 0 0 0 0 0 0

1244 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

1245 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 1246 0 0 0 0 0 0 0 0 0 0

1246 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 1247 0 0 0 0 0 0 0 0 0 0

1247 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 1248 0 0 0 0 0 0 0 0 0 0

1248 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1249 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

1250 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1249 0 0 0 0 0 0 0 0 0 0

1251 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1252 0 0 0 0 0 0 0 0 0 0

1252 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1253 0 0 0 0 0 0 0 0 0 0

1253 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

1254 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 1255 0 0 0 0 0 0 0 0 0 0

1255 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 1244 0 0 0 0 0 0 0 0 0 0

1256 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 1254 0 0 0 0 0 0 0 0 0 0

1257 20 BoundingKDOP const * 0 8576 20 BoundingKDOP const * 20 BoundingKDOP const * 0 0 1258 0 0 0 0 0 0 0 0 0 0

1258 18 BoundingKDOP const 0 8832 18 BoundingKDOP const 18 BoundingKDOP const 0 0 1088 0 0 0 0 0 0 0 0 0 0

1259 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 1260 0 0 0 0 0 0 0 0 0 0

1260 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1261 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1259 0 0 0 0 0 0 0 0 0 0

1262 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 1090 0 0 0 0 0 0 0 0 0 0

1263 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 1264 0 0 0 0 0 0 0 0 0 0

1264 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 1090 0 0 0 0 0 0 0 0 0 0

1265 6 LColor 0 2105344 6 LColor 6 LColor 0 0 1247 0 0 0 0 0 0 0 0 0 0

1266 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 1265 0 0 0 0 0 0 0 0 0 0

1267 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 1091 0 0 0 0 0 0 0 0 0 0

1268 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 1269 0 0 0 0 0 0 0 0 0 0

1269 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 1091 0 0 0 0 0 0 0 0 0 0

1270 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 1092 0 0 0 0 0 0 0 0 0 0

1271 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 1272 0 0 0 0 0 0 0 0 0 0

1272 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 1092 0 0 0 0 0 0 0 0 0 0

1273 14 BoundingKDOP * 0 8576 14 BoundingKDOP * 14 BoundingKDOP * 0 0 1088 0 0 0 0 0 0 0 0 0 0

1274 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 1093 0 0 0 0 0 0 0 0 0 0

1275 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 1276 0 0 0 0 0 0 0 0 0 0

1276 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 1093 0 0 0 0 0 0 0 0 0 0

1277 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 1094 0 0 0 0 0 0 0 0 0 0

1278 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 1279 0 0 0 0 0 0 0 0 0 0

1279 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 1280 0 0 0 0 0 0 0 0 0 0

1280 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

1281 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 1282 0 0 0 0 0 0 0 0 0 0

1282 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 1094 0 0 0 0 0 0 0 0 0 0

1283 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 1095 0 0 0 0 0 0 0 0 0 0

1284 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1079 0 0 0 0 0 0 0 0 0 0

1285 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 1096 0 0 0 0 0 0 0 0 0 0

1286 25 PlanarReflections const * 0 8576 25 PlanarReflections const * 25 PlanarReflections const * 0 0 1287 0 0 0 0 0 0 0 0 0 0

1287 23 PlanarReflections const 0 8832 23 PlanarReflections const 23 PlanarReflections const 0 0 1097 0 0 0 0 0 0 0 0 0 0

1288 19 PlanarReflections * 0 8576 19 PlanarReflections * 19 PlanarReflections * 0 0 1097 0 0 0 0 0 0 0 0 0 0

1289 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 1290 0 0 0 0 0 0 0 0 0 0

1290 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 1101 0 0 0 0 0 0 0 0 0 0

1291 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 1292 0 0 0 0 0 0 0 0 0 0

1292 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

1293 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 1294 0 0 0 0 0 0 0 0 0 0

1294 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

1295 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 1296 0 0 0 0 0 0 0 0 0 0

1296 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

1297 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 1298 0 0 0 0 0 0 0 0 0 0

1298 3 Fog 0 2048 3 Fog 3 Fog 0 0 0 0 0 0 0 0 0 0 0 0 782
/**
 * Specifies how atmospheric fog effects are applied to geometry.  The Fog
 * object is now a PandaNode, which means it can be used similarly to a Light
 * to define effects relative to a particular coordinate system within the
 * scene graph.
 *
 * In exponential mode, the fog effects are always camera-relative, and it
 * does not matter where the Fog node is parented.  However, in linear mode,
 * the onset and opaque distances are defined as offsets along the local
 * forward axis (e.g.  the Y axis).  This allows the fog effect to be
 * localized to a particular region in space, rather than always camera-
 * relative.  If the fog object is not parented to any node, it is used to
 * generate traditonal camera-relative fog, as if it were parented to the
 * camera.
 */

1299 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1300 0 0 0 0 0 0 0 0 0 0

1300 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

1301 16 PTA_LVecBase4f * 0 8576 16 PTA_LVecBase4f * 16 PTA_LVecBase4f * 0 0 1299 0 0 0 0 0 0 0 0 0 0

1302 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1303 0 0 0 0 0 0 0 0 0 0

1303 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1304 11 PTA_float * 0 8576 11 PTA_float * 11 PTA_float * 0 0 1302 0 0 0 0 0 0 0 0 0 0

1305 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 1306 0 0 0 0 0 0 0 0 0 0

1306 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

1307 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 1308 0 0 0 0 0 0 0 0 0 0

1308 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 1095 0 0 0 0 0 0 0 0 0 0

1309 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 1305 0 0 0 0 0 0 0 0 0 0

1310 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 1311 0 0 0 0 0 0 0 0 0 0

1311 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 1103 0 0 0 0 0 0 0 0 0 0

1312 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 1103 0 0 0 0 0 0 0 0 0 0

1313 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 1104 0 0 0 0 0 0 0 0 0 0

1314 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 1315 0 0 0 0 0 0 0 0 0 0

1315 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 1105 0 0 0 0 0 0 0 0 0 0

1316 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 1105 0 0 0 0 0 0 0 0 0 0

1317 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 1318 0 0 0 0 0 0 0 0 0 0

1318 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 1106 0 0 0 0 0 0 0 0 0 0

1319 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 1106 0 0 0 0 0 0 0 0 0 0

1320 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 1321 0 0 0 0 0 0 0 0 0 0

1321 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 1107 0 0 0 0 0 0 0 0 0 0

1322 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 1107 0 0 0 0 0 0 0 0 0 0

1323 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 1324 0 0 0 0 0 0 0 0 0 0

1324 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 1109 0 0 0 0 0 0 0 0 0 0

1325 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 1109 0 0 0 0 0 0 0 0 0 0

1326 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 1111 0 0 0 0 0 0 0 0 0 0

1327 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 1112 0 0 0 0 0 0 0 0 0 0

1328 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 1113 0 0 0 0 0 0 0 0 0 0

1329 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 1114 0 0 0 0 0 0 0 0 0 0

1330 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 1115 0 0 0 0 0 0 0 0 0 0

1331 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 1116 0 0 0 0 0 0 0 0 0 0

1332 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 1118 0 0 0 0 0 0 0 0 0 0

1333 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 1332 0 0 0 0 0 0 0 0 0 0

1334 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 1335 0 0 0 0 0 0 0 0 0 0

1335 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 1119 0 0 0 0 0 0 0 0 0 0

1336 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 1119 0 0 0 0 0 0 0 0 0 0

1337 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 1338 0 0 0 0 0 0 0 0 0 0

1338 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

1339 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 1340 0 0 0 0 0 0 0 0 0 0

1340 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

1341 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 1120 0 0 0 0 0 0 0 0 0 0

1342 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 1343 0 0 0 0 0 0 0 0 0 0

1343 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 1120 0 0 0 0 0 0 0 0 0 0

1344 19 DecalModulateSpec * 0 8576 19 DecalModulateSpec * 19 DecalModulateSpec * 0 0 1121 0 0 0 0 0 0 0 0 0 0

1345 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 1346 0 0 0 0 0 0 0 0 0 0

1346 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 1123 0 0 0 0 0 0 0 0 0 0

1347 10 GlowNode * 0 8576 10 GlowNode * 10 GlowNode * 0 0 1122 0 0 0 0 0 0 0 0 0 0

1348 16 GlowNode const * 0 8576 16 GlowNode const * 16 GlowNode const * 0 0 1349 0 0 0 0 0 0 0 0 0 0

1349 14 GlowNode const 0 8832 14 GlowNode const 14 GlowNode const 0 0 1122 0 0 0 0 0 0 0 0 0 0

1350 19 PostProcessEffect * 0 8576 19 PostProcessEffect * 19 PostProcessEffect * 0 0 1124 0 0 0 0 0 0 0 0 0 0

1351 17 PostProcessPass * 0 8576 17 PostProcessPass * 17 PostProcessPass * 0 0 1126 0 0 0 0 0 0 0 0 0 0

1352 13 PostProcess * 0 8576 13 PostProcess * 13 PostProcess * 0 0 1128 0 0 0 0 0 0 0 0 0 0

1353 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1354 0 0 0 0 0 0 0 0 0 0

1354 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1355 0 0 0 0 0 0 0 0 0 0

1355 21 FrameBufferProperties 0 2048 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 0 0 0 0 0 0 0 0 0 132
/**
 * A container for the various kinds of properties we might ask to have on a
 * graphics frameBuffer before we create a GSG.
 */

1356 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 1357 0 0 0 0 0 0 0 0 0 0

1357 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 1358 0 0 0 0 0 0 0 0 0 0

1358 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

1359 23 PostProcessPass const * 0 8576 23 PostProcessPass const * 23 PostProcessPass const * 0 0 1360 0 0 0 0 0 0 0 0 0 0

1360 21 PostProcessPass const 0 8832 21 PostProcessPass const 21 PostProcessPass const 0 0 1126 0 0 0 0 0 0 0 0 0 0

1361 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 1358 0 0 0 0 0 0 0 0 0 0

1362 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1355 0 0 0 0 0 0 0 0 0 0

1363 22 PostProcessScenePass * 0 8576 22 PostProcessScenePass * 22 PostProcessScenePass * 0 0 1127 0 0 0 0 0 0 0 0 0 0

1364 28 PostProcessScenePass const * 0 8576 28 PostProcessScenePass const * 28 PostProcessScenePass const * 0 0 1365 0 0 0 0 0 0 0 0 0 0

1365 26 PostProcessScenePass const 0 8832 26 PostProcessScenePass const 26 PostProcessScenePass const 0 0 1127 0 0 0 0 0 0 0 0 0 0

1366 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1367 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 1368 0 0 0 0 0 0 0 0 0 0

1368 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

1369 19 PostProcess const * 0 8576 19 PostProcess const * 19 PostProcess const * 0 0 1370 0 0 0 0 0 0 0 0 0 0

1370 17 PostProcess const 0 8832 17 PostProcess const 17 PostProcess const 0 0 1128 0 0 0 0 0 0 0 0 0 0

1371 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

1372 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1371 0 0 0 0 0 0 0 0 0 0

1373 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1374 0 0 0 0 0 0 0 0 0 0

1374 14 DrawableRegion 0 2048 14 DrawableRegion 14 DrawableRegion 0 0 0 0 0 0 0 0 0 0 0 0 389
/**
 * This is a base class for GraphicsWindow (actually, GraphicsOutput) and
 * DisplayRegion, both of which are conceptually rectangular regions into
 * which drawing commands may be issued.  Sometimes you want to deal with a
 * single display region, and sometimes you want to deal with the whole window
 * at once, particularly for issuing clear commands and capturing screenshots.
 */

1375 15 HDRPass const * 0 8576 15 HDRPass const * 15 HDRPass const * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1376 13 HDRPass const 0 8832 13 HDRPass const 13 HDRPass const 0 0 1129 0 0 0 0 0 0 0 0 0 0

1377 9 HDRPass * 0 8576 9 HDRPass * 9 HDRPass * 0 0 1129 0 0 0 0 0 0 0 0 0 0

1378 11 HDREffect * 0 8576 11 HDREffect * 11 HDREffect * 0 0 1130 0 0 0 0 0 0 0 0 0 0

1379 17 HDREffect const * 0 8576 17 HDREffect const * 17 HDREffect const * 0 0 1380 0 0 0 0 0 0 0 0 0 0

1380 15 HDREffect const 0 8832 15 HDREffect const 15 HDREffect const 0 0 1130 0 0 0 0 0 0 0 0 0 0

1381 13 BloomEffect * 0 8576 13 BloomEffect * 13 BloomEffect * 0 0 1131 0 0 0 0 0 0 0 0 0 0

1382 28 LightingOriginEffect const * 0 8576 28 LightingOriginEffect const * 28 LightingOriginEffect const * 0 0 1383 0 0 0 0 0 0 0 0 0 0

1383 26 LightingOriginEffect const 0 8832 26 LightingOriginEffect const 26 LightingOriginEffect const 0 0 1132 0 0 0 0 0 0 0 0 0 0

1384 13 FXAA_Effect * 0 8576 13 FXAA_Effect * 13 FXAA_Effect * 0 0 1133 0 0 0 0 0 0 0 0 0 0

1385 19 BloomAttrib const * 0 8576 19 BloomAttrib const * 19 BloomAttrib const * 0 0 1386 0 0 0 0 0 0 0 0 0 0

1386 17 BloomAttrib const 0 8832 17 BloomAttrib const 17 BloomAttrib const 0 0 1134 0 0 0 0 0 0 0 0 0 0

1387 28 PhysicsCharacterController * 0 8576 28 PhysicsCharacterController * 28 PhysicsCharacterController * 0 0 1136 0 0 0 0 0 0 0 0 0 0

1388 34 PhysicsCharacterController const * 0 8576 34 PhysicsCharacterController const * 34 PhysicsCharacterController const * 0 0 1389 0 0 0 0 0 0 0 0 0 0

1389 32 PhysicsCharacterController const 0 8832 32 PhysicsCharacterController const 32 PhysicsCharacterController const 0 0 1136 0 0 0 0 0 0 0 0 0 0

1390 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1391 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1392 0 0 0 0 0 0 0 0 0 0

1392 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1393 14 Py_BSPLoader * 0 8576 14 Py_BSPLoader * 14 Py_BSPLoader * 0 0 1137 0 0 0 0 0 0 0 0 0 0

1394 20 Py_BSPLoader const * 0 8576 20 Py_BSPLoader const * 20 Py_BSPLoader const * 0 0 1395 0 0 0 0 0 0 0 0 0 0

1395 18 Py_BSPLoader const 0 8832 18 Py_BSPLoader const 18 Py_BSPLoader const 0 0 1137 0 0 0 0 0 0 0 0 0 0

1396 9 int const 0 8832 9 int const 9 int const 0 0 1072 0 0 0 0 0 0 0 0 0 0

1397 17 Py_CL_BSPLoader * 0 8576 17 Py_CL_BSPLoader * 17 Py_CL_BSPLoader * 0 0 1138 0 0 0 0 0 0 0 0 0 0

1398 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 1399 0 0 0 0 0 0 0 0 0 0

1399 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 1400 0 0 0 0 0 0 0 0 0 0

1400 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

1401 17 Py_AI_BSPLoader * 0 8576 17 Py_AI_BSPLoader * 17 Py_AI_BSPLoader * 0 0 1139 0 0 0 0 0 0 0 0 0 0

1402 23 CInterpolationContext * 0 8576 23 CInterpolationContext * 23 CInterpolationContext * 0 0 1141 0 0 0 0 0 0 0 0 0 0

1403 29 CInterpolationContext const * 0 8576 29 CInterpolationContext const * 29 CInterpolationContext const * 0 0 1404 0 0 0 0 0 0 0 0 0 0

1404 27 CInterpolationContext const 0 8832 27 CInterpolationContext const 27 CInterpolationContext const 0 0 1141 0 0 0 0 0 0 0 0 0 0

1405 18 IInterpolatedVar * 0 8576 18 IInterpolatedVar * 18 IInterpolatedVar * 0 0 1142 0 0 0 0 0 0 0 0 0 0

1406 24 IInterpolatedVar const * 0 8576 24 IInterpolatedVar const * 24 IInterpolatedVar const * 0 0 1407 0 0 0 0 0 0 0 0 0 0

1407 22 IInterpolatedVar const 0 8832 22 IInterpolatedVar const 22 IInterpolatedVar const 0 0 1142 0 0 0 0 0 0 0 0 0 0

1408 31 CInterpolatedVar< LVector2f > * 0 8576 31 CInterpolatedVar< LVector2f > * 31 CInterpolatedVar< LVector2f > * 0 0 1143 0 0 0 0 0 0 0 0 0 0

1409 47 CInterpolatedVarArrayBase< LVector2f, false > * 0 8576 47 CInterpolatedVarArrayBase< LVector2f, false > * 47 CInterpolatedVarArrayBase< LVector2f, false > * 0 0 1144 0 0 0 0 0 0 0 0 0 0

1410 11 LVector2f * 0 8576 11 LVector2f * 11 LVector2f * 0 0 1196 0 0 0 0 0 0 0 0 0 0

1411 17 LVector2f const * 0 8576 17 LVector2f const * 17 LVector2f const * 0 0 1412 0 0 0 0 0 0 0 0 0 0

1412 15 LVector2f const 0 8832 15 LVector2f const 15 LVector2f const 0 0 1196 0 0 0 0 0 0 0 0 0 0

1413 53 CInterpolatedVarArrayBase< LVector2f, false > const * 0 8576 53 CInterpolatedVarArrayBase< LVector2f, false > const * 53 CInterpolatedVarArrayBase< LVector2f, false > const * 0 0 1414 0 0 0 0 0 0 0 0 0 0

1414 51 CInterpolatedVarArrayBase< LVector2f, false > const 0 8832 51 CInterpolatedVarArrayBase< LVector2f, false > const 51 CInterpolatedVarArrayBase< LVector2f, false > const 0 0 1144 0 0 0 0 0 0 0 0 0 0

1415 31 CInterpolatedVar< LVector3f > * 0 8576 31 CInterpolatedVar< LVector3f > * 31 CInterpolatedVar< LVector3f > * 0 0 1146 0 0 0 0 0 0 0 0 0 0

1416 47 CInterpolatedVarArrayBase< LVector3f, false > * 0 8576 47 CInterpolatedVarArrayBase< LVector3f, false > * 47 CInterpolatedVarArrayBase< LVector3f, false > * 0 0 1147 0 0 0 0 0 0 0 0 0 0

1417 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1193 0 0 0 0 0 0 0 0 0 0

1418 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1419 0 0 0 0 0 0 0 0 0 0

1419 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1193 0 0 0 0 0 0 0 0 0 0

1420 53 CInterpolatedVarArrayBase< LVector3f, false > const * 0 8576 53 CInterpolatedVarArrayBase< LVector3f, false > const * 53 CInterpolatedVarArrayBase< LVector3f, false > const * 0 0 1421 0 0 0 0 0 0 0 0 0 0

1421 51 CInterpolatedVarArrayBase< LVector3f, false > const 0 8832 51 CInterpolatedVarArrayBase< LVector3f, false > const 51 CInterpolatedVarArrayBase< LVector3f, false > const 0 0 1147 0 0 0 0 0 0 0 0 0 0

1422 31 CInterpolatedVar< LVector4f > * 0 8576 31 CInterpolatedVar< LVector4f > * 31 CInterpolatedVar< LVector4f > * 0 0 1149 0 0 0 0 0 0 0 0 0 0

1423 47 CInterpolatedVarArrayBase< LVector4f, false > * 0 8576 47 CInterpolatedVarArrayBase< LVector4f, false > * 47 CInterpolatedVarArrayBase< LVector4f, false > * 0 0 1150 0 0 0 0 0 0 0 0 0 0

1424 11 LVector4f * 0 8576 11 LVector4f * 11 LVector4f * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1425 9 LVector4f 0 2048 9 LVector4f 9 LVector4f 0 0 0 0 0 0 0 0 0 0 0 0 52
/**
 * This is a four-component vector distance.
 */

1426 17 LVector4f const * 0 8576 17 LVector4f const * 17 LVector4f const * 0 0 1427 0 0 0 0 0 0 0 0 0 0

1427 15 LVector4f const 0 8832 15 LVector4f const 15 LVector4f const 0 0 1425 0 0 0 0 0 0 0 0 0 0

1428 53 CInterpolatedVarArrayBase< LVector4f, false > const * 0 8576 53 CInterpolatedVarArrayBase< LVector4f, false > const * 53 CInterpolatedVarArrayBase< LVector4f, false > const * 0 0 1429 0 0 0 0 0 0 0 0 0 0

1429 51 CInterpolatedVarArrayBase< LVector4f, false > const 0 8832 51 CInterpolatedVarArrayBase< LVector4f, false > const 51 CInterpolatedVarArrayBase< LVector4f, false > const 0 0 1150 0 0 0 0 0 0 0 0 0 0

1430 27 CInterpolatedVar< float > * 0 8576 27 CInterpolatedVar< float > * 27 CInterpolatedVar< float > * 0 0 1152 0 0 0 0 0 0 0 0 0 0

1431 43 CInterpolatedVarArrayBase< float, false > * 0 8576 43 CInterpolatedVarArrayBase< float, false > * 43 CInterpolatedVarArrayBase< float, false > * 0 0 1153 0 0 0 0 0 0 0 0 0 0

1432 49 CInterpolatedVarArrayBase< float, false > const * 0 8576 49 CInterpolatedVarArrayBase< float, false > const * 49 CInterpolatedVarArrayBase< float, false > const * 0 0 1433 0 0 0 0 0 0 0 0 0 0

1433 47 CInterpolatedVarArrayBase< float, false > const 0 8832 47 CInterpolatedVarArrayBase< float, false > const 47 CInterpolatedVarArrayBase< float, false > const 0 0 1153 0 0 0 0 0 0 0 0 0 0

0
3
1434 10 class_slot 0 2 1072 551 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

1435 10 class_slot 0 2 1072 614 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

1436 10 class_slot 0 2 1072 896 0 0 0 0 0 0 0 23 BloomAttrib::class_slot 0

0
