1610323744
3 3
3 bsp 4 t5GT 3 bsp 
431
406 3 get 0 4 837 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

407 15 get_basetexture 0 4 837 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

408 12 get_lightmap 0 4 837 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

409 19 get_bumped_lightmap 0 4 837 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

410 13 get_spheremap 0 4 837 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

411 11 get_cubemap 0 4 837 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

412 13 get_normalmap 0 4 837 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

413 13 get_heightmap 0 4 837 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

414 12 get_glossmap 0 4 837 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

415 11 get_glowmap 0 4 837 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

416 13 TextureStages 0 4 837 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

417 14 ~TextureStages 0 4 837 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

418 11 BSPMaterial 0 4 838 24 BSPMaterial::BSPMaterial 0 2 14 15 0
139
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "UnlitNoMat");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

419 10 operator = 0 4 838 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

420 12 set_keyvalue 0 4 838 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

421 12 get_keyvalue 0 4 838 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

422 17 get_num_keyvalues 0 4 838 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

423 7 get_key 0 4 838 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

424 9 get_value 0 4 838 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

425 16 get_keyvalue_int 0 4 838 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

426 18 get_keyvalue_float 0 4 838 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

427 10 set_shader 0 4 838 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

428 10 get_shader 0 4 838 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

429 8 get_file 0 4 838 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

430 12 has_keyvalue 0 4 838 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

431 15 has_env_cubemap 0 4 838 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

432 16 has_transparency 0 4 838 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

433 16 get_surface_prop 0 4 838 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

434 12 get_contents 0 4 838 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

435 14 is_lightmapped 0 4 838 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

436 9 is_skybox 0 4 838 22 BSPMaterial::is_skybox 0 1 33 0
47
inline bool BSPMaterial::is_skybox(void) const;

437 11 has_bumpmap 0 4 838 24 BSPMaterial::has_bumpmap 0 1 34 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

438 13 get_from_file 0 4 838 26 BSPMaterial::get_from_file 0 1 35 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

439 14 get_class_type 0 4 838 27 BSPMaterial::get_class_type 0 1 36 0
52
static TypeHandle BSPMaterial::get_class_type(void);

440 12 ~BSPMaterial 0 4 838 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

441 4 make 0 4 840 23 BSPMaterialAttrib::make 0 1 37 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

442 20 make_override_shader 0 4 840 39 BSPMaterialAttrib::make_override_shader 0 1 38 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

443 12 make_default 0 4 840 31 BSPMaterialAttrib::make_default 0 1 39 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

444 19 get_override_shader 0 4 840 38 BSPMaterialAttrib::get_override_shader 0 1 40 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

445 19 has_override_shader 0 4 840 38 BSPMaterialAttrib::has_override_shader 0 1 41 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

446 12 get_material 0 4 840 31 BSPMaterialAttrib::get_material 0 1 42 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

447 14 get_class_slot 0 4 840 33 BSPMaterialAttrib::get_class_slot 0 1 43 0
51
static int BSPMaterialAttrib::get_class_slot(void);

448 14 get_class_type 0 4 840 33 BSPMaterialAttrib::get_class_type 0 1 44 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

449 18 ~BSPMaterialAttrib 0 4 840 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

450 14 get_num_points 0 4 843 28 BoundingKDOP::get_num_points 0 1 45 0
60
inline std::size_t BoundingKDOP::get_num_points(void) const;

451 9 get_point 0 4 843 23 BoundingKDOP::get_point 0 1 46 0
52
inline LPoint3 BoundingKDOP::get_point(int n) const;

452 14 get_num_planes 0 4 843 28 BoundingKDOP::get_num_planes 0 1 47 0
60
inline std::size_t BoundingKDOP::get_num_planes(void) const;

453 9 get_plane 0 4 843 23 BoundingKDOP::get_plane 0 1 48 0
51
inline LPlane BoundingKDOP::get_plane(int n) const;

454 14 get_class_type 0 4 843 28 BoundingKDOP::get_class_type 0 1 49 0
53
static TypeHandle BoundingKDOP::get_class_type(void);

455 13 ~BoundingKDOP 0 4 843 27 BoundingKDOP::~BoundingKDOP 0 0 0
34
BoundingKDOP::~BoundingKDOP(void);

456 14 get_class_type 0 4 845 27 CBaseEntity::get_class_type 0 1 52 0
52
static TypeHandle CBaseEntity::get_class_type(void);

457 11 CBaseEntity 0 4 845 24 CBaseEntity::CBaseEntity 0 2 50 51 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

458 10 get_loader 0 4 845 23 CBaseEntity::get_loader 0 1 53 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

459 16 get_entity_value 0 4 845 29 CBaseEntity::get_entity_value 0 1 54 0
79
inline std::string CBaseEntity::get_entity_value(std::string const &key) const;

460 23 get_entity_value_vector 0 4 845 36 CBaseEntity::get_entity_value_vector 0 1 55 0
76
LVector3 CBaseEntity::get_entity_value_vector(std::string const &key) const;

461 22 get_entity_value_color 0 4 845 35 CBaseEntity::get_entity_value_color 0 1 56 0
92
LColor CBaseEntity::get_entity_value_color(std::string const &key, bool scale = true) const;

462 13 get_classname 0 4 845 26 CBaseEntity::get_classname 0 1 57 0
58
inline std::string CBaseEntity::get_classname(void) const;

463 14 get_targetname 0 4 845 27 CBaseEntity::get_targetname 0 1 58 0
59
inline std::string CBaseEntity::get_targetname(void) const;

464 14 get_bsp_entnum 0 4 845 27 CBaseEntity::get_bsp_entnum 0 1 59 0
51
inline int CBaseEntity::get_bsp_entnum(void) const;

465 12 ~CBaseEntity 0 4 845 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

466 14 get_class_type 0 4 846 28 CPointEntity::get_class_type 0 1 62 0
53
static TypeHandle CPointEntity::get_class_type(void);

467 12 CPointEntity 0 4 846 26 CPointEntity::CPointEntity 0 2 60 61 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

468 10 get_origin 0 4 846 24 CPointEntity::get_origin 0 1 63 0
45
LPoint3 CPointEntity::get_origin(void) const;

469 10 get_angles 0 4 846 24 CPointEntity::get_angles 0 1 64 0
46
LVector3 CPointEntity::get_angles(void) const;

470 13 ~CPointEntity 0 4 846 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

471 14 get_class_type 0 4 847 29 CBoundsEntity::get_class_type 0 1 67 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

472 13 CBoundsEntity 0 4 847 28 CBoundsEntity::CBoundsEntity 0 2 65 66 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

473 10 get_bounds 0 4 847 25 CBoundsEntity::get_bounds 0 1 68 0
52
BoundingKDOP *CBoundsEntity::get_bounds(void) const;

474 9 is_inside 0 4 847 24 CBoundsEntity::is_inside 0 1 69 0
56
bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

475 13 fillin_bounds 0 4 847 28 CBoundsEntity::fillin_bounds 0 1 70 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

476 14 ~CBoundsEntity 0 4 847 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

477 14 get_class_type 0 4 848 28 CBrushEntity::get_class_type 0 1 73 0
53
static TypeHandle CBrushEntity::get_class_type(void);

478 12 CBrushEntity 0 4 848 26 CBrushEntity::CBrushEntity 0 2 71 72 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

479 12 get_model_np 0 4 848 26 CBrushEntity::get_model_np 0 1 74 0
48
NodePath CBrushEntity::get_model_np(void) const;

480 16 get_model_bounds 0 4 848 30 CBrushEntity::get_model_bounds 0 1 75 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

481 13 ~CBrushEntity 0 4 848 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

482 9 get_width 0 4 849 21 PackResult::get_width 0 1 77 0
45
inline int PackResult::get_width(void) const;

483 10 get_height 0 4 849 22 PackResult::get_height 0 1 78 0
46
inline int PackResult::get_height(void) const;

484 15 get_unused_area 0 4 849 27 PackResult::get_unused_area 0 1 79 0
51
inline int PackResult::get_unused_area(void) const;

485 10 PackResult 0 4 849 22 PackResult::PackResult 0 1 76 0
60
inline PackResult::PackResult(PackResult const &) = default;

486 11 ~PackResult 0 4 849 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

487 5 get_x 0 4 850 22 TextureLocation::get_x 0 1 81 0
46
inline int TextureLocation::get_x(void) const;

488 5 get_y 0 4 850 22 TextureLocation::get_y 0 1 82 0
46
inline int TextureLocation::get_y(void) const;

489 9 get_width 0 4 850 26 TextureLocation::get_width 0 1 83 0
50
inline int TextureLocation::get_width(void) const;

490 10 get_height 0 4 850 27 TextureLocation::get_height 0 1 84 0
51
inline int TextureLocation::get_height(void) const;

491 11 get_rotated 0 4 850 28 TextureLocation::get_rotated 0 1 85 0
53
inline bool TextureLocation::get_rotated(void) const;

492 15 TextureLocation 0 4 850 32 TextureLocation::TextureLocation 0 1 80 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

493 16 ~TextureLocation 0 4 850 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

494 15 getTextureCount 0 6 851 30 TexturePacker::getTextureCount 0 1 86 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

495 15 setTextureCount 0 6 851 30 TexturePacker::setTextureCount 0 1 87 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

496 10 addTexture 0 6 851 25 TexturePacker::addTexture 0 1 88 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

497 15 wouldTextureFit 0 6 851 30 TexturePacker::wouldTextureFit 0 1 89 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

498 13 addNewTexture 0 6 851 28 TexturePacker::addNewTexture 0 1 90 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

499 12 packTextures 0 6 851 27 TexturePacker::packTextures 0 1 91 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

500 18 getTextureLocation 0 6 851 33 TexturePacker::getTextureLocation 0 1 92 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

501 19 createTexturePacker 0 4 851 34 TexturePacker::createTexturePacker 0 1 93 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

502 20 releaseTexturePacker 0 4 851 35 TexturePacker::releaseTexturePacker 0 1 94 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

503 14 ~TexturePacker 0 4 851 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

504 10 initialize 0 4 852 20 RayTrace::initialize 0 1 97 0
39
static void RayTrace::initialize(void);

505 8 destruct 0 4 852 18 RayTrace::destruct 0 1 98 0
37
static void RayTrace::destruct(void);

506 8 RayTrace 0 4 852 18 RayTrace::RayTrace 0 2 95 96 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

507 9 ~RayTrace 0 4 852 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

508 17 RayTraceHitResult 0 4 853 36 RayTraceHitResult::RayTraceHitResult 0 2 99 100 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

509 7 has_hit 0 4 853 26 RayTraceHitResult::has_hit 0 1 101 0
51
inline bool RayTraceHitResult::has_hit(void) const;

510 14 get_hit_normal 0 4 853 33 RayTraceHitResult::get_hit_normal 0 1 102 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

511 6 get_uv 0 4 853 25 RayTraceHitResult::get_uv 0 1 103 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

512 11 get_prim_id 0 4 853 30 RayTraceHitResult::get_prim_id 0 1 104 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

513 11 get_geom_id 0 4 853 30 RayTraceHitResult::get_geom_id 0 1 105 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

514 16 get_hit_fraction 0 4 853 35 RayTraceHitResult::get_hit_fraction 0 1 106 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

515 18 ~RayTraceHitResult 0 4 853 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

516 13 RayTraceScene 0 4 854 28 RayTraceScene::RayTraceScene 0 2 107 108 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

517 12 add_geometry 0 4 854 27 RayTraceScene::add_geometry 0 1 109 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

518 15 remove_geometry 0 4 854 30 RayTraceScene::remove_geometry 0 1 110 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

519 10 remove_all 0 4 854 25 RayTraceScene::remove_all 0 1 111 0
37
void RayTraceScene::remove_all(void);

520 10 trace_line 0 4 854 25 RayTraceScene::trace_line 0 1 112 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

521 9 trace_ray 0 4 854 24 RayTraceScene::trace_ray 0 1 113 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

522 17 set_build_quality 0 4 854 32 RayTraceScene::set_build_quality 0 1 114 0
51
void RayTraceScene::set_build_quality(int quality);

523 6 update 0 4 854 21 RayTraceScene::update 0 1 115 0
33
void RayTraceScene::update(void);

524 12 get_geometry 0 4 854 27 RayTraceScene::get_geometry 0 1 116 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

525 14 get_class_type 0 4 857 32 RayTraceGeometry::get_class_type 0 1 117 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

526 8 set_mask 0 4 857 26 RayTraceGeometry::set_mask 0 2 118 119 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

527 8 get_mask 0 4 857 26 RayTraceGeometry::get_mask 0 1 120 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

528 11 get_geom_id 0 4 857 29 RayTraceGeometry::get_geom_id 0 1 121 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

529 17 set_build_quality 0 4 857 35 RayTraceGeometry::set_build_quality 0 1 122 0
54
void RayTraceGeometry::set_build_quality(int quality);

530 5 build 0 6 857 23 RayTraceGeometry::build 0 1 123 0
47
virtual void RayTraceGeometry::build(void) = 0;

531 14 get_class_type 0 4 859 36 RayTraceTriangleMesh::get_class_type 0 1 125 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

532 20 RayTraceTriangleMesh 0 4 859 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 124 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

533 12 add_triangle 0 4 859 34 RayTraceTriangleMesh::add_triangle 0 1 126 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

534 23 add_triangles_from_geom 0 4 859 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 127 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

535 21 ~RayTraceTriangleMesh 0 4 859 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

536 4 make 0 4 860 19 BSPFaceAttrib::make 0 1 128 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

537 12 make_default 0 4 860 27 BSPFaceAttrib::make_default 0 1 129 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

538 15 make_ignore_pvs 0 4 860 30 BSPFaceAttrib::make_ignore_pvs 0 1 130 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

539 12 get_material 0 4 860 27 BSPFaceAttrib::get_material 0 1 131 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

540 13 get_face_type 0 4 860 28 BSPFaceAttrib::get_face_type 0 1 132 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

541 14 get_ignore_pvs 0 4 860 29 BSPFaceAttrib::get_ignore_pvs 0 1 133 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

542 14 get_class_slot 0 4 860 29 BSPFaceAttrib::get_class_slot 0 1 134 0
47
static int BSPFaceAttrib::get_class_slot(void);

543 14 get_class_type 0 4 860 29 BSPFaceAttrib::get_class_type 0 1 135 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

544 14 ~BSPFaceAttrib 0 4 860 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

545 9 BSPLoader 0 4 862 20 BSPLoader::BSPLoader 0 1 136 0
27
BSPLoader::BSPLoader(void);

546 14 remove_physics 0 4 862 25 BSPLoader::remove_physics 0 1 137 0
53
void BSPLoader::remove_physics(NodePath const &root);

547 17 set_physics_world 0 4 862 28 BSPLoader::set_physics_world 0 1 138 0
54
void BSPLoader::set_physics_world(BulletWorld *world);

548 17 get_physics_world 0 4 862 28 BSPLoader::get_physics_world 0 1 139 0
61
inline BulletWorld *BSPLoader::get_physics_world(void) const;

549 24 has_brush_collision_node 0 4 862 35 BSPLoader::has_brush_collision_node 0 1 140 0
83
inline bool BSPLoader::has_brush_collision_node(BulletRigidBodyNode *rbnode) const;

550 28 has_brush_collision_triangle 0 4 862 39 BSPLoader::has_brush_collision_triangle 0 1 141 0
99
inline bool BSPLoader::has_brush_collision_triangle(BulletRigidBodyNode *rbnode, int triangle_idx);

551 27 get_brush_triangle_material 0 4 862 38 BSPLoader::get_brush_triangle_material 0 1 142 0
105
inline std::string BSPLoader::get_brush_triangle_material(BulletRigidBodyNode *rbnode, int triangle_idx);

552 24 get_brush_triangle_model 0 4 862 35 BSPLoader::get_brush_triangle_model 0 1 143 0
94
inline int BSPLoader::get_brush_triangle_model(BulletRigidBodyNode *rbnode, int triangle_idx);

553 29 get_brush_triangle_model_fast 0 4 862 40 BSPLoader::get_brush_triangle_model_fast 0 1 144 0
92
int BSPLoader::get_brush_triangle_model_fast(BulletRigidBodyNode *rbnode, int triangle_idx);

554 16 get_model_origin 0 4 862 27 BSPLoader::get_model_origin 0 1 145 0
57
inline LPoint3 BSPLoader::get_model_origin(int modelnum);

555 18 add_dynamic_entity 0 4 862 29 BSPLoader::add_dynamic_entity 0 1 146 0
52
void BSPLoader::add_dynamic_entity(PyObject *pyent);

556 21 remove_dynamic_entity 0 4 862 32 BSPLoader::remove_dynamic_entity 0 1 147 0
55
void BSPLoader::remove_dynamic_entity(PyObject *pyent);

557 21 mark_entity_preserved 0 4 862 32 BSPLoader::mark_entity_preserved 0 1 148 0
68
void BSPLoader::mark_entity_preserved(int n, bool preserved = true);

558 16 get_num_entities 0 4 862 27 BSPLoader::get_num_entities 0 1 149 0
51
inline int BSPLoader::get_num_entities(void) const;

559 10 get_entity 0 4 862 21 BSPLoader::get_entity 0 1 150 0
45
PyObject *BSPLoader::get_entity(int n) const;

560 23 set_transition_landmark 0 4 862 34 BSPLoader::set_transition_landmark 0 1 151 0
120
inline void BSPLoader::set_transition_landmark(std::string const &name, LVector3 const &origin, LVector3 const &angles);

561 25 clear_transition_landmark 0 4 862 36 BSPLoader::clear_transition_landmark 0 1 152 0
55
inline void BSPLoader::clear_transition_landmark(void);

562 4 read 0 4 862 15 BSPLoader::read 0 1 153 0
71
bool BSPLoader::read(Filename const &file, bool is_transition = false);

563 16 do_optimizations 0 4 862 27 BSPLoader::do_optimizations 0 1 154 0
39
void BSPLoader::do_optimizations(void);

564 14 spawn_entities 0 4 862 25 BSPLoader::spawn_entities 0 1 155 0
37
void BSPLoader::spawn_entities(void);

565 9 set_gamma 0 4 862 20 BSPLoader::set_gamma 0 1 156 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

566 9 get_gamma 0 4 862 20 BSPLoader::get_gamma 0 1 157 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

567 7 set_win 0 4 862 18 BSPLoader::set_win 0 1 158 0
45
void BSPLoader::set_win(GraphicsWindow *win);

568 10 set_camera 0 4 862 21 BSPLoader::set_camera 0 1 159 0
51
void BSPLoader::set_camera(NodePath const &camera);

569 10 set_render 0 4 862 21 BSPLoader::set_render 0 1 160 0
51
void BSPLoader::set_render(NodePath const &render);

570 20 set_shader_generator 0 4 862 31 BSPLoader::set_shader_generator 0 1 161 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

571 19 set_want_visibility 0 4 862 30 BSPLoader::set_want_visibility 0 1 162 0
47
void BSPLoader::set_want_visibility(bool flag);

572 18 set_want_lightmaps 0 4 862 29 BSPLoader::set_want_lightmaps 0 1 163 0
46
void BSPLoader::set_want_lightmaps(bool flag);

573 16 set_physics_type 0 4 862 27 BSPLoader::set_physics_type 0 1 164 0
43
void BSPLoader::set_physics_type(int type);

574 19 set_visualize_leafs 0 4 862 30 BSPLoader::set_visualize_leafs 0 1 165 0
47
void BSPLoader::set_visualize_leafs(bool flag);

575 18 set_materials_file 0 4 862 29 BSPLoader::set_materials_file 0 1 166 0
57
void BSPLoader::set_materials_file(Filename const &file);

576 13 set_wireframe 0 4 862 24 BSPLoader::set_wireframe 0 1 167 0
41
void BSPLoader::set_wireframe(bool flag);

577 13 get_wireframe 0 4 862 24 BSPLoader::get_wireframe 0 1 168 0
49
inline bool BSPLoader::get_wireframe(void) const;

578 10 get_camera 0 4 862 21 BSPLoader::get_camera 0 1 169 0
50
inline NodePath BSPLoader::get_camera(void) const;

579 11 trace_decal 0 4 862 22 BSPLoader::trace_decal 0 1 170 0
195
inline void BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end, LColorf const &decal_color = LColorf(1));

580 27 get_closest_cubemap_texture 0 4 862 38 BSPLoader::get_closest_cubemap_texture 0 1 171 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

581 14 build_cubemaps 0 4 862 25 BSPLoader::build_cubemaps 0 1 172 0
37
void BSPLoader::build_cubemaps(void);

582 16 set_want_shadows 0 4 862 27 BSPLoader::set_want_shadows 0 1 173 0
44
void BSPLoader::set_want_shadows(bool flag);

583 14 set_shadow_dir 0 4 862 25 BSPLoader::set_shadow_dir 0 1 174 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

584 16 extract_modelnum 0 4 862 27 BSPLoader::extract_modelnum 0 1 175 0
44
int BSPLoader::extract_modelnum(int entnum);

585 16 get_model_bounds 0 4 862 27 BSPLoader::get_model_bounds 0 1 176 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

586 28 set_server_entity_dispatcher 0 4 862 39 BSPLoader::set_server_entity_dispatcher 0 1 177 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

587 27 link_server_entity_to_class 0 4 862 38 BSPLoader::link_server_entity_to_class 0 1 178 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

588 6 set_ai 0 4 862 17 BSPLoader::set_ai 0 1 179 0
32
void BSPLoader::set_ai(bool ai);

589 5 is_ai 0 4 862 16 BSPLoader::is_ai 0 1 180 0
41
inline bool BSPLoader::is_ai(void) const;

590 10 trace_line 0 4 862 21 BSPLoader::trace_line 0 1 181 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

591 9 clip_line 0 4 862 20 BSPLoader::clip_line 0 1 182 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

592 20 link_entity_to_class 0 4 862 31 BSPLoader::link_entity_to_class 0 1 183 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

593 28 get_py_entity_by_target_name 0 4 862 39 BSPLoader::get_py_entity_by_target_name 0 1 184 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

594 17 find_all_entities 0 4 862 28 BSPLoader::find_all_entities 0 1 185 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

595 20 get_entity_keyvalues 0 4 862 31 BSPLoader::get_entity_keyvalues 0 1 186 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

596 18 link_cent_to_pyent 0 4 862 29 BSPLoader::link_cent_to_pyent 0 1 187 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

597 16 remove_py_entity 0 4 862 27 BSPLoader::remove_py_entity 0 1 188 0
48
void BSPLoader::remove_py_entity(PyObject *ent);

598 9 get_model 0 4 862 20 BSPLoader::get_model 0 1 189 0
50
NodePath BSPLoader::get_model(int modelnum) const;

599 12 get_c_entity 0 4 862 23 BSPLoader::get_c_entity 0 1 190 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

600 9 find_leaf 0 4 862 20 BSPLoader::find_leaf 0 2 191 192 0
116
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos, int headnode = 0);

601 9 find_node 0 4 862 20 BSPLoader::find_node 0 1 193 0
45
int BSPLoader::find_node(LPoint3 const &pos);

602 18 is_cluster_visible 0 4 862 29 BSPLoader::is_cluster_visible 0 1 194 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

603 15 pvs_bounds_test 0 4 862 26 BSPLoader::pvs_bounds_test 0 1 195 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

604 15 make_net_bounds 0 4 862 26 BSPLoader::make_net_bounds 0 1 196 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

605 16 has_active_level 0 4 862 27 BSPLoader::has_active_level 0 1 197 0
52
inline bool BSPLoader::has_active_level(void) const;

606 14 has_visibility 0 4 862 25 BSPLoader::has_visibility 0 1 198 0
50
inline bool BSPLoader::has_visibility(void) const;

607 7 cleanup 0 4 862 18 BSPLoader::cleanup 0 1 199 0
52
void BSPLoader::cleanup(bool is_transition = false);

608 10 get_result 0 4 862 21 BSPLoader::get_result 0 1 200 0
50
inline NodePath BSPLoader::get_result(void) const;

609 16 set_current_leaf 0 4 862 27 BSPLoader::set_current_leaf 0 1 201 0
50
inline void BSPLoader::set_current_leaf(int leaf);

610 16 get_current_leaf 0 4 862 27 BSPLoader::get_current_leaf 0 1 202 0
51
inline int BSPLoader::get_current_leaf(void) const;

611 16 get_num_visleafs 0 4 862 27 BSPLoader::get_num_visleafs 0 1 203 0
51
inline int BSPLoader::get_num_visleafs(void) const;

612 15 get_leaf_center 0 4 862 26 BSPLoader::get_leaf_center 0 1 204 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

613 15 get_lightcoords 0 4 862 26 BSPLoader::get_lightcoords 0 1 205 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

614 6 update 0 4 862 17 BSPLoader::update 0 1 206 0
29
void BSPLoader::update(void);

615 14 get_global_ptr 0 4 862 25 BSPLoader::get_global_ptr 0 1 207 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

616 10 ~BSPLoader 0 4 862 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

617 18 ShaderPermutations 0 4 864 38 ShaderPermutations::ShaderPermutations 0 1 208 0
52
inline ShaderPermutations::ShaderPermutations(void);

618 15 add_permutation 0 4 864 35 ShaderPermutations::add_permutation 0 1 209 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

619 8 complete 0 4 864 28 ShaderPermutations::complete 0 1 210 0
47
inline void ShaderPermutations::complete(void);

620 9 add_input 0 4 864 29 ShaderPermutations::add_input 0 1 211 0
66
inline void ShaderPermutations::add_input(ShaderInput const &inp);

621 8 add_flag 0 4 864 28 ShaderPermutations::add_flag 0 1 212 0
51
inline void ShaderPermutations::add_flag(int flag);

622 8 get_hash 0 4 864 28 ShaderPermutations::get_hash 0 1 213 0
60
inline std::size_t ShaderPermutations::get_hash(void) const;

623 19 ~ShaderPermutations 0 4 864 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

624 24 upcast_to_ReferenceCount 0 12 865 36 ShaderSpec::upcast_to_ReferenceCount 0 1 216 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

625 22 downcast_to_ShaderSpec 0 12 855 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

626 17 upcast_to_Namable 0 12 865 29 ShaderSpec::upcast_to_Namable 0 1 217 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

627 22 downcast_to_ShaderSpec 0 12 866 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

628 17 read_shader_files 0 4 865 29 ShaderSpec::read_shader_files 0 1 214 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

629 14 get_class_type 0 4 865 26 ShaderSpec::get_class_type 0 1 215 0
51
static TypeHandle ShaderSpec::get_class_type(void);

630 11 ~ShaderSpec 0 4 865 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

631 22 get_reflection_texture 0 4 867 41 PlanarReflections::get_reflection_texture 0 1 219 0
63
Texture *PlanarReflections::get_reflection_texture(void) const;

632 17 PlanarReflections 0 4 867 36 PlanarReflections::PlanarReflections 0 1 218 0
81
inline PlanarReflections::PlanarReflections(PlanarReflections const &) = default;

633 18 ~PlanarReflections 0 4 867 37 PlanarReflections::~PlanarReflections 0 0 0
44
PlanarReflections::~PlanarReflections(void);

634 18 BSPShaderGenerator 0 4 871 38 BSPShaderGenerator::BSPShaderGenerator 0 2 220 221 0
224
BSPShaderGenerator::BSPShaderGenerator(GraphicsOutput *output, GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

635 13 set_sun_light 0 4 871 33 BSPShaderGenerator::set_sun_light 0 1 222 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

636 12 start_update 0 4 871 32 BSPShaderGenerator::start_update 0 1 223 0
44
void BSPShaderGenerator::start_update(void);

637 10 add_shader 0 4 871 30 BSPShaderGenerator::add_shader 0 1 224 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

638 14 get_sun_vector 0 4 871 34 BSPShaderGenerator::get_sun_vector 0 1 225 0
63
inline LVector3 BSPShaderGenerator::get_sun_vector(void) const;

639 19 has_shadow_sunlight 0 4 871 39 BSPShaderGenerator::has_shadow_sunlight 0 1 226 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

640 22 get_pssm_array_texture 0 4 871 42 BSPShaderGenerator::get_pssm_array_texture 0 1 227 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

641 12 get_pssm_rig 0 4 871 32 BSPShaderGenerator::get_pssm_rig 0 1 228 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

642 10 get_camera 0 4 871 30 BSPShaderGenerator::get_camera 0 1 229 0
59
inline NodePath BSPShaderGenerator::get_camera(void) const;

643 10 get_render 0 4 871 30 BSPShaderGenerator::get_render 0 1 230 0
59
inline NodePath BSPShaderGenerator::get_render(void) const;

644 18 set_shader_quality 0 4 871 38 BSPShaderGenerator::set_shader_quality 0 1 231 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

645 18 get_shader_quality 0 4 871 38 BSPShaderGenerator::get_shader_quality 0 1 232 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

646 7 set_fog 0 4 871 27 BSPShaderGenerator::set_fog 0 1 233 0
50
inline void BSPShaderGenerator::set_fog(Fog *fog);

647 9 clear_fog 0 4 871 29 BSPShaderGenerator::clear_fog 0 1 234 0
48
inline void BSPShaderGenerator::clear_fog(void);

648 7 get_fog 0 4 871 27 BSPShaderGenerator::get_fog 0 1 235 0
52
inline Fog *BSPShaderGenerator::get_fog(void) const;

649 12 get_fog_data 0 4 871 32 BSPShaderGenerator::get_fog_data 0 1 236 0
67
inline PTA_LVecBase4f BSPShaderGenerator::get_fog_data(void) const;

650 22 set_exposure_adustment 0 4 871 42 BSPShaderGenerator::set_exposure_adustment 0 1 237 0
71
inline void BSPShaderGenerator::set_exposure_adustment(float exposure);

651 23 get_exposure_adjustment 0 4 871 43 BSPShaderGenerator::get_exposure_adjustment 0 1 238 0
73
inline PTA_float BSPShaderGenerator::get_exposure_adjustment(void) const;

652 7 get_gsg 0 4 871 27 BSPShaderGenerator::get_gsg 0 1 239 0
70
inline GraphicsStateGuardian *BSPShaderGenerator::get_gsg(void) const;

653 10 get_output 0 4 871 30 BSPShaderGenerator::get_output 0 1 240 0
66
inline GraphicsOutput *BSPShaderGenerator::get_output(void) const;

654 22 get_planar_reflections 0 4 871 42 BSPShaderGenerator::get_planar_reflections 0 1 241 0
81
inline PlanarReflections *BSPShaderGenerator::get_planar_reflections(void) const;

655 20 set_identity_cubemap 0 4 871 40 BSPShaderGenerator::set_identity_cubemap 0 1 242 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

656 20 get_identity_cubemap 0 4 871 40 BSPShaderGenerator::get_identity_cubemap 0 1 243 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

657 11 make_shader 0 4 871 31 BSPShaderGenerator::make_shader 0 1 244 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const *perms);

658 14 get_class_type 0 4 871 34 BSPShaderGenerator::get_class_type 0 1 245 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

659 19 ~BSPShaderGenerator 0 4 871 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

660 14 get_class_type 0 4 873 32 BSPCullTraverser::get_class_type 0 1 248 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

661 16 BSPCullTraverser 0 4 873 34 BSPCullTraverser::BSPCullTraverser 0 2 246 247 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

662 17 ~BSPCullTraverser 0 4 873 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

663 14 get_class_type 0 4 875 25 BSPRender::get_class_type 0 1 251 0
50
static TypeHandle BSPRender::get_class_type(void);

664 9 BSPRender 0 4 875 20 BSPRender::BSPRender 0 2 249 250 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

665 10 ~BSPRender 0 4 875 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

666 14 get_class_type 0 4 876 23 BSPRoot::get_class_type 0 1 254 0
48
static TypeHandle BSPRoot::get_class_type(void);

667 7 BSPRoot 0 4 876 16 BSPRoot::BSPRoot 0 2 252 253 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

668 8 ~BSPRoot 0 4 876 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

669 14 get_class_type 0 4 877 23 BSPProp::get_class_type 0 1 257 0
48
static TypeHandle BSPProp::get_class_type(void);

670 7 BSPProp 0 4 877 16 BSPProp::BSPProp 0 2 255 256 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

671 8 ~BSPProp 0 4 877 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

672 14 get_class_type 0 4 879 24 BSPModel::get_class_type 0 1 260 0
49
static TypeHandle BSPModel::get_class_type(void);

673 8 BSPModel 0 4 879 18 BSPModel::BSPModel 0 2 258 259 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

674 9 ~BSPModel 0 4 879 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

675 20 VertexLitGenericSpec 0 4 881 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 261 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

676 21 ~VertexLitGenericSpec 0 4 881 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

677 22 LightmappedGenericSpec 0 4 882 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 262 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

678 23 ~LightmappedGenericSpec 0 4 882 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

679 16 UnlitGenericSpec 0 4 883 34 UnlitGenericSpec::UnlitGenericSpec 0 1 263 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

680 17 ~UnlitGenericSpec 0 4 883 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

681 14 UnlitNoMatSpec 0 4 884 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 264 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

682 15 ~UnlitNoMatSpec 0 4 884 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

683 13 CSMRenderSpec 0 4 885 28 CSMRenderSpec::CSMRenderSpec 0 1 265 0
35
CSMRenderSpec::CSMRenderSpec(void);

684 14 ~CSMRenderSpec 0 4 885 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

685 10 SkyBoxSpec 0 4 886 22 SkyBoxSpec::SkyBoxSpec 0 1 266 0
29
SkyBoxSpec::SkyBoxSpec(void);

686 11 ~SkyBoxSpec 0 4 886 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

687 4 make 0 4 887 24 AmbientBoostEffect::make 0 1 267 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

688 14 get_class_type 0 4 887 34 AmbientBoostEffect::get_class_type 0 1 268 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

689 19 ~AmbientBoostEffect 0 4 887 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

690 14 Audio3DManager 0 4 889 30 Audio3DManager::Audio3DManager 0 2 269 270 0
228
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath(), int task_priority = 51);
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

691 19 set_distance_factor 0 4 889 35 Audio3DManager::set_distance_factor 0 1 271 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

692 19 get_distance_factor 0 4 889 35 Audio3DManager::get_distance_factor 0 1 272 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

693 18 set_doppler_factor 0 4 889 34 Audio3DManager::set_doppler_factor 0 1 273 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

694 18 get_doppler_factor 0 4 889 34 Audio3DManager::get_doppler_factor 0 1 274 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

695 19 set_drop_off_factor 0 4 889 35 Audio3DManager::set_drop_off_factor 0 1 275 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

696 19 get_drop_off_factor 0 4 889 35 Audio3DManager::get_drop_off_factor 0 1 276 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

697 22 set_sound_min_distance 0 4 889 38 Audio3DManager::set_sound_min_distance 0 1 277 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

698 22 get_sound_min_distance 0 4 889 38 Audio3DManager::get_sound_min_distance 0 1 278 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

699 22 set_sound_max_distance 0 4 889 38 Audio3DManager::set_sound_max_distance 0 1 279 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

700 22 get_sound_max_distance 0 4 889 38 Audio3DManager::get_sound_max_distance 0 1 280 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

701 15 attach_listener 0 4 889 31 Audio3DManager::attach_listener 0 1 281 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

702 15 detach_listener 0 4 889 31 Audio3DManager::detach_listener 0 1 282 0
50
inline void Audio3DManager::detach_listener(void);

703 8 load_sfx 0 4 889 24 Audio3DManager::load_sfx 0 1 283 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

704 22 attach_sound_to_object 0 4 889 38 Audio3DManager::attach_sound_to_object 0 1 284 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

705 12 detach_sound 0 4 889 28 Audio3DManager::detach_sound 0 1 285 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

706 18 print_audio_digest 0 4 889 34 Audio3DManager::print_audio_digest 0 1 286 0
46
void Audio3DManager::print_audio_digest(void);

707 6 update 0 4 889 22 Audio3DManager::update 0 1 287 0
34
void Audio3DManager::update(void);

708 15 ~Audio3DManager 0 4 889 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

709 19 set_pupil_direction 0 4 890 27 CIOLib::set_pupil_direction 0 1 290 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

710 14 look_pupils_at 0 4 890 22 CIOLib::look_pupils_at 0 1 291 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

711 6 CIOLib 0 4 890 14 CIOLib::CIOLib 0 2 288 289 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

712 7 ~CIOLib 0 4 890 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

713 17 DecalModulateSpec 0 4 891 36 DecalModulateSpec::DecalModulateSpec 0 1 292 0
43
DecalModulateSpec::DecalModulateSpec(void);

714 18 ~DecalModulateSpec 0 4 891 37 DecalModulateSpec::~DecalModulateSpec 0 0 0
44
DecalModulateSpec::~DecalModulateSpec(void);

715 14 get_class_type 0 4 892 24 GlowNode::get_class_type 0 1 296 0
49
static TypeHandle GlowNode::get_class_type(void);

716 8 GlowNode 0 4 892 18 GlowNode::GlowNode 0 3 293 294 295 0
219
GlowNode::GlowNode(std::string const &name, float query_size = ::r_glow_querysize);
GlowNode::GlowNode(GeomNode const &copy, float query_size = ::r_glow_querysize);
inline GlowNode::GlowNode(GlowNode const &) = default;

717 9 ~GlowNode 0 4 892 19 GlowNode::~GlowNode 0 0 0
26
GlowNode::~GlowNode(void);

718 24 upcast_to_ReferenceCount 0 12 894 43 PostProcessEffect::upcast_to_ReferenceCount 0 1 306 47
upcast from PostProcessEffect to ReferenceCount
66
ReferenceCount *PostProcessEffect::upcast_to_ReferenceCount(void);

719 29 downcast_to_PostProcessEffect 0 12 855 45 ReferenceCount::downcast_to_PostProcessEffect 0 0 49
downcast from ReferenceCount to PostProcessEffect
71
PostProcessEffect *ReferenceCount::downcast_to_PostProcessEffect(void);

720 17 upcast_to_Namable 0 12 894 36 PostProcessEffect::upcast_to_Namable 0 1 307 40
upcast from PostProcessEffect to Namable
52
Namable *PostProcessEffect::upcast_to_Namable(void);

721 29 downcast_to_PostProcessEffect 0 12 866 38 Namable::downcast_to_PostProcessEffect 0 0 42
downcast from Namable to PostProcessEffect
64
PostProcessEffect *Namable::downcast_to_PostProcessEffect(void);

722 14 get_class_type 0 4 894 33 PostProcessEffect::get_class_type 0 1 297 0
58
static TypeHandle PostProcessEffect::get_class_type(void);

723 17 get_final_texture 0 6 894 36 PostProcessEffect::get_final_texture 0 1 298 0
64
virtual Texture *PostProcessEffect::get_final_texture(void) = 0;

724 8 add_pass 0 4 894 27 PostProcessEffect::add_pass 0 1 299 0
56
void PostProcessEffect::add_pass(PostProcessPass *pass);

725 11 remove_pass 0 4 894 30 PostProcessEffect::remove_pass 0 1 300 0
59
void PostProcessEffect::remove_pass(PostProcessPass *pass);

726 8 get_pass 0 4 894 27 PostProcessEffect::get_pass 0 1 301 0
70
PostProcessPass *PostProcessEffect::get_pass(std::string const &name);

727 5 setup 0 6 894 24 PostProcessEffect::setup 0 1 302 0
44
virtual void PostProcessEffect::setup(void);

728 6 update 0 6 894 25 PostProcessEffect::update 0 1 303 0
45
virtual void PostProcessEffect::update(void);

729 12 window_event 0 4 894 31 PostProcessEffect::window_event 0 1 304 0
58
void PostProcessEffect::window_event(GraphicsOutput *win);

730 8 shutdown 0 6 894 27 PostProcessEffect::shutdown 0 1 305 0
47
virtual void PostProcessEffect::shutdown(void);

731 18 ~PostProcessEffect 0 4 894 37 PostProcessEffect::~PostProcessEffect 0 0 0
44
PostProcessEffect::~PostProcessEffect(void);

732 24 upcast_to_ReferenceCount 0 12 896 41 PostProcessPass::upcast_to_ReferenceCount 0 1 333 45
upcast from PostProcessPass to ReferenceCount
64
ReferenceCount *PostProcessPass::upcast_to_ReferenceCount(void);

733 27 downcast_to_PostProcessPass 0 12 855 43 ReferenceCount::downcast_to_PostProcessPass 0 0 47
downcast from ReferenceCount to PostProcessPass
67
PostProcessPass *ReferenceCount::downcast_to_PostProcessPass(void);

734 17 upcast_to_Namable 0 12 896 34 PostProcessPass::upcast_to_Namable 0 1 334 38
upcast from PostProcessPass to Namable
50
Namable *PostProcessPass::upcast_to_Namable(void);

735 27 downcast_to_PostProcessPass 0 12 866 36 Namable::downcast_to_PostProcessPass 0 0 40
downcast from Namable to PostProcessPass
60
PostProcessPass *Namable::downcast_to_PostProcessPass(void);

736 14 get_class_type 0 4 896 31 PostProcessPass::get_class_type 0 1 310 0
56
static TypeHandle PostProcessPass::get_class_type(void);

737 15 PostProcessPass 0 4 896 32 PostProcessPass::PostProcessPass 0 2 308 309 0
379
PostProcessPass::PostProcessPass(PostProcess *pp, std::string const &name = "pass", int texture_output_bits = 0, FrameBufferProperties const &fbprops = PostProcessPass::get_default_fbprops(), bool force_size = false, LVector2i const &forced_size = LVector2i::zero(), bool div_size = false, int div = 1);
inline PostProcessPass::PostProcessPass(PostProcessPass const &) = default;

738 8 get_quad 0 4 896 25 PostProcessPass::get_quad 0 1 311 0
54
inline NodePath PostProcessPass::get_quad(void) const;

739 26 get_back_buffer_dimensions 0 4 896 43 PostProcessPass::get_back_buffer_dimensions 0 1 312 0
66
LVector2i PostProcessPass::get_back_buffer_dimensions(void) const;

740 10 get_camera 0 4 896 27 PostProcessPass::get_camera 0 1 313 0
56
inline NodePath PostProcessPass::get_camera(void) const;

741 16 has_texture_bits 0 4 896 33 PostProcessPass::has_texture_bits 0 1 314 0
62
inline bool PostProcessPass::has_texture_bits(int bits) const;

742 12 set_div_size 0 4 896 29 PostProcessPass::set_div_size 0 1 315 0
66
inline void PostProcessPass::set_div_size(bool div_size, int div);

743 15 set_forced_size 0 4 896 32 PostProcessPass::set_forced_size 0 1 316 0
92
inline void PostProcessPass::set_forced_size(bool force_size, LVector2i const &forced_size);

744 26 set_framebuffer_properties 0 4 896 43 PostProcessPass::set_framebuffer_properties 0 1 317 0
94
inline void PostProcessPass::set_framebuffer_properties(FrameBufferProperties const &fbprops);

745 23 set_output_texture_bits 0 4 896 40 PostProcessPass::set_output_texture_bits 0 1 318 0
63
inline void PostProcessPass::set_output_texture_bits(int bits);

746 18 get_corrected_size 0 4 896 35 PostProcessPass::get_corrected_size 0 1 319 0
69
LVector2i PostProcessPass::get_corrected_size(LVector2i const &size);

747 11 get_texture 0 4 896 28 PostProcessPass::get_texture 0 1 320 0
47
Texture *PostProcessPass::get_texture(int bit);

748 17 get_color_texture 0 4 896 34 PostProcessPass::get_color_texture 0 1 321 0
57
inline Texture *PostProcessPass::get_color_texture(void);

749 17 get_depth_texture 0 4 896 34 PostProcessPass::get_depth_texture 0 1 322 0
57
inline Texture *PostProcessPass::get_depth_texture(void);

750 12 setup_buffer 0 6 896 29 PostProcessPass::setup_buffer 0 1 323 0
49
virtual bool PostProcessPass::setup_buffer(void);

751 14 setup_textures 0 6 896 31 PostProcessPass::setup_textures 0 1 324 0
51
virtual void PostProcessPass::setup_textures(void);

752 10 setup_quad 0 6 896 27 PostProcessPass::setup_quad 0 1 325 0
47
virtual void PostProcessPass::setup_quad(void);

753 12 setup_camera 0 6 896 29 PostProcessPass::setup_camera 0 1 326 0
49
virtual void PostProcessPass::setup_camera(void);

754 12 setup_region 0 6 896 29 PostProcessPass::setup_region 0 1 327 0
49
virtual void PostProcessPass::setup_region(void);

755 5 setup 0 6 896 22 PostProcessPass::setup 0 1 328 0
42
virtual void PostProcessPass::setup(void);

756 6 update 0 6 896 23 PostProcessPass::update 0 1 329 0
43
virtual void PostProcessPass::update(void);

757 12 window_event 0 6 896 29 PostProcessPass::window_event 0 1 330 0
67
virtual void PostProcessPass::window_event(GraphicsOutput *output);

758 8 shutdown 0 6 896 25 PostProcessPass::shutdown 0 1 331 0
45
virtual void PostProcessPass::shutdown(void);

759 19 get_default_fbprops 0 4 896 36 PostProcessPass::get_default_fbprops 0 1 332 0
72
static FrameBufferProperties PostProcessPass::get_default_fbprops(void);

760 16 ~PostProcessPass 0 4 896 33 PostProcessPass::~PostProcessPass 0 0 0
40
PostProcessPass::~PostProcessPass(void);

761 20 PostProcessScenePass 0 4 897 42 PostProcessScenePass::PostProcessScenePass 0 2 335 336 0
220
PostProcessScenePass::PostProcessScenePass(PostProcess *pp, int output_texture_bits = ::bits_PASSTEXTURE_COLOR, int auxbits = 0);
inline PostProcessScenePass::PostProcessScenePass(PostProcessScenePass const &) = default;

762 18 setup_scene_camera 0 4 897 40 PostProcessScenePass::setup_scene_camera 0 1 337 0
53
void PostProcessScenePass::setup_scene_camera(int i);

763 16 set_camera_state 0 4 897 38 PostProcessScenePass::set_camera_state 0 1 338 0
70
void PostProcessScenePass::set_camera_state(RenderState const *state);

764 21 ~PostProcessScenePass 0 4 897 43 PostProcessScenePass::~PostProcessScenePass 0 0 0
50
PostProcessScenePass::~PostProcessScenePass(void);

765 11 PostProcess 0 4 898 24 PostProcess::PostProcess 0 2 339 340 0
113
PostProcess::PostProcess(GraphicsOutput *output);
inline PostProcess::PostProcess(PostProcess const &) = default;

766 10 add_camera 0 4 898 23 PostProcess::add_camera 0 1 341 0
53
void PostProcess::add_camera(NodePath const &camera);

767 13 remove_camera 0 4 898 26 PostProcess::remove_camera 0 1 342 0
56
void PostProcess::remove_camera(NodePath const &camera);

768 10 add_effect 0 4 898 23 PostProcess::add_effect 0 1 343 0
63
inline void PostProcess::add_effect(PostProcessEffect *effect);

769 13 remove_effect 0 4 898 26 PostProcess::remove_effect 0 1 344 0
66
inline void PostProcess::remove_effect(PostProcessEffect *effect);

770 10 get_effect 0 4 898 23 PostProcess::get_effect 0 1 345 0
75
inline PostProcessEffect *PostProcess::get_effect(std::string const &name);

771 23 get_scene_color_texture 0 4 898 36 PostProcess::get_scene_color_texture 0 1 346 0
65
inline Texture *PostProcess::get_scene_color_texture(void) const;

772 23 get_scene_depth_texture 0 4 898 36 PostProcess::get_scene_depth_texture 0 1 347 0
65
inline Texture *PostProcess::get_scene_depth_texture(void) const;

773 14 get_scene_pass 0 4 898 27 PostProcess::get_scene_pass 0 1 348 0
69
inline PostProcessScenePass *PostProcess::get_scene_pass(void) const;

774 10 get_output 0 4 898 23 PostProcess::get_output 0 1 349 0
59
inline GraphicsOutput *PostProcess::get_output(void) const;

775 10 get_camera 0 4 898 23 PostProcess::get_camera 0 1 350 0
53
inline NodePath PostProcess::get_camera(int n) const;

776 9 next_sort 0 4 898 22 PostProcess::next_sort 0 1 351 0
40
inline int PostProcess::next_sort(void);

777 25 get_output_display_region 0 4 898 38 PostProcess::get_output_display_region 0 1 352 0
73
inline DisplayRegion *PostProcess::get_output_display_region(void) const;

778 13 is_fullscreen 0 4 898 26 PostProcess::is_fullscreen 0 1 353 0
51
inline bool PostProcess::is_fullscreen(void) const;

779 18 set_scene_aux_bits 0 4 898 31 PostProcess::set_scene_aux_bits 0 1 354 0
47
void PostProcess::set_scene_aux_bits(int bits);

780 18 set_stacked_clears 0 4 898 31 PostProcess::set_stacked_clears 0 1 355 0
68
void PostProcess::set_stacked_clears(int n, DrawableRegion *region);

781 17 set_window_clears 0 4 898 30 PostProcess::set_window_clears 0 1 356 0
60
void PostProcess::set_window_clears(DrawableRegion *region);

782 10 set_clears 0 4 898 23 PostProcess::set_clears 0 1 357 0
60
void PostProcess::set_clears(int n, DrawableRegion *region);

783 8 shutdown 0 4 898 21 PostProcess::shutdown 0 1 358 0
33
void PostProcess::shutdown(void);

784 12 ~PostProcess 0 4 898 25 PostProcess::~PostProcess 0 0 0
32
PostProcess::~PostProcess(void);

785 14 get_class_type 0 4 899 23 HDRPass::get_class_type 0 1 361 0
48
static TypeHandle HDRPass::get_class_type(void);

786 7 HDRPass 0 4 899 16 HDRPass::HDRPass 0 2 359 360 0
86
HDRPass::HDRPass(PostProcess *pp);
inline HDRPass::HDRPass(HDRPass const &) = default;

787 19 set_exposure_output 0 4 899 28 HDRPass::set_exposure_output 0 1 362 0
59
inline void HDRPass::set_exposure_output(PTA_float output);

788 12 get_exposure 0 4 899 21 HDRPass::get_exposure 0 1 363 56
/**
	 * Returns the calculated exposure adjustment.
	 */
47
inline float HDRPass::get_exposure(void) const;

789 8 ~HDRPass 0 4 899 17 HDRPass::~HDRPass 0 0 0
24
HDRPass::~HDRPass(void);

790 9 HDREffect 0 4 900 20 HDREffect::HDREffect 0 1 364 0
38
HDREffect::HDREffect(PostProcess *pp);

791 12 get_hdr_pass 0 4 900 23 HDREffect::get_hdr_pass 0 1 365 0
52
inline HDRPass *HDREffect::get_hdr_pass(void) const;

792 10 ~HDREffect 0 4 900 21 HDREffect::~HDREffect 0 0 0
28
HDREffect::~HDREffect(void);

793 14 get_class_type 0 4 901 27 BloomEffect::get_class_type 0 1 367 0
52
static TypeHandle BloomEffect::get_class_type(void);

794 11 BloomEffect 0 4 901 24 BloomEffect::BloomEffect 0 1 366 0
42
BloomEffect::BloomEffect(PostProcess *pp);

795 12 ~BloomEffect 0 4 901 25 BloomEffect::~BloomEffect 0 0 0
32
BloomEffect::~BloomEffect(void);

796 14 get_class_type 0 4 902 36 LightingOriginEffect::get_class_type 0 1 368 0
61
static TypeHandle LightingOriginEffect::get_class_type(void);

797 4 make 0 4 902 26 LightingOriginEffect::make 0 1 369 0
89
static ConstPointerTo< RenderEffect > LightingOriginEffect::make(LVector3 const &origin);

798 19 get_lighting_origin 0 4 902 41 LightingOriginEffect::get_lighting_origin 0 1 370 0
70
inline LVector3 LightingOriginEffect::get_lighting_origin(void) const;

799 21 ~LightingOriginEffect 0 4 902 43 LightingOriginEffect::~LightingOriginEffect 0 0 0
50
LightingOriginEffect::~LightingOriginEffect(void);

800 14 get_class_type 0 4 903 27 FXAA_Effect::get_class_type 0 1 372 0
52
static TypeHandle FXAA_Effect::get_class_type(void);

801 11 FXAA_Effect 0 4 903 24 FXAA_Effect::FXAA_Effect 0 1 371 0
42
FXAA_Effect::FXAA_Effect(PostProcess *pp);

802 12 ~FXAA_Effect 0 4 903 25 FXAA_Effect::~FXAA_Effect 0 0 0
32
FXAA_Effect::~FXAA_Effect(void);

803 14 get_class_slot 0 4 904 27 BloomAttrib::get_class_slot 0 1 373 0
45
static int BloomAttrib::get_class_slot(void);

804 14 get_class_type 0 4 904 27 BloomAttrib::get_class_type 0 1 374 0
52
static TypeHandle BloomAttrib::get_class_type(void);

805 4 make 0 4 904 17 BloomAttrib::make 0 1 375 0
83
static ConstPointerTo< RenderAttrib > BloomAttrib::make(bool bloom_enabled = true);

806 16 is_bloom_enabled 0 4 904 29 BloomAttrib::is_bloom_enabled 0 1 376 0
54
inline bool BloomAttrib::is_bloom_enabled(void) const;

807 12 ~BloomAttrib 0 4 904 25 BloomAttrib::~BloomAttrib 0 0 0
32
BloomAttrib::~BloomAttrib(void);

808 26 PhysicsCharacterController 0 4 906 54 PhysicsCharacterController::PhysicsCharacterController 0 2 377 378 0
406
PhysicsCharacterController::PhysicsCharacterController(BulletWorld *world, NodePath const &render, NodePath const &parent, float walk_height, float crouch_height, float step_height, float radius, float gravity, BitMask32 const &wall_mask, BitMask32 const &floor_mask, BitMask32 const &event_mask);
inline PhysicsCharacterController::PhysicsCharacterController(PhysicsCharacterController const &) = default;

809 13 set_max_slope 0 4 906 41 PhysicsCharacterController::set_max_slope 0 1 379 0
78
void PhysicsCharacterController::set_max_slope(float degs, bool affect_speed);

810 16 set_collide_mask 0 4 906 44 PhysicsCharacterController::set_collide_mask 0 1 380 0
73
void PhysicsCharacterController::set_collide_mask(BitMask32 const &mask);

811 24 set_event_enter_callback 0 4 906 52 PhysicsCharacterController::set_event_enter_callback 0 1 381 0
85
inline void PhysicsCharacterController::set_event_enter_callback(PyObject *callback);

812 23 set_event_exit_callback 0 4 906 51 PhysicsCharacterController::set_event_exit_callback 0 1 382 0
84
inline void PhysicsCharacterController::set_event_exit_callback(PyObject *callback);

813 23 set_active_jump_limiter 0 4 906 51 PhysicsCharacterController::set_active_jump_limiter 0 1 383 0
78
inline void PhysicsCharacterController::set_active_jump_limiter(bool limiter);

814 20 set_default_material 0 4 906 48 PhysicsCharacterController::set_default_material 0 1 384 0
85
inline void PhysicsCharacterController::set_default_material(std::string const &mat);

815 18 set_touching_water 0 4 906 46 PhysicsCharacterController::set_touching_water 0 1 385 0
70
inline void PhysicsCharacterController::set_touching_water(bool flag);

816 20 get_current_material 0 4 906 48 PhysicsCharacterController::get_current_material 0 1 386 0
80
inline std::string PhysicsCharacterController::get_current_material(void) const;

817 16 get_walk_capsule 0 4 906 44 PhysicsCharacterController::get_walk_capsule 0 1 387 0
73
inline NodePath PhysicsCharacterController::get_walk_capsule(void) const;

818 18 get_crouch_capsule 0 4 906 46 PhysicsCharacterController::get_crouch_capsule 0 1 388 0
75
inline NodePath PhysicsCharacterController::get_crouch_capsule(void) const;

819 16 get_event_sphere 0 4 906 44 PhysicsCharacterController::get_event_sphere 0 1 389 0
73
inline NodePath PhysicsCharacterController::get_event_sphere(void) const;

820 11 get_capsule 0 4 906 39 PhysicsCharacterController::get_capsule 0 1 390 0
68
inline NodePath PhysicsCharacterController::get_capsule(void) const;

821 19 get_movement_parent 0 4 906 47 PhysicsCharacterController::get_movement_parent 0 1 391 0
76
inline NodePath PhysicsCharacterController::get_movement_parent(void) const;

822 11 set_gravity 0 4 906 39 PhysicsCharacterController::set_gravity 0 1 392 0
64
inline void PhysicsCharacterController::set_gravity(float grav);

823 18 set_movement_state 0 4 906 46 PhysicsCharacterController::set_movement_state 0 1 393 0
70
inline void PhysicsCharacterController::set_movement_state(int state);

824 18 get_movement_state 0 4 906 46 PhysicsCharacterController::get_movement_state 0 1 394 0
70
inline int PhysicsCharacterController::get_movement_state(void) const;

825 21 set_stand_up_callback 0 4 906 49 PhysicsCharacterController::set_stand_up_callback 0 1 395 0
82
inline void PhysicsCharacterController::set_stand_up_callback(PyObject *callback);

826 17 set_fall_callback 0 4 906 45 PhysicsCharacterController::set_fall_callback 0 1 396 0
78
inline void PhysicsCharacterController::set_fall_callback(PyObject *callback);

827 12 start_crouch 0 4 906 40 PhysicsCharacterController::start_crouch 0 1 397 0
52
void PhysicsCharacterController::start_crouch(void);

828 11 stop_crouch 0 4 906 39 PhysicsCharacterController::stop_crouch 0 1 398 0
51
void PhysicsCharacterController::stop_crouch(void);

829 12 is_on_ground 0 4 906 40 PhysicsCharacterController::is_on_ground 0 1 399 0
52
bool PhysicsCharacterController::is_on_ground(void);

830 10 start_jump 0 4 906 38 PhysicsCharacterController::start_jump 0 1 400 0
68
void PhysicsCharacterController::start_jump(float max_height = 3.0);

831 20 set_angular_movement 0 4 906 48 PhysicsCharacterController::set_angular_movement 0 1 401 0
67
void PhysicsCharacterController::set_angular_movement(float omega);

832 19 set_linear_movement 0 4 906 47 PhysicsCharacterController::set_linear_movement 0 1 402 0
79
void PhysicsCharacterController::set_linear_movement(LVector3 const &movement);

833 15 place_on_ground 0 4 906 43 PhysicsCharacterController::place_on_ground 0 1 403 0
55
void PhysicsCharacterController::place_on_ground(void);

834 6 update 0 4 906 34 PhysicsCharacterController::update 0 1 404 0
46
void PhysicsCharacterController::update(void);

835 15 remove_capsules 0 4 906 43 PhysicsCharacterController::remove_capsules 0 1 405 0
55
void PhysicsCharacterController::remove_capsules(void);

836 27 ~PhysicsCharacterController 0 4 906 55 PhysicsCharacterController::~PhysicsCharacterController 0 0 0
62
PhysicsCharacterController::~PhysicsCharacterController(void);

405
1 0 0 7 12 907 417 0 0 0 
2 0 0 7 12 907 417 0 0 1 6 param0 0 908  
3 0 0 7 2 912 0 0 0 1 4 name 1 911  
4 0 0 7 2 912 0 0 0 2 4 name 1 911  7 uv_name 1 911  
5 0 0 7 3 912 0 0 0 0 
6 0 0 7 4 912 0 0 0 0 
7 0 0 7 5 912 0 0 0 0 
8 0 0 7 6 912 0 0 0 0 
9 0 0 7 7 912 0 0 0 0 
10 0 0 7 8 912 0 0 0 0 
11 0 0 7 9 912 0 0 0 0 
12 0 0 7 10 912 0 0 0 0 
13 0 0 7 11 912 0 0 0 0 
14 0 0 7 16 915 440 0 0 1 4 copy 1 913  
15 0 0 7 16 915 440 0 0 1 4 name 1 911  
16 0 0 7 17 915 440 0 0 2 4 this 3 915  4 copy 1 913  
17 0 0 4 18 916 0 0 0 3 4 this 3 915  3 key 1 911  5 value 1 911  
18 0 0 6 19 911 0 0 0 2 4 this 3 913  3 key 1 911  
19 0 0 6 20 917 0 0 0 1 4 this 3 913  
20 0 0 6 21 911 0 0 0 2 4 this 3 913  1 i 1 917  
21 0 0 6 22 911 0 0 0 2 4 this 3 913  1 i 1 917  
22 0 0 6 23 842 0 0 0 2 4 this 3 913  3 key 1 911  
23 0 0 6 24 919 0 0 0 2 4 this 3 913  3 key 1 911  
24 0 0 4 25 916 0 0 0 2 4 this 3 915  11 shader_name 1 911  
25 0 0 6 26 911 0 0 0 1 4 this 3 913  
26 0 0 7 27 921 0 0 0 1 4 this 3 913  
27 0 0 6 28 922 0 0 0 2 4 this 3 913  3 key 1 911  
28 0 0 6 29 922 0 0 0 1 4 this 3 913  
29 0 0 6 30 922 0 0 0 1 4 this 3 913  
30 0 0 6 31 911 0 0 0 1 4 this 3 913  
31 0 0 6 32 911 0 0 0 1 4 this 3 913  
32 0 0 6 33 922 0 0 0 1 4 this 3 913  
33 0 0 6 34 922 0 0 0 1 4 this 3 913  
34 0 0 6 35 922 0 0 0 1 4 this 3 913  
35 0 0 7 36 913 0 0 0 1 4 file 1 923  
36 0 0 7 37 926 0 0 0 0 
37 0 0 7 41 928 0 0 0 1 3 mat 1 913  
38 0 0 7 42 928 0 0 0 1 3 mat 1 913  
39 0 0 7 43 928 0 0 0 0 
40 0 0 6 44 911 0 0 0 1 4 this 3 929  
41 0 0 6 45 922 0 0 0 1 4 this 3 929  
42 0 0 7 46 913 0 0 0 1 4 this 3 929  
43 0 0 6 47 842 0 0 0 0 
44 0 0 7 50 926 0 0 0 0 
45 0 0 6 54 917 0 0 0 1 4 this 3 931  
46 0 0 7 55 935 0 0 0 2 4 this 3 931  1 n 1 842  
47 0 0 6 56 917 0 0 0 1 4 this 3 931  
48 0 0 7 57 938 0 0 0 2 4 this 3 931  1 n 1 842  
49 0 0 7 58 926 0 0 0 0 
50 0 0 7 62 939 465 0 0 0 
51 0 0 7 62 939 465 0 0 1 6 param0 0 940  
52 0 0 7 61 926 0 0 0 0 
53 0 0 6 63 942 0 0 0 1 4 this 3 940  
54 0 0 6 64 911 0 0 0 2 4 this 3 940  3 key 1 911  
55 0 0 7 65 945 0 0 0 2 4 this 3 940  3 key 1 911  
56 0 0 7 66 949 0 0 0 3 4 this 3 940  3 key 1 911  5 scale 1 922  
57 0 0 6 67 911 0 0 0 1 4 this 3 940  
58 0 0 6 68 911 0 0 0 1 4 this 3 940  
59 0 0 6 69 842 0 0 0 1 4 this 3 940  
60 0 0 7 73 950 470 0 0 0 
61 0 0 7 73 950 470 0 0 1 6 param0 0 951  
62 0 0 7 72 926 0 0 0 0 
63 0 0 7 74 935 0 0 0 1 4 this 3 951  
64 0 0 7 75 945 0 0 0 1 4 this 3 951  
65 0 0 7 79 953 476 0 0 0 
66 0 0 7 79 953 476 0 0 1 6 param0 0 954  
67 0 0 7 78 926 0 0 0 0 
68 0 0 7 80 956 455 0 0 1 4 this 3 954  
69 0 0 6 81 922 0 0 0 2 4 this 3 954  3 pos 1 957  
70 0 0 4 82 916 0 0 0 3 4 this 3 953  4 mins 1 935  4 maxs 1 935  
71 0 0 7 86 959 481 0 0 0 
72 0 0 7 86 959 481 0 0 1 6 param0 0 960  
73 0 0 7 85 926 0 0 0 0 
74 0 0 7 87 963 0 0 0 1 4 this 3 960  
75 0 0 4 88 916 0 0 0 3 4 this 3 959  4 mins 1 935  4 maxs 1 935  
76 0 0 7 94 966 486 0 0 1 6 param0 0 964  
77 0 0 6 91 842 0 0 0 1 4 this 3 964  
78 0 0 6 92 842 0 0 0 1 4 this 3 964  
79 0 0 6 93 842 0 0 0 1 4 this 3 964  
80 0 0 7 102 969 493 0 0 1 6 param0 0 967  
81 0 0 6 97 842 0 0 0 1 4 this 3 967  
82 0 0 6 98 842 0 0 0 1 4 this 3 967  
83 0 0 6 99 842 0 0 0 1 4 this 3 967  
84 0 0 6 100 842 0 0 0 1 4 this 3 967  
85 0 0 6 101 922 0 0 0 1 4 this 3 967  
86 0 0 6 105 842 0 0 0 1 4 this 3 970  
87 0 0 4 106 916 0 0 35 // number of textures to consider.. 2 4 this 3 970  6 tcount 1 842  
88 0 0 4 107 916 0 0 21 // add textures 0 - n 3 4 this 3 970  3 wid 1 842  3 hit 1 842  
89 0 0 6 108 922 0 0 0 7 4 this 3 970  3 wid 1 842  3 hit 1 842  15 forcePowerOfTwo 1 922  14 onePixelBorder 1 922  7 max_wid 1 842  7 max_hit 1 842  
90 0 0 4 109 916 0 0 0 3 4 this 3 970  3 wid 1 842  3 hit 1 842  
91 0 0 7 110 966 486 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 970  15 forcePowerOfTwo 1 922  14 onePixelBorder 1 922  
92 0 0 7 111 969 493 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 970  5 index 1 842  
93 0 0 6 112 970 0 0 0 0 
94 0 0 4 113 916 0 0 0 1 2 tp 1 970  
95 0 0 7 118 971 507 0 0 0 
96 0 0 7 118 971 507 0 0 1 6 param0 0 972  
97 0 0 4 116 916 0 0 0 0 
98 0 0 4 117 916 0 0 0 0 
99 0 0 7 121 974 515 0 0 0 
100 0 0 7 121 974 515 0 0 1 6 param0 0 975  
101 0 0 6 122 922 0 0 0 1 4 this 3 975  
102 0 0 7 123 945 0 0 0 1 4 this 3 975  
103 0 0 7 124 979 0 0 0 1 4 this 3 975  
104 0 0 6 125 980 0 0 0 1 4 this 3 975  
105 0 0 6 126 980 0 0 0 1 4 this 3 975  
106 0 0 6 127 919 0 0 0 1 4 this 3 975  
107 0 0 7 131 981 0 0 0 0 
108 0 0 7 131 981 0 0 0 1 6 param0 0 982  
109 0 0 4 132 916 0 0 0 2 4 this 3 981  4 geom 1 984  
110 0 0 4 133 916 0 0 0 2 4 this 3 981  4 geom 1 984  
111 0 0 4 134 916 0 0 0 1 4 this 3 981  
112 0 0 7 136 974 515 0 0 4 4 this 3 981  5 start 1 957  3 end 1 957  4 mask 1 985  
113 0 0 7 137 974 515 0 0 5 4 this 3 981  6 origin 1 957  9 direction 1 989  8 distance 1 919  4 mask 1 985  
114 0 0 4 138 916 0 0 0 2 4 this 3 981  7 quality 1 842  
115 0 0 4 139 916 0 0 0 1 4 this 3 981  
116 0 0 7 140 984 0 0 0 2 4 this 3 981  7 geom_id 1 980  
117 0 0 7 143 926 0 0 0 0 
118 0 0 4 144 916 0 0 0 2 4 this 3 984  4 mask 1 985  
119 0 0 4 144 916 0 0 0 2 4 this 3 984  4 mask 1 980  
120 0 0 7 145 993 0 0 0 1 4 this 3 991  
121 0 0 6 146 980 0 0 0 1 4 this 3 991  
122 0 0 4 147 916 0 0 0 2 4 this 3 984  7 quality 1 842  
123 0 0 4 148 916 0 0 0 1 4 this 3 984  
124 0 0 7 151 994 535 0 0 1 4 name 1 911  
125 0 0 7 150 926 0 0 0 0 
126 0 0 4 152 916 0 0 0 4 4 this 3 994  2 p1 1 957  2 p2 1 957  2 p3 1 957  
127 0 0 4 153 916 0 0 0 3 4 this 3 994  4 geom 1 995  2 ts 1 998  
128 0 0 7 157 928 0 0 0 2 13 face_material 1 911  9 face_type 1 842  
129 0 0 7 158 928 0 0 0 0 
130 0 0 7 159 928 0 0 0 0 
131 0 0 6 160 911 0 0 0 1 4 this 3 1001  
132 0 0 6 161 842 0 0 0 1 4 this 3 1001  
133 0 0 6 162 922 0 0 0 1 4 this 3 1001  
134 0 0 6 163 842 0 0 0 0 
135 0 0 7 165 926 0 0 0 0 
136 0 0 7 168 942 616 0 0 0 
137 0 0 4 169 916 0 0 0 2 4 this 3 942  4 root 1 1003  
138 0 0 4 170 916 0 0 0 2 4 this 3 942  5 world 1 1005  
139 0 0 7 171 1005 0 0 0 1 4 this 3 1007  
140 0 0 6 172 922 0 0 0 2 4 this 3 1007  6 rbnode 1 1009  
141 0 0 6 173 922 0 0 0 3 4 this 3 942  6 rbnode 1 1009  12 triangle_idx 1 842  
142 0 0 6 174 911 0 0 0 3 4 this 3 942  6 rbnode 1 1009  12 triangle_idx 1 842  
143 0 0 6 175 842 0 0 0 3 4 this 3 942  6 rbnode 1 1009  12 triangle_idx 1 842  
144 0 0 6 176 842 0 0 0 3 4 this 3 942  6 rbnode 1 1009  12 triangle_idx 1 842  
145 0 0 7 177 935 0 0 0 2 4 this 3 942  8 modelnum 1 842  
146 0 0 4 178 916 0 0 0 2 4 this 3 942  5 pyent 1 1011  
147 0 0 4 179 916 0 0 0 2 4 this 3 942  5 pyent 1 1011  
148 0 0 4 180 916 0 0 0 3 4 this 3 942  1 n 1 842  9 preserved 1 922  
149 0 0 6 181 842 0 0 0 1 4 this 3 1007  
150 0 0 6 182 1011 0 0 0 2 4 this 3 1007  1 n 1 842  
151 0 0 4 183 916 0 0 0 4 4 this 3 942  4 name 1 911  6 origin 1 989  6 angles 1 989  
152 0 0 4 184 916 0 0 0 1 4 this 3 942  
153 0 0 6 185 922 0 0 0 3 4 this 3 942  4 file 1 923  13 is_transition 1 922  
154 0 0 4 186 916 0 0 0 1 4 this 3 942  
155 0 0 4 187 916 0 0 0 1 4 this 3 942  
156 0 0 4 188 916 0 0 0 3 4 this 3 942  5 gamma 1 1014  10 overbright 1 842  
157 0 0 6 189 1014 0 0 0 1 4 this 3 1007  
158 0 0 4 190 916 0 0 0 2 4 this 3 942  3 win 1 1015  
159 0 0 4 191 916 0 0 0 2 4 this 3 942  6 camera 1 1003  
160 0 0 4 192 916 0 0 0 2 4 this 3 942  6 render 1 1003  
161 0 0 4 193 916 0 0 0 2 4 this 3 942  5 shgen 1 1017  
162 0 0 4 194 916 0 0 0 2 4 this 3 942  4 flag 1 922  
163 0 0 4 195 916 0 0 0 2 4 this 3 942  4 flag 1 922  
164 0 0 4 196 916 0 0 0 2 4 this 3 942  4 type 1 842  
165 0 0 4 197 916 0 0 0 2 4 this 3 942  4 flag 1 922  
166 0 0 4 198 916 0 0 0 2 4 this 3 942  4 file 1 923  
167 0 0 4 199 916 0 0 0 2 4 this 3 942  4 flag 1 922  
168 0 0 6 200 922 0 0 0 1 4 this 3 1007  
169 0 0 7 201 963 0 0 0 1 4 this 3 1007  
170 0 0 4 202 916 0 0 0 7 4 this 3 942  14 decal_material 1 911  11 decal_scale 1 1018  6 rotate 1 919  5 start 1 957  3 end 1 957  11 decal_color 1 1022  
171 0 0 7 203 1025 0 0 0 2 4 this 3 942  3 pos 1 957  
172 0 0 4 204 916 0 0 0 1 4 this 3 942  
173 0 0 4 205 916 0 0 0 2 4 this 3 942  4 flag 1 922  
174 0 0 4 206 916 0 0 0 2 4 this 3 942  3 dir 1 989  
175 0 0 6 207 842 0 0 0 2 4 this 3 942  6 entnum 1 842  
176 0 0 4 208 916 0 0 0 4 4 this 3 942  8 modelnum 1 842  4 mins 1 935  4 maxs 1 935  
177 0 0 4 209 916 0 0 0 2 4 this 3 942  10 dispatcher 1 1011  
178 0 0 4 210 916 0 0 0 3 4 this 3 942  4 name 1 911  4 type 1 1026  
179 0 0 4 211 916 0 0 0 2 4 this 3 942  2 ai 1 922  
180 0 0 6 212 922 0 0 0 1 4 this 3 1007  
181 0 0 6 213 922 0 0 0 3 4 this 3 942  5 start 1 957  3 end 1 957  
182 0 0 7 214 935 0 0 0 3 4 this 3 942  5 start 1 957  3 end 1 957  
183 0 0 4 215 916 0 0 0 3 4 this 3 942  7 entname 1 911  4 type 1 1026  
184 0 0 6 216 1011 0 0 0 2 4 this 3 1007  10 targetname 1 911  
185 0 0 6 217 1011 0 0 0 2 4 this 3 942  9 classname 1 911  
186 0 0 4 218 916 0 0 0 3 4 this 3 942  4 list 1 1011  6 entnum 1 1029  
187 0 0 4 219 916 0 0 0 3 4 this 3 942  5 entum 1 842  5 pyent 1 1011  
188 0 0 4 220 916 0 0 0 2 4 this 3 942  3 ent 1 1011  
189 0 0 7 221 963 0 0 0 2 4 this 3 1007  8 modelnum 1 842  
190 0 0 7 222 939 465 0 0 2 4 this 3 1007  6 entnum 1 1029  
191 0 0 6 223 842 0 0 0 3 4 this 3 942  3 pos 1 957  8 headnode 1 842  
192 0 0 6 223 842 0 0 0 2 4 this 3 942  2 np 1 1003  
193 0 0 6 224 842 0 0 0 2 4 this 3 942  3 pos 1 957  
194 0 0 6 225 922 0 0 0 3 4 this 3 1007  12 curr_cluster 1 842  7 cluster 1 842  
195 0 0 6 226 922 0 0 0 3 4 this 3 942  6 bounds 1 1030  19 required_leaf_flags 1 980  
196 0 0 7 227 1030 0 0 0 3 4 this 3 942  13 net_transform 1 998  8 original 1 1030  
197 0 0 6 228 922 0 0 0 1 4 this 3 1007  
198 0 0 6 229 922 0 0 0 1 4 this 3 1007  
199 0 0 4 230 916 0 0 0 2 4 this 3 942  13 is_transition 1 922  
200 0 0 7 231 963 0 0 0 1 4 this 3 1007  
201 0 0 4 232 916 0 0 0 2 4 this 3 942  4 leaf 1 842  
202 0 0 6 233 842 0 0 0 1 4 this 3 1007  
203 0 0 6 234 842 0 0 0 1 4 this 3 1007  
204 0 0 7 235 935 0 0 0 2 4 this 3 1007  4 leaf 1 842  
205 0 0 7 236 1035 0 0 0 3 4 this 3 942  7 facenum 1 842  5 point 1 989  
206 0 0 4 237 916 0 0 0 1 4 this 3 942  
207 0 0 6 238 942 0 0 0 0 
208 0 0 7 242 1036 623 0 0 0 
209 0 0 4 243 916 0 0 0 3 4 this 3 1036  3 key 1 911  5 value 1 911  
210 0 0 4 244 916 0 0 0 1 4 this 3 1036  
211 0 0 4 245 916 0 0 0 2 4 this 3 1036  3 inp 1 1037  
212 0 0 4 246 916 0 0 0 2 4 this 3 1036  4 flag 1 842  
213 0 0 6 247 917 0 0 0 1 4 this 3 1040  
214 0 0 4 255 916 0 0 0 4 4 this 3 1042  9 vert_file 1 923  10 pixel_file 1 923  9 geom_file 1 923  
215 0 0 7 256 926 0 0 0 0 
216 0 0 7 250 1043 0 0 0 1 4 this 3 1042  
217 0 0 6 253 1044 0 0 0 1 4 this 3 1042  
218 0 0 7 260 1047 633 0 0 1 6 param0 0 1045  
219 0 0 7 259 1025 0 0 0 1 4 this 3 1045  
220 0 0 7 267 1017 659 0 0 1 6 param0 0 1048  
221 0 0 7 267 1017 659 0 0 4 6 output 1 1050  3 gsg 1 1052  6 camera 1 1003  6 render 1 1003  
222 0 0 4 268 916 0 0 0 2 4 this 3 1017  2 np 1 1003  
223 0 0 4 269 916 0 0 0 1 4 this 3 1017  
224 0 0 4 270 916 0 0 0 2 4 this 3 1017  4 spec 1 1042  
225 0 0 7 271 945 0 0 0 1 4 this 3 1048  
226 0 0 6 272 922 0 0 0 1 4 this 3 1048  
227 0 0 7 273 1025 0 0 0 1 4 this 3 1048  
228 0 0 6 274 1054 0 0 0 1 4 this 3 1048  
229 0 0 7 275 963 0 0 0 1 4 this 3 1048  
230 0 0 7 276 963 0 0 0 1 4 this 3 1048  
231 0 0 4 277 916 0 0 0 2 4 this 3 1017  7 quality 1 842  
232 0 0 6 278 842 0 0 0 1 4 this 3 1048  
233 0 0 4 279 916 0 0 0 2 4 this 3 1017  3 fog 1 1056  
234 0 0 4 280 916 0 0 0 1 4 this 3 1017  
235 0 0 7 281 1056 0 0 0 1 4 this 3 1048  
236 0 0 7 282 1060 0 0 0 1 4 this 3 1048  
237 0 0 4 283 916 0 0 0 2 4 this 3 1017  8 exposure 1 919  
238 0 0 7 284 1063 0 0 0 1 4 this 3 1048  
239 0 0 7 285 1052 0 0 0 1 4 this 3 1048  
240 0 0 7 286 1050 0 0 0 1 4 this 3 1048  
241 0 0 7 287 1047 633 0 0 1 4 this 3 1048  
242 0 0 4 288 916 0 0 0 1 3 tex 1 1025  
243 0 0 7 289 1025 0 0 0 0 
244 0 0 7 290 1068 0 0 0 2 4 spec 1 1066  5 perms 1 1040  
245 0 0 7 291 926 0 0 0 0 
246 0 0 7 296 1071 662 0 0 1 6 param0 0 1069  
247 0 0 7 296 1071 662 0 0 2 4 trav 1 1072  6 loader 1 942  
248 0 0 7 295 926 0 0 0 0 
249 0 0 7 300 1075 665 0 0 1 6 param0 0 1073  
250 0 0 7 300 1075 665 0 0 2 4 name 1 911  6 loader 1 942  
251 0 0 7 299 926 0 0 0 0 
252 0 0 7 304 1078 668 0 0 1 6 param0 0 1076  
253 0 0 7 304 1078 668 0 0 1 4 name 1 911  
254 0 0 7 303 926 0 0 0 0 
255 0 0 7 309 1081 671 0 0 1 6 param0 0 1079  
256 0 0 7 309 1081 671 0 0 1 4 name 1 911  
257 0 0 7 308 926 0 0 0 0 
258 0 0 7 314 1084 674 0 0 1 6 param0 0 1082  
259 0 0 7 314 1084 674 0 0 1 4 name 1 911  
260 0 0 7 313 926 0 0 0 0 
261 0 0 7 317 1085 676 0 0 0 
262 0 0 7 320 1086 678 0 0 0 
263 0 0 7 323 1087 680 0 0 0 
264 0 0 7 326 1088 682 0 0 0 
265 0 0 7 329 1089 684 0 0 0 
266 0 0 7 332 1090 686 0 0 0 
267 0 0 7 336 1092 0 0 0 0 
268 0 0 7 337 926 0 0 0 0 
269 0 0 7 340 1095 708 0 0 1 6 param0 0 1093  
270 0 0 7 340 1095 708 0 0 4 3 mgr 1 1096  15 listener_target 1 1003  4 root 1 1003  13 task_priority 1 842  
271 0 0 4 341 916 0 0 0 2 4 this 3 1095  6 factor 1 1014  
272 0 0 6 342 1014 0 0 0 1 4 this 3 1093  
273 0 0 4 343 916 0 0 0 2 4 this 3 1095  6 factor 1 1014  
274 0 0 6 344 1014 0 0 0 1 4 this 3 1093  
275 0 0 4 345 916 0 0 0 2 4 this 3 1095  6 factor 1 1014  
276 0 0 6 346 1014 0 0 0 1 4 this 3 1093  
277 0 0 4 347 916 0 0 0 3 4 this 3 1095  5 sound 1 1098  4 dist 1 1014  
278 0 0 6 348 1014 0 0 0 2 4 this 3 1093  5 sound 1 1098  
279 0 0 4 349 916 0 0 0 3 4 this 3 1095  5 sound 1 1098  4 dist 1 1014  
280 0 0 6 350 1014 0 0 0 2 4 this 3 1093  5 sound 1 1098  
281 0 0 4 351 916 0 0 0 2 4 this 3 1095  8 listener 1 1003  
282 0 0 4 352 916 0 0 0 1 4 this 3 1095  
283 0 0 7 353 1098 0 0 0 2 4 this 3 1095  4 path 1 911  
284 0 0 4 354 916 0 0 0 3 4 this 3 1095  5 sound 1 1098  6 object 1 1003  
285 0 0 4 355 916 0 0 0 2 4 this 3 1095  5 sound 1 1098  
286 0 0 4 356 916 0 0 0 1 4 this 3 1095  
287 0 0 4 357 916 0 0 0 1 4 this 3 1095  
288 0 0 7 362 1100 712 0 0 0 
289 0 0 7 362 1100 712 0 0 1 6 param0 0 1101  
290 0 0 4 360 916 0 0 0 4 1 x 1 919  1 y 1 919  4 left 1 945  5 right 1 945  
291 0 0 7 361 979 0 0 0 3 4 node 1 1003  5 point 1 989  4 eyes 1 1003  
292 0 0 7 365 1103 714 0 0 0 
293 0 0 7 370 1106 717 0 0 2 4 copy 1 1104  10 query_size 1 919  
294 0 0 7 370 1106 717 0 0 1 6 param0 0 1107  
295 0 0 7 370 1106 717 0 0 2 4 name 1 911  10 query_size 1 919  
296 0 0 7 369 926 0 0 0 0 
297 0 0 7 377 926 0 0 0 0 
298 0 0 7 378 1025 0 0 0 1 4 this 3 1109  
299 0 0 4 379 916 0 0 0 2 4 this 3 1109  4 pass 1 1110  
300 0 0 4 380 916 0 0 0 2 4 this 3 1109  4 pass 1 1110  
301 0 0 7 381 1110 760 0 0 2 4 this 3 1109  4 name 1 911  
302 0 0 4 382 916 0 0 0 1 4 this 3 1109  
303 0 0 4 383 916 0 0 0 1 4 this 3 1109  
304 0 0 4 384 916 0 0 0 2 4 this 3 1109  3 win 1 1050  
305 0 0 4 385 916 0 0 0 1 4 this 3 1109  
306 0 0 7 373 1043 0 0 0 1 4 this 3 1109  
307 0 0 6 375 1044 0 0 0 1 4 this 3 1109  
308 0 0 7 394 1110 760 0 0 8 2 pp 1 1111  4 name 1 911  19 texture_output_bits 1 842  7 fbprops 1 1112  10 force_size 1 922  11 forced_size 1 1115  8 div_size 1 922  3 div 1 842  
309 0 0 7 394 1110 760 0 0 1 6 param0 0 1118  
310 0 0 7 393 926 0 0 0 0 
311 0 0 7 395 963 0 0 0 1 4 this 3 1118  
312 0 0 7 396 1120 0 0 0 1 4 this 3 1118  
313 0 0 7 397 963 0 0 0 1 4 this 3 1118  
314 0 0 6 398 922 0 0 0 2 4 this 3 1118  4 bits 1 842  
315 0 0 4 399 916 0 0 0 3 4 this 3 1110  8 div_size 1 922  3 div 1 842  
316 0 0 4 400 916 0 0 0 3 4 this 3 1110  10 force_size 1 922  11 forced_size 1 1115  
317 0 0 4 401 916 0 0 0 2 4 this 3 1110  7 fbprops 1 1112  
318 0 0 4 402 916 0 0 0 2 4 this 3 1110  4 bits 1 842  
319 0 0 7 403 1120 0 0 0 2 4 this 3 1110  4 size 1 1115  
320 0 0 7 404 1025 0 0 0 2 4 this 3 1110  3 bit 1 842  
321 0 0 7 405 1025 0 0 0 1 4 this 3 1110  
322 0 0 7 406 1025 0 0 0 1 4 this 3 1110  
323 0 0 6 407 922 0 0 0 1 4 this 3 1110  
324 0 0 4 408 916 0 0 0 1 4 this 3 1110  
325 0 0 4 409 916 0 0 0 1 4 this 3 1110  
326 0 0 4 410 916 0 0 0 1 4 this 3 1110  
327 0 0 4 411 916 0 0 0 1 4 this 3 1110  
328 0 0 4 412 916 0 0 0 1 4 this 3 1110  
329 0 0 4 413 916 0 0 0 1 4 this 3 1110  
330 0 0 4 414 916 0 0 0 2 4 this 3 1110  6 output 1 1050  
331 0 0 4 415 916 0 0 0 1 4 this 3 1110  
332 0 0 7 416 1121 0 0 0 0 
333 0 0 7 389 1043 0 0 0 1 4 this 3 1110  
334 0 0 6 391 1044 0 0 0 1 4 this 3 1110  
335 0 0 7 419 1122 764 0 0 3 2 pp 1 1111  19 output_texture_bits 1 842  7 auxbits 1 842  
336 0 0 7 419 1122 764 0 0 1 6 param0 0 1123  
337 0 0 4 420 916 0 0 0 2 4 this 3 1122  1 i 1 842  
338 0 0 4 421 916 0 0 0 2 4 this 3 1122  5 state 1 1125  
339 0 0 7 424 1111 784 0 0 1 6 output 1 1050  
340 0 0 7 424 1111 784 0 0 1 6 param0 0 1128  
341 0 0 4 425 916 0 0 0 2 4 this 3 1111  6 camera 1 1003  
342 0 0 4 426 916 0 0 0 2 4 this 3 1111  6 camera 1 1003  
343 0 0 4 427 916 0 0 0 2 4 this 3 1111  6 effect 1 1109  
344 0 0 4 428 916 0 0 0 2 4 this 3 1111  6 effect 1 1109  
345 0 0 7 429 1109 731 0 0 2 4 this 3 1111  4 name 1 911  
346 0 0 7 430 1025 0 0 0 1 4 this 3 1128  
347 0 0 7 431 1025 0 0 0 1 4 this 3 1128  
348 0 0 7 432 1122 764 0 0 1 4 this 3 1128  
349 0 0 7 433 1050 0 0 0 1 4 this 3 1128  
350 0 0 7 434 963 0 0 0 2 4 this 3 1128  1 n 1 842  
351 0 0 6 435 842 0 0 0 1 4 this 3 1111  
352 0 0 7 436 1131 0 0 0 1 4 this 3 1128  
353 0 0 6 437 922 0 0 0 1 4 this 3 1128  
354 0 0 4 438 916 0 0 0 2 4 this 3 1111  4 bits 1 842  
355 0 0 4 439 916 0 0 0 3 4 this 3 1111  1 n 1 842  6 region 1 1132  
356 0 0 4 440 916 0 0 0 2 4 this 3 1111  6 region 1 1132  
357 0 0 4 441 916 0 0 0 3 4 this 3 1111  1 n 1 842  6 region 1 1132  
358 0 0 4 442 916 0 0 0 1 4 this 3 1111  
359 0 0 7 446 1136 789 0 0 1 6 param0 0 1134  
360 0 0 7 446 1136 789 0 0 1 2 pp 1 1111  
361 0 0 7 445 926 0 0 0 0 
362 0 0 4 447 916 0 0 0 2 4 this 3 1136  6 output 1 1063  
363 0 0 6 448 919 0 0 56 /**
	 * Returns the calculated exposure adjustment.
	 */ 1 4 this 3 1134  
364 0 0 7 451 1137 792 0 0 1 2 pp 1 1111  
365 0 0 7 452 1136 789 0 0 1 4 this 3 1138  
366 0 0 7 456 1140 795 0 0 1 2 pp 1 1111  
367 0 0 7 455 926 0 0 0 0 
368 0 0 7 459 926 0 0 0 0 
369 0 0 7 460 1092 0 0 0 1 6 origin 1 989  
370 0 0 7 461 945 0 0 0 1 4 this 3 1141  
371 0 0 7 465 1143 802 0 0 1 2 pp 1 1111  
372 0 0 7 464 926 0 0 0 0 
373 0 0 6 468 842 0 0 0 0 
374 0 0 7 470 926 0 0 0 0 
375 0 0 7 471 928 0 0 0 1 13 bloom_enabled 1 922  
376 0 0 6 472 922 0 0 0 1 4 this 3 1144  
377 0 0 7 476 1146 836 0 0 11 5 world 1 1005  6 render 1 1003  6 parent 1 1003  11 walk_height 1 919  13 crouch_height 1 919  11 step_height 1 919  6 radius 1 919  7 gravity 1 919  9 wall_mask 1 985  10 floor_mask 1 985  10 event_mask 1 985  
378 0 0 7 476 1146 836 0 0 1 6 param0 0 1147  
379 0 0 4 477 916 0 0 0 3 4 this 3 1146  4 degs 1 919  12 affect_speed 1 922  
380 0 0 4 478 916 0 0 0 2 4 this 3 1146  4 mask 1 985  
381 0 0 4 479 916 0 0 0 2 4 this 3 1146  8 callback 1 1011  
382 0 0 4 480 916 0 0 0 2 4 this 3 1146  8 callback 1 1011  
383 0 0 4 481 916 0 0 0 2 4 this 3 1146  7 limiter 1 922  
384 0 0 4 482 916 0 0 0 2 4 this 3 1146  3 mat 1 911  
385 0 0 4 483 916 0 0 0 2 4 this 3 1146  4 flag 1 922  
386 0 0 6 484 911 0 0 0 1 4 this 3 1147  
387 0 0 7 485 963 0 0 0 1 4 this 3 1147  
388 0 0 7 486 963 0 0 0 1 4 this 3 1147  
389 0 0 7 487 963 0 0 0 1 4 this 3 1147  
390 0 0 7 488 963 0 0 0 1 4 this 3 1147  
391 0 0 7 489 963 0 0 0 1 4 this 3 1147  
392 0 0 4 490 916 0 0 0 2 4 this 3 1146  4 grav 1 919  
393 0 0 4 491 916 0 0 0 2 4 this 3 1146  5 state 1 842  
394 0 0 6 492 842 0 0 0 1 4 this 3 1147  
395 0 0 4 493 916 0 0 0 2 4 this 3 1146  8 callback 1 1011  
396 0 0 4 494 916 0 0 0 2 4 this 3 1146  8 callback 1 1011  
397 0 0 4 495 916 0 0 0 1 4 this 3 1146  
398 0 0 4 496 916 0 0 0 1 4 this 3 1146  
399 0 0 6 497 922 0 0 0 1 4 this 3 1146  
400 0 0 4 498 916 0 0 0 2 4 this 3 1146  10 max_height 1 919  
401 0 0 4 499 916 0 0 0 2 4 this 3 1146  5 omega 1 919  
402 0 0 4 500 916 0 0 0 2 4 this 3 1146  8 movement 1 989  
403 0 0 4 501 916 0 0 0 1 4 this 3 1146  
404 0 0 4 502 916 0 0 0 1 4 this 3 1146  
405 0 0 4 503 916 0 0 0 1 4 this 3 1146  
312
837 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 416 417 0 10 406 407 408 409 410 411 412 413 414 415 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

838 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 418 440 0 21 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 0 0 1 0 839 0 0 0 0 0

839 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

840 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 449 1 1149 8 441 442 443 444 445 446 447 448 0 0 1 0 841 0 0 0 0 0

841 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

842 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

843 12 BoundingKDOP 0 141313 12 BoundingKDOP 12 BoundingKDOP 0 0 0 0 455 0 5 450 451 452 453 454 0 0 1 0 844 0 0 0 0 243
/**
 * This defines a bounding convex volume.  It may represent any enclosing convex volume,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

844 20 FiniteBoundingVolume 0 2048 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

845 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 457 465 0 8 456 458 459 460 461 462 463 464 0 0 1 0 839 0 0 0 0 0

846 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 467 470 0 3 466 468 469 0 0 1 0 845 0 0 0 0 0

847 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 472 476 0 4 471 473 474 475 0 0 1 0 845 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

848 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 478 481 0 3 477 479 480 0 0 1 0 845 0 0 0 0 0

849 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 485 486 0 3 482 483 484 0 0 0 0 0 0

850 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 492 493 0 5 487 488 489 490 491 0 0 0 0 0 0

851 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 503 0 9 494 495 496 497 498 499 500 501 502 0 0 0 0 0 0

852 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 506 507 0 2 504 505 0 0 0 0 0 0

853 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 508 515 0 6 509 510 511 512 513 514 0 0 0 0 0 0

854 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 516 0 0 8 517 518 519 520 521 522 523 524 0 0 1 0 855 0 0 0 1 856 0

855 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

856 0 0 794624 15 RayTraceScene:: 0 854 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

857 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 525 526 527 528 529 530 0 0 1 0 858 0 0 0 0 0

858 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

859 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 532 535 0 3 531 533 534 0 0 1 0 857 0 0 0 0 0

860 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 544 1 1150 8 536 537 538 539 540 541 542 543 0 0 1 0 841 0 0 0 1 861 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

861 0 0 794624 15 BSPFaceAttrib:: 0 860 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

862 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 545 616 0 70 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 0 0 0 0 1 863 58
/**
 * Loads and handles the operations of PBSP files.
 */

863 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 862 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

864 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 617 623 0 5 618 619 620 621 622 0 0 1 0 855 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

865 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 630 0 2 628 629 0 0 2 3 855 624 625 3 866 626 627 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

866 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

867 17 PlanarReflections 0 141313 17 PlanarReflections 17 PlanarReflections 0 0 0 1 632 633 0 1 631 0 0 1 0 855 0 0 0 0 0

868 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

869 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

870 7 AuxBits 0 532481 7 AuxBits 7 AuxBits 0 0 0 0 0 0 0 0 0 0 2 14 AUXBITS_NORMAL 14 AUXBITS_NORMAL 0
1 12 AUXBITS_ARME 12 AUXBITS_ARME 0
2 0 0

871 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 634 659 0 24 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 0 0 1 0 872 0 0 0 0 0

872 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

873 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 661 662 0 1 660 0 0 1 0 874 0 0 0 0 0

874 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

875 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 664 665 0 1 663 0 0 1 0 858 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

876 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 667 668 0 1 666 0 0 1 0 858 0 0 0 0 0

877 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 670 671 0 1 669 0 0 1 0 878 0 0 0 0 0

878 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

879 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 673 674 0 1 672 0 0 1 0 880 0 0 0 0 0

880 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

881 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 675 676 0 0 0 0 1 0 865 0 0 0 0 0

882 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 677 678 0 0 0 0 1 0 865 0 0 0 0 0

883 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 679 680 0 0 0 0 1 0 865 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

884 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 681 682 0 0 0 0 1 0 865 0 0 0 0 0

885 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 683 684 0 0 0 0 1 0 865 0 0 0 0 0

886 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 685 686 0 0 0 0 1 0 865 0 0 0 0 0

887 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 689 0 2 687 688 0 0 1 0 888 0 0 0 0 0

888 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

889 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 690 708 0 17 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 0 0 0 0 0 0

890 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 711 712 0 2 709 710 0 0 0 0 0 0

891 17 DecalModulateSpec 0 141313 17 DecalModulateSpec 17 DecalModulateSpec 0 0 0 1 713 714 0 0 0 0 1 0 883 0 0 0 0 90
/**
 * This is just an alias of UnlitGeneric that enables color blending on the decal.
 */

892 8 GlowNode 0 141313 8 GlowNode 8 GlowNode 0 0 0 1 716 717 0 1 715 0 0 1 0 893 0 0 0 0 207
/**
 * This is a specialization on GeomNode that uses a pixel occlusion query
 * to determine if the Geoms on the node should be rendered.
 *
 * This is useful for things like light glows or lens flares.
 */

893 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

894 17 PostProcessEffect 0 141313 17 PostProcessEffect 17 PostProcessEffect 0 0 0 0 731 0 9 722 723 724 725 726 727 728 729 730 0 0 2 3 855 718 719 3 866 720 721 0 0 0

895 15 PassTextureBits 0 532481 15 PassTextureBits 15 PassTextureBits 0 0 0 0 0 0 0 0 0 0 6 22 bits_PASSTEXTURE_COLOR 22 bits_PASSTEXTURE_COLOR 0
1 22 bits_PASSTEXTURE_DEPTH 22 bits_PASSTEXTURE_DEPTH 0
2 21 bits_PASSTEXTURE_AUX0 21 bits_PASSTEXTURE_AUX0 0
4 21 bits_PASSTEXTURE_AUX1 21 bits_PASSTEXTURE_AUX1 0
8 21 bits_PASSTEXTURE_AUX2 21 bits_PASSTEXTURE_AUX2 0
16 21 bits_PASSTEXTURE_AUX3 21 bits_PASSTEXTURE_AUX3 0
32 0 0

896 15 PostProcessPass 0 141313 15 PostProcessPass 15 PostProcessPass 0 0 0 1 737 760 0 23 736 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 0 0 2 3 855 732 733 3 866 734 735 0 0 0

897 20 PostProcessScenePass 0 141313 20 PostProcessScenePass 20 PostProcessScenePass 0 0 0 1 761 764 0 2 762 763 0 0 1 0 896 0 0 0 0 0

898 11 PostProcess 0 141313 11 PostProcess 11 PostProcess 0 0 0 1 765 784 0 18 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 0 0 0 0 0 0

899 7 HDRPass 0 141313 7 HDRPass 7 HDRPass 0 0 0 1 786 789 0 3 785 787 788 0 0 1 0 896 0 0 0 0 0

900 9 HDREffect 0 141313 9 HDREffect 9 HDREffect 0 0 0 1 790 792 0 1 791 0 0 1 0 894 0 0 0 0 0

901 11 BloomEffect 0 141313 11 BloomEffect 11 BloomEffect 0 0 0 1 794 795 0 1 793 0 0 1 0 894 0 0 0 0 0

902 20 LightingOriginEffect 0 141313 20 LightingOriginEffect 20 LightingOriginEffect 0 0 0 0 799 0 3 796 797 798 0 0 1 0 888 0 0 0 0 0

903 11 FXAA_Effect 0 141313 11 FXAA_Effect 11 FXAA_Effect 0 0 0 1 801 802 0 1 800 0 0 1 0 894 0 0 0 0 0

904 11 BloomAttrib 0 141313 11 BloomAttrib 11 BloomAttrib 0 0 0 0 807 1 1151 4 803 804 805 806 0 0 1 0 841 0 0 0 0 0

905 13 MovementState 0 532481 13 MovementState 13 MovementState 0 0 0 0 0 0 0 0 0 0 4 20 MOVEMENTSTATE_GROUND 20 MOVEMENTSTATE_GROUND 0
0 21 MOVEMENTSTATE_JUMPING 21 MOVEMENTSTATE_JUMPING 0
1 21 MOVEMENTSTATE_FALLING 21 MOVEMENTSTATE_FALLING 0
2 22 MOVEMENTSTATE_SWIMMING 22 MOVEMENTSTATE_SWIMMING 0
3 0 0

906 26 PhysicsCharacterController 0 141313 26 PhysicsCharacterController 26 PhysicsCharacterController 0 0 0 1 808 836 0 27 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 0 0 0 0 0 0

907 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 837 0 0 0 0 0 0 0 0 0 0

908 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 909 0 0 0 0 0 0 0 0 0 0

909 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 837 0 0 0 0 0 0 0 0 0 0

910 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

911 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

912 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 910 0 0 0 0 0 0 0 0 0 0

913 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 914 0 0 0 0 0 0 0 0 0 0

914 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 838 0 0 0 0 0 0 0 0 0 0

915 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 838 0 0 0 0 0 0 0 0 0 0

916 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

917 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 918 0 0 0 0 0 0 0 0 0 0

918 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

919 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

920 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

921 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 920 0 0 0 0 0 0 0 0 0 0

922 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

923 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 924 0 0 0 0 0 0 0 0 0 0

924 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 920 0 0 0 0 0 0 0 0 0 0

925 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

926 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 925 0 0 0 0 0 0 0 0 0 0

927 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 841 0 0 0 0 0 0 0 0 0 0

928 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 927 0 0 0 0 0 0 0 0 0 0

929 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 930 0 0 0 0 0 0 0 0 0 0

930 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 840 0 0 0 0 0 0 0 0 0 0

931 20 BoundingKDOP const * 0 8576 20 BoundingKDOP const * 20 BoundingKDOP const * 0 0 932 0 0 0 0 0 0 0 0 0 0

932 18 BoundingKDOP const 0 8832 18 BoundingKDOP const 18 BoundingKDOP const 0 0 843 0 0 0 0 0 0 0 0 0 0

933 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 934 0 0 0 0 0 0 0 0 0 0

934 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

935 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 933 0 0 0 0 0 0 0 0 0 0

936 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 937 0 0 0 0 0 0 0 0 0 0

937 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

938 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 936 0 0 0 0 0 0 0 0 0 0

939 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 845 0 0 0 0 0 0 0 0 0 0

940 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 941 0 0 0 0 0 0 0 0 0 0

941 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 845 0 0 0 0 0 0 0 0 0 0

942 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 862 0 0 0 0 0 0 0 0 0 0

943 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 944 0 0 0 0 0 0 0 0 0 0

944 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

945 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 943 0 0 0 0 0 0 0 0 0 0

946 6 LColor 0 2105344 6 LColor 6 LColor 0 0 947 0 0 0 0 0 0 0 0 0 0

947 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 948 0 0 0 0 0 0 0 0 0 0

948 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

949 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 946 0 0 0 0 0 0 0 0 0 0

950 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 846 0 0 0 0 0 0 0 0 0 0

951 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 952 0 0 0 0 0 0 0 0 0 0

952 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 846 0 0 0 0 0 0 0 0 0 0

953 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 847 0 0 0 0 0 0 0 0 0 0

954 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 955 0 0 0 0 0 0 0 0 0 0

955 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 847 0 0 0 0 0 0 0 0 0 0

956 14 BoundingKDOP * 0 8576 14 BoundingKDOP * 14 BoundingKDOP * 0 0 843 0 0 0 0 0 0 0 0 0 0

957 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 958 0 0 0 0 0 0 0 0 0 0

958 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 933 0 0 0 0 0 0 0 0 0 0

959 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 848 0 0 0 0 0 0 0 0 0 0

960 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 961 0 0 0 0 0 0 0 0 0 0

961 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 848 0 0 0 0 0 0 0 0 0 0

962 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

963 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 962 0 0 0 0 0 0 0 0 0 0

964 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 965 0 0 0 0 0 0 0 0 0 0

965 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 849 0 0 0 0 0 0 0 0 0 0

966 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 849 0 0 0 0 0 0 0 0 0 0

967 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 968 0 0 0 0 0 0 0 0 0 0

968 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 850 0 0 0 0 0 0 0 0 0 0

969 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 850 0 0 0 0 0 0 0 0 0 0

970 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 851 0 0 0 0 0 0 0 0 0 0

971 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 852 0 0 0 0 0 0 0 0 0 0

972 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 973 0 0 0 0 0 0 0 0 0 0

973 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 852 0 0 0 0 0 0 0 0 0 0

974 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 853 0 0 0 0 0 0 0 0 0 0

975 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 976 0 0 0 0 0 0 0 0 0 0

976 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 853 0 0 0 0 0 0 0 0 0 0

977 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 978 0 0 0 0 0 0 0 0 0 0

978 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

979 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 977 0 0 0 0 0 0 0 0 0 0

980 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

981 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 854 0 0 0 0 0 0 0 0 0 0

982 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 983 0 0 0 0 0 0 0 0 0 0

983 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 854 0 0 0 0 0 0 0 0 0 0

984 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 857 0 0 0 0 0 0 0 0 0 0

985 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 986 0 0 0 0 0 0 0 0 0 0

986 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 987 0 0 0 0 0 0 0 0 0 0

987 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 988 0 0 0 0 0 0 0 0 0 0

988 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

989 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 990 0 0 0 0 0 0 0 0 0 0

990 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 943 0 0 0 0 0 0 0 0 0 0

991 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 992 0 0 0 0 0 0 0 0 0 0

992 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 857 0 0 0 0 0 0 0 0 0 0

993 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 987 0 0 0 0 0 0 0 0 0 0

994 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 859 0 0 0 0 0 0 0 0 0 0

995 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 996 0 0 0 0 0 0 0 0 0 0

996 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 997 0 0 0 0 0 0 0 0 0 0

997 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

998 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 999 0 0 0 0 0 0 0 0 0 0

999 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 1000 0 0 0 0 0 0 0 0 0 0

1000 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

1001 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 1002 0 0 0 0 0 0 0 0 0 0

1002 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 860 0 0 0 0 0 0 0 0 0 0

1003 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1004 0 0 0 0 0 0 0 0 0 0

1004 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 962 0 0 0 0 0 0 0 0 0 0

1005 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 1006 0 0 0 0 0 0 0 0 0 0

1006 11 BulletWorld 0 2048 11 BulletWorld 11 BulletWorld 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1007 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 1008 0 0 0 0 0 0 0 0 0 0

1008 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 862 0 0 0 0 0 0 0 0 0 0

1009 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 1010 0 0 0 0 0 0 0 0 0 0

1010 19 BulletRigidBodyNode 0 2048 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1011 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1012 0 0 0 0 0 0 0 0 0 0

1012 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1013 0 0 0 0 0 0 0 0 0 0

1013 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1014 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 919 0 0 0 0 0 0 0 0 0 0

1015 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 1016 0 0 0 0 0 0 0 0 0 0

1016 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

1017 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 871 0 0 0 0 0 0 0 0 0 0

1018 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 1019 0 0 0 0 0 0 0 0 0 0

1019 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 1020 0 0 0 0 0 0 0 0 0 0

1020 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 1021 0 0 0 0 0 0 0 0 0 0

1021 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

1022 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 1023 0 0 0 0 0 0 0 0 0 0

1023 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 947 0 0 0 0 0 0 0 0 0 0

1024 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

1025 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1024 0 0 0 0 0 0 0 0 0 0

1026 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 1027 0 0 0 0 0 0 0 0 0 0

1027 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 1028 0 0 0 0 0 0 0 0 0 0

1028 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

1029 9 int const 0 8832 9 int const 9 int const 0 0 842 0 0 0 0 0 0 0 0 0 0

1030 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1031 0 0 0 0 0 0 0 0 0 0

1031 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1032 0 0 0 0 0 0 0 0 0 0

1032 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

1033 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 1034 0 0 0 0 0 0 0 0 0 0

1034 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 1021 0 0 0 0 0 0 0 0 0 0

1035 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 1033 0 0 0 0 0 0 0 0 0 0

1036 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 864 0 0 0 0 0 0 0 0 0 0

1037 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 1038 0 0 0 0 0 0 0 0 0 0

1038 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 1039 0 0 0 0 0 0 0 0 0 0

1039 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

1040 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 1041 0 0 0 0 0 0 0 0 0 0

1041 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 864 0 0 0 0 0 0 0 0 0 0

1042 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 865 0 0 0 0 0 0 0 0 0 0

1043 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 855 0 0 0 0 0 0 0 0 0 0

1044 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 866 0 0 0 0 0 0 0 0 0 0

1045 25 PlanarReflections const * 0 8576 25 PlanarReflections const * 25 PlanarReflections const * 0 0 1046 0 0 0 0 0 0 0 0 0 0

1046 23 PlanarReflections const 0 8832 23 PlanarReflections const 23 PlanarReflections const 0 0 867 0 0 0 0 0 0 0 0 0 0

1047 19 PlanarReflections * 0 8576 19 PlanarReflections * 19 PlanarReflections * 0 0 867 0 0 0 0 0 0 0 0 0 0

1048 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 1049 0 0 0 0 0 0 0 0 0 0

1049 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 871 0 0 0 0 0 0 0 0 0 0

1050 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 1051 0 0 0 0 0 0 0 0 0 0

1051 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

1052 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 1053 0 0 0 0 0 0 0 0 0 0

1053 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

1054 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 1055 0 0 0 0 0 0 0 0 0 0

1055 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

1056 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 1057 0 0 0 0 0 0 0 0 0 0

1057 3 Fog 0 2048 3 Fog 3 Fog 0 0 0 0 0 0 0 0 0 0 0 0 782
/**
 * Specifies how atmospheric fog effects are applied to geometry.  The Fog
 * object is now a PandaNode, which means it can be used similarly to a Light
 * to define effects relative to a particular coordinate system within the
 * scene graph.
 *
 * In exponential mode, the fog effects are always camera-relative, and it
 * does not matter where the Fog node is parented.  However, in linear mode,
 * the onset and opaque distances are defined as offsets along the local
 * forward axis (e.g.  the Y axis).  This allows the fog effect to be
 * localized to a particular region in space, rather than always camera-
 * relative.  If the fog object is not parented to any node, it is used to
 * generate traditonal camera-relative fog, as if it were parented to the
 * camera.
 */

1058 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1059 0 0 0 0 0 0 0 0 0 0

1059 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

1060 16 PTA_LVecBase4f * 0 8576 16 PTA_LVecBase4f * 16 PTA_LVecBase4f * 0 0 1058 0 0 0 0 0 0 0 0 0 0

1061 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1062 0 0 0 0 0 0 0 0 0 0

1062 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1063 11 PTA_float * 0 8576 11 PTA_float * 11 PTA_float * 0 0 1061 0 0 0 0 0 0 0 0 0 0

1064 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 1065 0 0 0 0 0 0 0 0 0 0

1065 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

1066 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 1067 0 0 0 0 0 0 0 0 0 0

1067 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 865 0 0 0 0 0 0 0 0 0 0

1068 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 1064 0 0 0 0 0 0 0 0 0 0

1069 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 1070 0 0 0 0 0 0 0 0 0 0

1070 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 873 0 0 0 0 0 0 0 0 0 0

1071 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 873 0 0 0 0 0 0 0 0 0 0

1072 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 874 0 0 0 0 0 0 0 0 0 0

1073 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 1074 0 0 0 0 0 0 0 0 0 0

1074 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 875 0 0 0 0 0 0 0 0 0 0

1075 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 875 0 0 0 0 0 0 0 0 0 0

1076 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 1077 0 0 0 0 0 0 0 0 0 0

1077 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 876 0 0 0 0 0 0 0 0 0 0

1078 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 876 0 0 0 0 0 0 0 0 0 0

1079 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 1080 0 0 0 0 0 0 0 0 0 0

1080 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 877 0 0 0 0 0 0 0 0 0 0

1081 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 877 0 0 0 0 0 0 0 0 0 0

1082 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 1083 0 0 0 0 0 0 0 0 0 0

1083 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 879 0 0 0 0 0 0 0 0 0 0

1084 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 879 0 0 0 0 0 0 0 0 0 0

1085 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 881 0 0 0 0 0 0 0 0 0 0

1086 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 882 0 0 0 0 0 0 0 0 0 0

1087 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 883 0 0 0 0 0 0 0 0 0 0

1088 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 884 0 0 0 0 0 0 0 0 0 0

1089 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 885 0 0 0 0 0 0 0 0 0 0

1090 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 886 0 0 0 0 0 0 0 0 0 0

1091 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 888 0 0 0 0 0 0 0 0 0 0

1092 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 1091 0 0 0 0 0 0 0 0 0 0

1093 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 1094 0 0 0 0 0 0 0 0 0 0

1094 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 889 0 0 0 0 0 0 0 0 0 0

1095 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 889 0 0 0 0 0 0 0 0 0 0

1096 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 1097 0 0 0 0 0 0 0 0 0 0

1097 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

1098 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 1099 0 0 0 0 0 0 0 0 0 0

1099 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

1100 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 890 0 0 0 0 0 0 0 0 0 0

1101 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 1102 0 0 0 0 0 0 0 0 0 0

1102 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 890 0 0 0 0 0 0 0 0 0 0

1103 19 DecalModulateSpec * 0 8576 19 DecalModulateSpec * 19 DecalModulateSpec * 0 0 891 0 0 0 0 0 0 0 0 0 0

1104 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 1105 0 0 0 0 0 0 0 0 0 0

1105 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 893 0 0 0 0 0 0 0 0 0 0

1106 10 GlowNode * 0 8576 10 GlowNode * 10 GlowNode * 0 0 892 0 0 0 0 0 0 0 0 0 0

1107 16 GlowNode const * 0 8576 16 GlowNode const * 16 GlowNode const * 0 0 1108 0 0 0 0 0 0 0 0 0 0

1108 14 GlowNode const 0 8832 14 GlowNode const 14 GlowNode const 0 0 892 0 0 0 0 0 0 0 0 0 0

1109 19 PostProcessEffect * 0 8576 19 PostProcessEffect * 19 PostProcessEffect * 0 0 894 0 0 0 0 0 0 0 0 0 0

1110 17 PostProcessPass * 0 8576 17 PostProcessPass * 17 PostProcessPass * 0 0 896 0 0 0 0 0 0 0 0 0 0

1111 13 PostProcess * 0 8576 13 PostProcess * 13 PostProcess * 0 0 898 0 0 0 0 0 0 0 0 0 0

1112 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1113 0 0 0 0 0 0 0 0 0 0

1113 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1114 0 0 0 0 0 0 0 0 0 0

1114 21 FrameBufferProperties 0 2048 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 0 0 0 0 0 0 0 0 0 132
/**
 * A container for the various kinds of properties we might ask to have on a
 * graphics frameBuffer before we create a GSG.
 */

1115 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 1116 0 0 0 0 0 0 0 0 0 0

1116 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 1117 0 0 0 0 0 0 0 0 0 0

1117 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

1118 23 PostProcessPass const * 0 8576 23 PostProcessPass const * 23 PostProcessPass const * 0 0 1119 0 0 0 0 0 0 0 0 0 0

1119 21 PostProcessPass const 0 8832 21 PostProcessPass const 21 PostProcessPass const 0 0 896 0 0 0 0 0 0 0 0 0 0

1120 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 1117 0 0 0 0 0 0 0 0 0 0

1121 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1114 0 0 0 0 0 0 0 0 0 0

1122 22 PostProcessScenePass * 0 8576 22 PostProcessScenePass * 22 PostProcessScenePass * 0 0 897 0 0 0 0 0 0 0 0 0 0

1123 28 PostProcessScenePass const * 0 8576 28 PostProcessScenePass const * 28 PostProcessScenePass const * 0 0 1124 0 0 0 0 0 0 0 0 0 0

1124 26 PostProcessScenePass const 0 8832 26 PostProcessScenePass const 26 PostProcessScenePass const 0 0 897 0 0 0 0 0 0 0 0 0 0

1125 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 1126 0 0 0 0 0 0 0 0 0 0

1126 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 1127 0 0 0 0 0 0 0 0 0 0

1127 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

1128 19 PostProcess const * 0 8576 19 PostProcess const * 19 PostProcess const * 0 0 1129 0 0 0 0 0 0 0 0 0 0

1129 17 PostProcess const 0 8832 17 PostProcess const 17 PostProcess const 0 0 898 0 0 0 0 0 0 0 0 0 0

1130 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

1131 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1130 0 0 0 0 0 0 0 0 0 0

1132 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1133 0 0 0 0 0 0 0 0 0 0

1133 14 DrawableRegion 0 2048 14 DrawableRegion 14 DrawableRegion 0 0 0 0 0 0 0 0 0 0 0 0 389
/**
 * This is a base class for GraphicsWindow (actually, GraphicsOutput) and
 * DisplayRegion, both of which are conceptually rectangular regions into
 * which drawing commands may be issued.  Sometimes you want to deal with a
 * single display region, and sometimes you want to deal with the whole window
 * at once, particularly for issuing clear commands and capturing screenshots.
 */

1134 15 HDRPass const * 0 8576 15 HDRPass const * 15 HDRPass const * 0 0 1135 0 0 0 0 0 0 0 0 0 0

1135 13 HDRPass const 0 8832 13 HDRPass const 13 HDRPass const 0 0 899 0 0 0 0 0 0 0 0 0 0

1136 9 HDRPass * 0 8576 9 HDRPass * 9 HDRPass * 0 0 899 0 0 0 0 0 0 0 0 0 0

1137 11 HDREffect * 0 8576 11 HDREffect * 11 HDREffect * 0 0 900 0 0 0 0 0 0 0 0 0 0

1138 17 HDREffect const * 0 8576 17 HDREffect const * 17 HDREffect const * 0 0 1139 0 0 0 0 0 0 0 0 0 0

1139 15 HDREffect const 0 8832 15 HDREffect const 15 HDREffect const 0 0 900 0 0 0 0 0 0 0 0 0 0

1140 13 BloomEffect * 0 8576 13 BloomEffect * 13 BloomEffect * 0 0 901 0 0 0 0 0 0 0 0 0 0

1141 28 LightingOriginEffect const * 0 8576 28 LightingOriginEffect const * 28 LightingOriginEffect const * 0 0 1142 0 0 0 0 0 0 0 0 0 0

1142 26 LightingOriginEffect const 0 8832 26 LightingOriginEffect const 26 LightingOriginEffect const 0 0 902 0 0 0 0 0 0 0 0 0 0

1143 13 FXAA_Effect * 0 8576 13 FXAA_Effect * 13 FXAA_Effect * 0 0 903 0 0 0 0 0 0 0 0 0 0

1144 19 BloomAttrib const * 0 8576 19 BloomAttrib const * 19 BloomAttrib const * 0 0 1145 0 0 0 0 0 0 0 0 0 0

1145 17 BloomAttrib const 0 8832 17 BloomAttrib const 17 BloomAttrib const 0 0 904 0 0 0 0 0 0 0 0 0 0

1146 28 PhysicsCharacterController * 0 8576 28 PhysicsCharacterController * 28 PhysicsCharacterController * 0 0 906 0 0 0 0 0 0 0 0 0 0

1147 34 PhysicsCharacterController const * 0 8576 34 PhysicsCharacterController const * 34 PhysicsCharacterController const * 0 0 1148 0 0 0 0 0 0 0 0 0 0

1148 32 PhysicsCharacterController const 0 8832 32 PhysicsCharacterController const 32 PhysicsCharacterController const 0 0 906 0 0 0 0 0 0 0 0 0 0

0
3
1149 10 class_slot 0 2 842 447 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

1150 10 class_slot 0 2 842 542 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

1151 10 class_slot 0 2 842 803 0 0 0 0 0 0 0 23 BloomAttrib::class_slot 0

0
